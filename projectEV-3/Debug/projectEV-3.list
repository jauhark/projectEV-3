
projectEV-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af74  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001668  0800b154  0800b154  0001b154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7bc  0800c7bc  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7bc  0800c7bc  0001c7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7c4  0800c7c4  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7c4  0800c7c4  0001c7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7c8  0800c7c8  0001c7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800c7cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020c0  2000009c  0800c868  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000215c  0800c868  0002215c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036965  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b19  00000000  00000000  00056a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002170  00000000  00000000  0005c550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f30  00000000  00000000  0005e6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fee4  00000000  00000000  000605f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000290ef  00000000  00000000  000904d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011eba4  00000000  00000000  000b95c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d8167  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009124  00000000  00000000  001d81bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000009c 	.word	0x2000009c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b13c 	.word	0x0800b13c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000a0 	.word	0x200000a0
 800021c:	0800b13c 	.word	0x0800b13c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <ssd1306_Reset>:

#define SSD1306_MAX_DELAY 100

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af04      	add	r7, sp, #16
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, SSD1306_MAX_DELAY);
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	9302      	str	r3, [sp, #8]
 80005d6:	2301      	movs	r3, #1
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	1dfb      	adds	r3, r7, #7
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2301      	movs	r3, #1
 80005e0:	2200      	movs	r2, #0
 80005e2:	2178      	movs	r1, #120	; 0x78
 80005e4:	4803      	ldr	r0, [pc, #12]	; (80005f4 <ssd1306_WriteCommand+0x2c>)
 80005e6:	f003 fd21 	bl	800402c <HAL_I2C_Mem_Write>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20001f34 	.word	0x20001f34

080005f8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af04      	add	r7, sp, #16
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, SSD1306_MAX_DELAY);
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	b29b      	uxth	r3, r3
 8000606:	2264      	movs	r2, #100	; 0x64
 8000608:	9202      	str	r2, [sp, #8]
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	2240      	movs	r2, #64	; 0x40
 8000614:	2178      	movs	r1, #120	; 0x78
 8000616:	4803      	ldr	r0, [pc, #12]	; (8000624 <ssd1306_WriteData+0x2c>)
 8000618:	f003 fd08 	bl	800402c <HAL_I2C_Mem_Write>
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20001f34 	.word	0x20001f34

08000628 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800062c:	f7ff ffc4 	bl	80005b8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000630:	2064      	movs	r0, #100	; 0x64
 8000632:	f001 f981 	bl	8001938 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000636:	2000      	movs	r0, #0
 8000638:	f000 f9e6 	bl	8000a08 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800063c:	2020      	movs	r0, #32
 800063e:	f7ff ffc3 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff ffc0 	bl	80005c8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000648:	20b0      	movs	r0, #176	; 0xb0
 800064a:	f7ff ffbd 	bl	80005c8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800064e:	20c8      	movs	r0, #200	; 0xc8
 8000650:	f7ff ffba 	bl	80005c8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff ffb7 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800065a:	2010      	movs	r0, #16
 800065c:	f7ff ffb4 	bl	80005c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000660:	2040      	movs	r0, #64	; 0x40
 8000662:	f7ff ffb1 	bl	80005c8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000666:	20ff      	movs	r0, #255	; 0xff
 8000668:	f000 f9ba 	bl	80009e0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800066c:	20a1      	movs	r0, #161	; 0xa1
 800066e:	f7ff ffab 	bl	80005c8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000672:	20a6      	movs	r0, #166	; 0xa6
 8000674:	f7ff ffa8 	bl	80005c8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000678:	20a8      	movs	r0, #168	; 0xa8
 800067a:	f7ff ffa5 	bl	80005c8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800067e:	203f      	movs	r0, #63	; 0x3f
 8000680:	f7ff ffa2 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000684:	20a4      	movs	r0, #164	; 0xa4
 8000686:	f7ff ff9f 	bl	80005c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800068a:	20d3      	movs	r0, #211	; 0xd3
 800068c:	f7ff ff9c 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff ff99 	bl	80005c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000696:	20d5      	movs	r0, #213	; 0xd5
 8000698:	f7ff ff96 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800069c:	20f0      	movs	r0, #240	; 0xf0
 800069e:	f7ff ff93 	bl	80005c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80006a2:	20d9      	movs	r0, #217	; 0xd9
 80006a4:	f7ff ff90 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80006a8:	2022      	movs	r0, #34	; 0x22
 80006aa:	f7ff ff8d 	bl	80005c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80006ae:	20da      	movs	r0, #218	; 0xda
 80006b0:	f7ff ff8a 	bl	80005c8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80006b4:	2012      	movs	r0, #18
 80006b6:	f7ff ff87 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80006ba:	20db      	movs	r0, #219	; 0xdb
 80006bc:	f7ff ff84 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80006c0:	2020      	movs	r0, #32
 80006c2:	f7ff ff81 	bl	80005c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80006c6:	208d      	movs	r0, #141	; 0x8d
 80006c8:	f7ff ff7e 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80006cc:	2014      	movs	r0, #20
 80006ce:	f7ff ff7b 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80006d2:	2001      	movs	r0, #1
 80006d4:	f000 f998 	bl	8000a08 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 f80f 	bl	80006fc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80006de:	f000 f831 	bl	8000744 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <ssd1306_Init+0xd0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <ssd1306_Init+0xd0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80006ee:	4b02      	ldr	r3, [pc, #8]	; (80006f8 <ssd1306_Init+0xd0>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	715a      	strb	r2, [r3, #5]
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200004b8 	.word	0x200004b8

080006fc <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	e00d      	b.n	8000728 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <ssd1306_Fill+0x1a>
 8000712:	2100      	movs	r1, #0
 8000714:	e000      	b.n	8000718 <ssd1306_Fill+0x1c>
 8000716:	21ff      	movs	r1, #255	; 0xff
 8000718:	4a09      	ldr	r2, [pc, #36]	; (8000740 <ssd1306_Fill+0x44>)
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	4413      	add	r3, r2
 800071e:	460a      	mov	r2, r1
 8000720:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	3301      	adds	r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800072e:	d3ed      	bcc.n	800070c <ssd1306_Fill+0x10>
    }
}
 8000730:	bf00      	nop
 8000732:	bf00      	nop
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	200000b8 	.word	0x200000b8

08000744 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800074a:	2300      	movs	r3, #0
 800074c:	71fb      	strb	r3, [r7, #7]
 800074e:	e016      	b.n	800077e <ssd1306_UpdateScreen+0x3a>
    	//uint8_t temp={0xB0+i, 0x00, 0x10};
//    	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &temp, 1);

        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	3b50      	subs	r3, #80	; 0x50
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff36 	bl	80005c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff ff33 	bl	80005c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000762:	2010      	movs	r0, #16
 8000764:	f7ff ff30 	bl	80005c8 <ssd1306_WriteCommand>
//    	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH*i], SSD1306_WIDTH);
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	01db      	lsls	r3, r3, #7
 800076c:	4a08      	ldr	r2, [pc, #32]	; (8000790 <ssd1306_UpdateScreen+0x4c>)
 800076e:	4413      	add	r3, r2
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff40 	bl	80005f8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	3301      	adds	r3, #1
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b07      	cmp	r3, #7
 8000782:	d9e5      	bls.n	8000750 <ssd1306_UpdateScreen+0xc>
    }
}
 8000784:	bf00      	nop
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000b8 	.word	0x200000b8

08000794 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
 800079e:	460b      	mov	r3, r1
 80007a0:	71bb      	strb	r3, [r7, #6]
 80007a2:	4613      	mov	r3, r2
 80007a4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	db48      	blt.n	8000840 <ssd1306_DrawPixel+0xac>
 80007ae:	79bb      	ldrb	r3, [r7, #6]
 80007b0:	2b3f      	cmp	r3, #63	; 0x3f
 80007b2:	d845      	bhi.n	8000840 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80007b4:	4b25      	ldr	r3, [pc, #148]	; (800084c <ssd1306_DrawPixel+0xb8>)
 80007b6:	791b      	ldrb	r3, [r3, #4]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d006      	beq.n	80007ca <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80007bc:	797b      	ldrb	r3, [r7, #5]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	bf0c      	ite	eq
 80007c2:	2301      	moveq	r3, #1
 80007c4:	2300      	movne	r3, #0
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80007ca:	797b      	ldrb	r3, [r7, #5]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d11a      	bne.n	8000806 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80007d0:	79fa      	ldrb	r2, [r7, #7]
 80007d2:	79bb      	ldrb	r3, [r7, #6]
 80007d4:	08db      	lsrs	r3, r3, #3
 80007d6:	b2d8      	uxtb	r0, r3
 80007d8:	4603      	mov	r3, r0
 80007da:	01db      	lsls	r3, r3, #7
 80007dc:	4413      	add	r3, r2
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <ssd1306_DrawPixel+0xbc>)
 80007e0:	5cd3      	ldrb	r3, [r2, r3]
 80007e2:	b25a      	sxtb	r2, r3
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	2101      	movs	r1, #1
 80007ec:	fa01 f303 	lsl.w	r3, r1, r3
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	4313      	orrs	r3, r2
 80007f4:	b259      	sxtb	r1, r3
 80007f6:	79fa      	ldrb	r2, [r7, #7]
 80007f8:	4603      	mov	r3, r0
 80007fa:	01db      	lsls	r3, r3, #7
 80007fc:	4413      	add	r3, r2
 80007fe:	b2c9      	uxtb	r1, r1
 8000800:	4a13      	ldr	r2, [pc, #76]	; (8000850 <ssd1306_DrawPixel+0xbc>)
 8000802:	54d1      	strb	r1, [r2, r3]
 8000804:	e01d      	b.n	8000842 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000806:	79fa      	ldrb	r2, [r7, #7]
 8000808:	79bb      	ldrb	r3, [r7, #6]
 800080a:	08db      	lsrs	r3, r3, #3
 800080c:	b2d8      	uxtb	r0, r3
 800080e:	4603      	mov	r3, r0
 8000810:	01db      	lsls	r3, r3, #7
 8000812:	4413      	add	r3, r2
 8000814:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <ssd1306_DrawPixel+0xbc>)
 8000816:	5cd3      	ldrb	r3, [r2, r3]
 8000818:	b25a      	sxtb	r2, r3
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	f003 0307 	and.w	r3, r3, #7
 8000820:	2101      	movs	r1, #1
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	b25b      	sxtb	r3, r3
 8000828:	43db      	mvns	r3, r3
 800082a:	b25b      	sxtb	r3, r3
 800082c:	4013      	ands	r3, r2
 800082e:	b259      	sxtb	r1, r3
 8000830:	79fa      	ldrb	r2, [r7, #7]
 8000832:	4603      	mov	r3, r0
 8000834:	01db      	lsls	r3, r3, #7
 8000836:	4413      	add	r3, r2
 8000838:	b2c9      	uxtb	r1, r1
 800083a:	4a05      	ldr	r2, [pc, #20]	; (8000850 <ssd1306_DrawPixel+0xbc>)
 800083c:	54d1      	strb	r1, [r2, r3]
 800083e:	e000      	b.n	8000842 <ssd1306_DrawPixel+0xae>
        return;
 8000840:	bf00      	nop
    }
}
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	200004b8 	.word	0x200004b8
 8000850:	200000b8 	.word	0x200000b8

08000854 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	4604      	mov	r4, r0
 800085c:	1d38      	adds	r0, r7, #4
 800085e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000862:	461a      	mov	r2, r3
 8000864:	4623      	mov	r3, r4
 8000866:	73fb      	strb	r3, [r7, #15]
 8000868:	4613      	mov	r3, r2
 800086a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	2b1f      	cmp	r3, #31
 8000870:	d902      	bls.n	8000878 <ssd1306_WriteChar+0x24>
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	2b7e      	cmp	r3, #126	; 0x7e
 8000876:	d901      	bls.n	800087c <ssd1306_WriteChar+0x28>
        return 0;
 8000878:	2300      	movs	r3, #0
 800087a:	e06d      	b.n	8000958 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800087c:	4b38      	ldr	r3, [pc, #224]	; (8000960 <ssd1306_WriteChar+0x10c>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	793b      	ldrb	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	2b80      	cmp	r3, #128	; 0x80
 8000888:	dc06      	bgt.n	8000898 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800088a:	4b35      	ldr	r3, [pc, #212]	; (8000960 <ssd1306_WriteChar+0x10c>)
 800088c:	885b      	ldrh	r3, [r3, #2]
 800088e:	461a      	mov	r2, r3
 8000890:	797b      	ldrb	r3, [r7, #5]
 8000892:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000894:	2b40      	cmp	r3, #64	; 0x40
 8000896:	dd01      	ble.n	800089c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000898:	2300      	movs	r3, #0
 800089a:	e05d      	b.n	8000958 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
 80008a0:	e04c      	b.n	800093c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	3b20      	subs	r3, #32
 80008a8:	7979      	ldrb	r1, [r7, #5]
 80008aa:	fb01 f303 	mul.w	r3, r1, r3
 80008ae:	4619      	mov	r1, r3
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	440b      	add	r3, r1
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	4413      	add	r3, r2
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	e034      	b.n	800092c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80008c2:	697a      	ldr	r2, [r7, #20]
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d012      	beq.n	80008f8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80008d2:	4b23      	ldr	r3, [pc, #140]	; (8000960 <ssd1306_WriteChar+0x10c>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4413      	add	r3, r2
 80008de:	b2d8      	uxtb	r0, r3
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <ssd1306_WriteChar+0x10c>)
 80008e2:	885b      	ldrh	r3, [r3, #2]
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4413      	add	r3, r2
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	7bba      	ldrb	r2, [r7, #14]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f7ff ff4f 	bl	8000794 <ssd1306_DrawPixel>
 80008f6:	e016      	b.n	8000926 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80008f8:	4b19      	ldr	r3, [pc, #100]	; (8000960 <ssd1306_WriteChar+0x10c>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	69bb      	ldr	r3, [r7, #24]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	4413      	add	r3, r2
 8000904:	b2d8      	uxtb	r0, r3
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <ssd1306_WriteChar+0x10c>)
 8000908:	885b      	ldrh	r3, [r3, #2]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	4413      	add	r3, r2
 8000912:	b2d9      	uxtb	r1, r3
 8000914:	7bbb      	ldrb	r3, [r7, #14]
 8000916:	2b00      	cmp	r3, #0
 8000918:	bf0c      	ite	eq
 800091a:	2301      	moveq	r3, #1
 800091c:	2300      	movne	r3, #0
 800091e:	b2db      	uxtb	r3, r3
 8000920:	461a      	mov	r2, r3
 8000922:	f7ff ff37 	bl	8000794 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	3301      	adds	r3, #1
 800092a:	61bb      	str	r3, [r7, #24]
 800092c:	793b      	ldrb	r3, [r7, #4]
 800092e:	461a      	mov	r2, r3
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	4293      	cmp	r3, r2
 8000934:	d3c5      	bcc.n	80008c2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3301      	adds	r3, #1
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	797b      	ldrb	r3, [r7, #5]
 800093e:	461a      	mov	r2, r3
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	4293      	cmp	r3, r2
 8000944:	d3ad      	bcc.n	80008a2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <ssd1306_WriteChar+0x10c>)
 8000948:	881a      	ldrh	r2, [r3, #0]
 800094a:	793b      	ldrb	r3, [r7, #4]
 800094c:	b29b      	uxth	r3, r3
 800094e:	4413      	add	r3, r2
 8000950:	b29a      	uxth	r2, r3
 8000952:	4b03      	ldr	r3, [pc, #12]	; (8000960 <ssd1306_WriteChar+0x10c>)
 8000954:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000956:	7bfb      	ldrb	r3, [r7, #15]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3724      	adds	r7, #36	; 0x24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	200004b8 	.word	0x200004b8

08000964 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	1d38      	adds	r0, r7, #4
 800096e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000972:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8000974:	e012      	b.n	800099c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	7818      	ldrb	r0, [r3, #0]
 800097a:	78fb      	ldrb	r3, [r7, #3]
 800097c:	1d3a      	adds	r2, r7, #4
 800097e:	ca06      	ldmia	r2, {r1, r2}
 8000980:	f7ff ff68 	bl	8000854 <ssd1306_WriteChar>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	429a      	cmp	r2, r3
 800098e:	d002      	beq.n	8000996 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	e008      	b.n	80009a8 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	3301      	adds	r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d1e8      	bne.n	8000976 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	781b      	ldrb	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	460a      	mov	r2, r1
 80009ba:	71fb      	strb	r3, [r7, #7]
 80009bc:	4613      	mov	r3, r2
 80009be:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <ssd1306_SetCursor+0x2c>)
 80009c6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <ssd1306_SetCursor+0x2c>)
 80009ce:	805a      	strh	r2, [r3, #2]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	200004b8 	.word	0x200004b8

080009e0 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80009ea:	2381      	movs	r3, #129	; 0x81
 80009ec:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fde9 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fde5 	bl	80005c8 <ssd1306_WriteCommand>
}
 80009fe:	bf00      	nop
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d005      	beq.n	8000a24 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000a18:	23af      	movs	r3, #175	; 0xaf
 8000a1a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <ssd1306_SetDisplayOn+0x38>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	719a      	strb	r2, [r3, #6]
 8000a22:	e004      	b.n	8000a2e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000a24:	23ae      	movs	r3, #174	; 0xae
 8000a26:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <ssd1306_SetDisplayOn+0x38>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fdc9 	bl	80005c8 <ssd1306_WriteCommand>
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200004b8 	.word	0x200004b8

08000a44 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08c      	sub	sp, #48	; 0x30
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2220      	movs	r2, #32
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f009 ff57 	bl	800a910 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a62:	4b33      	ldr	r3, [pc, #204]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000a64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a6a:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000a6c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a72:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a78:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000a7e:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a84:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a8a:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a90:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a96:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000a9c:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000aac:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000ab4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ab8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000aba:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000ac4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ac8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ad2:	4817      	ldr	r0, [pc, #92]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000ad4:	f001 f992 	bl	8001dfc <HAL_ADC_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000ade:	f000 faeb 	bl	80010b8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aea:	4619      	mov	r1, r3
 8000aec:	4810      	ldr	r0, [pc, #64]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000aee:	f002 fc19 	bl	8003324 <HAL_ADCEx_MultiModeConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000af8:	f000 fade 	bl	80010b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <MX_ADC1_Init+0xf0>)
 8000afe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b00:	2306      	movs	r3, #6
 8000b02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000b04:	2303      	movs	r3, #3
 8000b06:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b08:	237f      	movs	r3, #127	; 0x7f
 8000b0a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000b1a:	f001 ff09 	bl	8002930 <HAL_ADC_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000b24:	f000 fac8 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	3730      	adds	r7, #48	; 0x30
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20001e64 	.word	0x20001e64
 8000b34:	04300002 	.word	0x04300002

08000b38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b09e      	sub	sp, #120	; 0x78
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	2254      	movs	r2, #84	; 0x54
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f009 fed9 	bl	800a910 <memset>
  if(adcHandle->Instance==ADC1)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b66:	d13c      	bne.n	8000be2 <HAL_ADC_MspInit+0xaa>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b6c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b6e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b72:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f004 fbe5 	bl	8005348 <HAL_RCCEx_PeriphCLKConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b84:	f000 fa98 	bl	80010b8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_ADC_MspInit+0xb4>)
 8000b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8c:	4a17      	ldr	r2, [pc, #92]	; (8000bec <HAL_ADC_MspInit+0xb4>)
 8000b8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_ADC_MspInit+0xb4>)
 8000b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_ADC_MspInit+0xb4>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba4:	4a11      	ldr	r2, [pc, #68]	; (8000bec <HAL_ADC_MspInit+0xb4>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_ADC_MspInit+0xb4>)
 8000bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bce:	f003 f803 	bl	8003bd8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2105      	movs	r1, #5
 8000bd6:	2012      	movs	r0, #18
 8000bd8:	f002 fd64 	bl	80036a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000bdc:	2012      	movs	r0, #18
 8000bde:	f002 fd7b 	bl	80036d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000be2:	bf00      	nop
 8000be4:	3778      	adds	r7, #120	; 0x78
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000

08000bf0 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of uartDataKey */
	uartDataKeyHandle = osSemaphoreNew(1, 1, &uartDataKey_attributes);
 8000bf4:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <MX_FREERTOS_Init+0x58>)
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f006 fc9e 	bl	800753a <osSemaphoreNew>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <MX_FREERTOS_Init+0x5c>)
 8000c02:	6013      	str	r3, [r2, #0]

	/* creation of adcDataKey */
	adcDataKeyHandle = osSemaphoreNew(1, 1, &adcDataKey_attributes);
 8000c04:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <MX_FREERTOS_Init+0x60>)
 8000c06:	2101      	movs	r1, #1
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f006 fc96 	bl	800753a <osSemaphoreNew>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <MX_FREERTOS_Init+0x64>)
 8000c12:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000c14:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <MX_FREERTOS_Init+0x68>)
 8000c16:	2100      	movs	r1, #0
 8000c18:	4810      	ldr	r0, [pc, #64]	; (8000c5c <MX_FREERTOS_Init+0x6c>)
 8000c1a:	f006 fbe1 	bl	80073e0 <osThreadNew>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <MX_FREERTOS_Init+0x70>)
 8000c22:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of DisplayUpdate */
	DisplayUpdateHandle = osThreadNew(StartDisplayUpdate, NULL,
 8000c24:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <MX_FREERTOS_Init+0x74>)
 8000c26:	2100      	movs	r1, #0
 8000c28:	480f      	ldr	r0, [pc, #60]	; (8000c68 <MX_FREERTOS_Init+0x78>)
 8000c2a:	f006 fbd9 	bl	80073e0 <osThreadNew>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <MX_FREERTOS_Init+0x7c>)
 8000c32:	6013      	str	r3, [r2, #0]
			&DisplayUpdate_attributes);

	/* creation of ReadCommPorts */
	ReadCommPortsHandle = osThreadNew(StartReadCommPorts, NULL,
 8000c34:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <MX_FREERTOS_Init+0x80>)
 8000c36:	2100      	movs	r1, #0
 8000c38:	480e      	ldr	r0, [pc, #56]	; (8000c74 <MX_FREERTOS_Init+0x84>)
 8000c3a:	f006 fbd1 	bl	80073e0 <osThreadNew>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <MX_FREERTOS_Init+0x88>)
 8000c42:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	0800c728 	.word	0x0800c728
 8000c4c:	20001f2c 	.word	0x20001f2c
 8000c50:	0800c738 	.word	0x0800c738
 8000c54:	20001f24 	.word	0x20001f24
 8000c58:	0800c6bc 	.word	0x0800c6bc
 8000c5c:	08000c7d 	.word	0x08000c7d
 8000c60:	20001f20 	.word	0x20001f20
 8000c64:	0800c6e0 	.word	0x0800c6e0
 8000c68:	08000ca9 	.word	0x08000ca9
 8000c6c:	20001f30 	.word	0x20001f30
 8000c70:	0800c704 	.word	0x0800c704
 8000c74:	08000cfd 	.word	0x08000cfd
 8000c78:	20001f28 	.word	0x20001f28

08000c7c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask */
	w_Initialize();
 8000c84:	f000 fc72 	bl	800156c <w_Initialize>
	strcpy(w_uartBuff, "<<DATA>>");
 8000c88:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <StartDefaultTask+0x24>)
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <StartDefaultTask+0x28>)
 8000c8c:	cb03      	ldmia	r3!, {r0, r1}
 8000c8e:	6010      	str	r0, [r2, #0]
 8000c90:	6051      	str	r1, [r2, #4]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	7213      	strb	r3, [r2, #8]
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000c96:	2001      	movs	r0, #1
 8000c98:	f006 fc34 	bl	8007504 <osDelay>
 8000c9c:	e7fb      	b.n	8000c96 <StartDefaultTask+0x1a>
 8000c9e:	bf00      	nop
 8000ca0:	20000514 	.word	0x20000514
 8000ca4:	0800b198 	.word	0x0800b198

08000ca8 <StartDisplayUpdate>:
 * @brief Function implementing the DisplayUpdate thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayUpdate */
void StartDisplayUpdate(void *argument) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	for (;;) {

//		osSemaphoreAcquire(uartDataKeyHandle, osWaitForever);
//		osSemaphoreAcquire(adcDataKeyHandle, osWaitForever);

		w_oledCopyBuffer(w_oledParseUartData(w_uartBuff), 0, w_FONT2);
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <StartDisplayUpdate+0x40>)
 8000cb2:	f000 fce1 	bl	8001678 <w_oledParseUartData>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4a0c      	ldr	r2, [pc, #48]	; (8000cec <StartDisplayUpdate+0x44>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fcb5 	bl	800162c <w_oledCopyBuffer>

		sprintf(w_adcString, "ADC: %u", w_adcBuff);
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <StartDisplayUpdate+0x48>)
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	490a      	ldr	r1, [pc, #40]	; (8000cf4 <StartDisplayUpdate+0x4c>)
 8000cca:	480b      	ldr	r0, [pc, #44]	; (8000cf8 <StartDisplayUpdate+0x50>)
 8000ccc:	f009 fe28 	bl	800a920 <siprintf>
		w_oledCopyBuffer(w_adcString, 1, w_FONT2);
 8000cd0:	4a06      	ldr	r2, [pc, #24]	; (8000cec <StartDisplayUpdate+0x44>)
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <StartDisplayUpdate+0x50>)
 8000cd6:	f000 fca9 	bl	800162c <w_oledCopyBuffer>
		//memset(w_adcString, 0, 10);
		w_oledPageWrite();
 8000cda:	f000 fd11 	bl	8001700 <w_oledPageWrite>

//		osSemaphoreRelease(uartDataKeyHandle);
//		osSemaphoreRelease(adcDataKeyHandle);
		osDelay(10);
 8000cde:	200a      	movs	r0, #10
 8000ce0:	f006 fc10 	bl	8007504 <osDelay>
		w_oledCopyBuffer(w_oledParseUartData(w_uartBuff), 0, w_FONT2);
 8000ce4:	e7e4      	b.n	8000cb0 <StartDisplayUpdate+0x8>
 8000ce6:	bf00      	nop
 8000ce8:	20000514 	.word	0x20000514
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000546 	.word	0x20000546
 8000cf4:	0800b1a4 	.word	0x0800b1a4
 8000cf8:	2000053c 	.word	0x2000053c

08000cfc <StartReadCommPorts>:
 * @brief Function implementing the ReadCommPorts thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadCommPorts */
void StartReadCommPorts(void *argument) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartReadCommPorts */
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 8000d04:	2064      	movs	r0, #100	; 0x64
 8000d06:	f006 fbfd 	bl	8007504 <osDelay>
 8000d0a:	e7fb      	b.n	8000d04 <StartReadCommPorts+0x8>

08000d0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_DMA_Init+0x50>)
 8000d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d16:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <MX_DMA_Init+0x50>)
 8000d18:	f043 0304 	orr.w	r3, r3, #4
 8000d1c:	6493      	str	r3, [r2, #72]	; 0x48
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <MX_DMA_Init+0x50>)
 8000d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d22:	f003 0304 	and.w	r3, r3, #4
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_DMA_Init+0x50>)
 8000d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <MX_DMA_Init+0x50>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6493      	str	r3, [r2, #72]	; 0x48
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_DMA_Init+0x50>)
 8000d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2105      	movs	r1, #5
 8000d46:	200b      	movs	r0, #11
 8000d48:	f002 fcac 	bl	80036a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d4c:	200b      	movs	r0, #11
 8000d4e:	f002 fcc3 	bl	80036d8 <HAL_NVIC_EnableIRQ>

}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000

08000d60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
 8000d74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_GPIO_Init+0x7c>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <MX_GPIO_Init+0x7c>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d82:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_GPIO_Init+0x7c>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_GPIO_Init+0x7c>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <MX_GPIO_Init+0x7c>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MX_GPIO_Init+0x7c>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db0:	f003 f894 	bl	8003edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000db4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd0:	f002 ff02 	bl	8003bd8 <HAL_GPIO_Init>

}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40021000 	.word	0x40021000

08000de0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000de6:	4a1c      	ldr	r2, [pc, #112]	; (8000e58 <MX_I2C1_Init+0x78>)
 8000de8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000dec:	4a1b      	ldr	r2, [pc, #108]	; (8000e5c <MX_I2C1_Init+0x7c>)
 8000dee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e1a:	480e      	ldr	r0, [pc, #56]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e1c:	f003 f876 	bl	8003f0c <HAL_I2C_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e26:	f000 f947 	bl	80010b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4809      	ldr	r0, [pc, #36]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e2e:	f003 fbd9 	bl	80045e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e38:	f000 f93e 	bl	80010b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e40:	f003 fc1b 	bl	800467a <HAL_I2CEx_ConfigDigitalFilter>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e4a:	f000 f935 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20001f34 	.word	0x20001f34
 8000e58:	40005400 	.word	0x40005400
 8000e5c:	10802d9b 	.word	0x10802d9b

08000e60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b0a0      	sub	sp, #128	; 0x80
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e78:	f107 0318 	add.w	r3, r7, #24
 8000e7c:	2254      	movs	r2, #84	; 0x54
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f009 fd45 	bl	800a910 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a2d      	ldr	r2, [pc, #180]	; (8000f40 <HAL_I2C_MspInit+0xe0>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d153      	bne.n	8000f38 <HAL_I2C_MspInit+0xd8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e90:	2340      	movs	r3, #64	; 0x40
 8000e92:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e98:	f107 0318 	add.w	r3, r7, #24
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f004 fa53 	bl	8005348 <HAL_RCCEx_PeriphCLKConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ea8:	f000 f906 	bl	80010b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <HAL_I2C_MspInit+0xe4>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb0:	4a24      	ldr	r2, [pc, #144]	; (8000f44 <HAL_I2C_MspInit+0xe4>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb8:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <HAL_I2C_MspInit+0xe4>)
 8000eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <HAL_I2C_MspInit+0xe4>)
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec8:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <HAL_I2C_MspInit+0xe4>)
 8000eca:	f043 0302 	orr.w	r3, r3, #2
 8000ece:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <HAL_I2C_MspInit+0xe4>)
 8000ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000edc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ee0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee2:	2312      	movs	r3, #18
 8000ee4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eee:	2304      	movs	r3, #4
 8000ef0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efc:	f002 fe6c 	bl	8003bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f04:	2312      	movs	r3, #18
 8000f06:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f10:	2304      	movs	r3, #4
 8000f12:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480b      	ldr	r0, [pc, #44]	; (8000f48 <HAL_I2C_MspInit+0xe8>)
 8000f1c:	f002 fe5c 	bl	8003bd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_I2C_MspInit+0xe4>)
 8000f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_I2C_MspInit+0xe4>)
 8000f26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f2a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <HAL_I2C_MspInit+0xe4>)
 8000f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f38:	bf00      	nop
 8000f3a:	3780      	adds	r7, #128	; 0x80
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40005400 	.word	0x40005400
 8000f44:	40021000 	.word	0x40021000
 8000f48:	48000400 	.word	0x48000400

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f50:	f000 fcbb 	bl	80018ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f54:	f000 f826 	bl	8000fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f58:	f7ff ff02 	bl	8000d60 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f5c:	f7ff ff40 	bl	8000de0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000f60:	f000 fa32 	bl	80013c8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f64:	f000 f9c4 	bl	80012f0 <MX_TIM2_Init>
  MX_DMA_Init();
 8000f68:	f7ff fed0 	bl	8000d0c <MX_DMA_Init>
  MX_ADC1_Init();
 8000f6c:	f7ff fd6a 	bl	8000a44 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, w_uartBuff, sizeof(w_uartBuff));
 8000f70:	2219      	movs	r2, #25
 8000f72:	4908      	ldr	r1, [pc, #32]	; (8000f94 <main+0x48>)
 8000f74:	4808      	ldr	r0, [pc, #32]	; (8000f98 <main+0x4c>)
 8000f76:	f005 fa9d 	bl	80064b4 <HAL_UART_Receive_DMA>
  HAL_ADC_Start_IT(&hadc1);
 8000f7a:	4808      	ldr	r0, [pc, #32]	; (8000f9c <main+0x50>)
 8000f7c:	f001 f900 	bl	8002180 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 8000f80:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <main+0x54>)
 8000f82:	f004 fc85 	bl	8005890 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000f86:	f006 f9e1 	bl	800734c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000f8a:	f7ff fe31 	bl	8000bf0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000f8e:	f006 fa01 	bl	8007394 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <main+0x46>
 8000f94:	20000514 	.word	0x20000514
 8000f98:	20002078 	.word	0x20002078
 8000f9c:	20001e64 	.word	0x20001e64
 8000fa0:	20001fcc 	.word	0x20001fcc

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b094      	sub	sp, #80	; 0x50
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 0318 	add.w	r3, r7, #24
 8000fae:	2238      	movs	r2, #56	; 0x38
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f009 fcac 	bl	800a910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f003 fba4 	bl	8004714 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd6:	2340      	movs	r3, #64	; 0x40
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fe6:	2355      	movs	r3, #85	; 0x55
 8000fe8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fea:	2302      	movs	r3, #2
 8000fec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff6:	f107 0318 	add.w	r3, r7, #24
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f003 fc3e 	bl	800487c <HAL_RCC_OscConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001006:	f000 f857 	bl	80010b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100a:	230f      	movs	r3, #15
 800100c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100e:	2303      	movs	r3, #3
 8001010:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2104      	movs	r1, #4
 8001022:	4618      	mov	r0, r3
 8001024:	f003 ff42 	bl	8004eac <HAL_RCC_ClockConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800102e:	f000 f843 	bl	80010b8 <Error_Handler>
  }
}
 8001032:	bf00      	nop
 8001034:	3750      	adds	r7, #80	; 0x50
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]

}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	osSemaphoreAcquire(adcDataKeyHandle, osWaitForever);
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_ADC_ConvCpltCallback+0x38>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	4618      	mov	r0, r3
 8001062:	f006 faf3 	bl	800764c <osSemaphoreAcquire>
	w_adcBuff = HAL_ADC_GetValue(&hadc1);
 8001066:	4809      	ldr	r0, [pc, #36]	; (800108c <HAL_ADC_ConvCpltCallback+0x3c>)
 8001068:	f001 f9e6 	bl	8002438 <HAL_ADC_GetValue>
 800106c:	4603      	mov	r3, r0
 800106e:	b29a      	uxth	r2, r3
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <HAL_ADC_ConvCpltCallback+0x40>)
 8001072:	801a      	strh	r2, [r3, #0]
	osSemaphoreRelease(adcDataKeyHandle);
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <HAL_ADC_ConvCpltCallback+0x38>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f006 fb39 	bl	80076f0 <osSemaphoreRelease>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20001f24 	.word	0x20001f24
 800108c:	20001e64 	.word	0x20001e64
 8001090:	20000546 	.word	0x20000546

08001094 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d101      	bne.n	80010aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010a6:	f000 fc29 	bl	80018fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40001000 	.word	0x40001000

080010b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <Error_Handler+0x8>
	...

080010c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_MspInit+0x50>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	4a11      	ldr	r2, [pc, #68]	; (8001114 <HAL_MspInit+0x50>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6613      	str	r3, [r2, #96]	; 0x60
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <HAL_MspInit+0x50>)
 80010d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <HAL_MspInit+0x50>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <HAL_MspInit+0x50>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ec:	6593      	str	r3, [r2, #88]	; 0x58
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <HAL_MspInit+0x50>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	210f      	movs	r1, #15
 80010fe:	f06f 0001 	mvn.w	r0, #1
 8001102:	f002 facf 	bl	80036a4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001106:	f003 fba9 	bl	800485c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000

08001118 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	; 0x30
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800112e:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <HAL_InitTick+0xcc>)
 8001130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001132:	4a2c      	ldr	r2, [pc, #176]	; (80011e4 <HAL_InitTick+0xcc>)
 8001134:	f043 0310 	orr.w	r3, r3, #16
 8001138:	6593      	str	r3, [r2, #88]	; 0x58
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <HAL_InitTick+0xcc>)
 800113c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001146:	f107 020c 	add.w	r2, r7, #12
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f004 f881 	bl	8005258 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001156:	f004 f853 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 800115a:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115e:	4a22      	ldr	r2, [pc, #136]	; (80011e8 <HAL_InitTick+0xd0>)
 8001160:	fba2 2303 	umull	r2, r3, r2, r3
 8001164:	0c9b      	lsrs	r3, r3, #18
 8001166:	3b01      	subs	r3, #1
 8001168:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <HAL_InitTick+0xd4>)
 800116c:	4a20      	ldr	r2, [pc, #128]	; (80011f0 <HAL_InitTick+0xd8>)
 800116e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <HAL_InitTick+0xd4>)
 8001172:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001176:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001178:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <HAL_InitTick+0xd4>)
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800117e:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <HAL_InitTick+0xd4>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HAL_InitTick+0xd4>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800118a:	4818      	ldr	r0, [pc, #96]	; (80011ec <HAL_InitTick+0xd4>)
 800118c:	f004 fb28 	bl	80057e0 <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001196:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800119a:	2b00      	cmp	r3, #0
 800119c:	d11b      	bne.n	80011d6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800119e:	4813      	ldr	r0, [pc, #76]	; (80011ec <HAL_InitTick+0xd4>)
 80011a0:	f004 fbe6 	bl	8005970 <HAL_TIM_Base_Start_IT>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80011aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d111      	bne.n	80011d6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011b2:	2036      	movs	r0, #54	; 0x36
 80011b4:	f002 fa90 	bl	80036d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d808      	bhi.n	80011d0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80011be:	2200      	movs	r2, #0
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	2036      	movs	r0, #54	; 0x36
 80011c4:	f002 fa6e 	bl	80036a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011c8:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <HAL_InitTick+0xdc>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	e002      	b.n	80011d6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 80011d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3730      	adds	r7, #48	; 0x30
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000
 80011e8:	431bde83 	.word	0x431bde83
 80011ec:	20001f80 	.word	0x20001f80
 80011f0:	40001000 	.word	0x40001000
 80011f4:	2000002c 	.word	0x2000002c

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <NMI_Handler+0x4>

080011fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <HardFault_Handler+0x4>

08001204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <MemManage_Handler+0x4>

0800120a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <BusFault_Handler+0x4>

08001210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <UsageFault_Handler+0x4>

08001216 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <DMA1_Channel1_IRQHandler+0x10>)
 800122a:	f002 fb86 	bl	800393a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20002018 	.word	0x20002018

08001238 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <ADC1_2_IRQHandler+0x10>)
 800123e:	f001 f909 	bl	8002454 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20001e64 	.word	0x20001e64

0800124c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <TIM6_DAC_IRQHandler+0x10>)
 8001252:	f004 fc05 	bl	8005a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20001f80 	.word	0x20001f80

08001260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001268:	4a14      	ldr	r2, [pc, #80]	; (80012bc <_sbrk+0x5c>)
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <_sbrk+0x60>)
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <_sbrk+0x64>)
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <_sbrk+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	429a      	cmp	r2, r3
 800128e:	d207      	bcs.n	80012a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001290:	f009 faec 	bl	800a86c <__errno>
 8001294:	4603      	mov	r3, r0
 8001296:	220c      	movs	r2, #12
 8001298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	e009      	b.n	80012b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <_sbrk+0x64>)
 80012b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20020000 	.word	0x20020000
 80012c0:	00000400 	.word	0x00000400
 80012c4:	200004c0 	.word	0x200004c0
 80012c8:	20002160 	.word	0x20002160

080012cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <SystemInit+0x20>)
 80012d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <SystemInit+0x20>)
 80012d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <MX_TIM2_Init+0x98>)
 8001310:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001314:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <MX_TIM2_Init+0x98>)
 8001318:	f242 7210 	movw	r2, #10000	; 0x2710
 800131c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_TIM2_Init+0x98>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 169;
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_TIM2_Init+0x98>)
 8001326:	22a9      	movs	r2, #169	; 0xa9
 8001328:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_TIM2_Init+0x98>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_TIM2_Init+0x98>)
 8001332:	2280      	movs	r2, #128	; 0x80
 8001334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001336:	4814      	ldr	r0, [pc, #80]	; (8001388 <MX_TIM2_Init+0x98>)
 8001338:	f004 fa52 	bl	80057e0 <HAL_TIM_Base_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001342:	f7ff feb9 	bl	80010b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	4619      	mov	r1, r3
 8001352:	480d      	ldr	r0, [pc, #52]	; (8001388 <MX_TIM2_Init+0x98>)
 8001354:	f004 fd04 	bl	8005d60 <HAL_TIM_ConfigClockSource>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800135e:	f7ff feab 	bl	80010b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001362:	2320      	movs	r3, #32
 8001364:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	; (8001388 <MX_TIM2_Init+0x98>)
 8001370:	f004 ff74 	bl	800625c <HAL_TIMEx_MasterConfigSynchronization>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800137a:	f7ff fe9d 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3720      	adds	r7, #32
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20001fcc 	.word	0x20001fcc

0800138c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800139c:	d10b      	bne.n	80013b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <HAL_TIM_Base_MspInit+0x38>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a2:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_TIM_Base_MspInit+0x38>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6593      	str	r3, [r2, #88]	; 0x58
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_TIM_Base_MspInit+0x38>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000

080013c8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013cc:	4b22      	ldr	r3, [pc, #136]	; (8001458 <MX_USART1_UART_Init+0x90>)
 80013ce:	4a23      	ldr	r2, [pc, #140]	; (800145c <MX_USART1_UART_Init+0x94>)
 80013d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013d2:	4b21      	ldr	r3, [pc, #132]	; (8001458 <MX_USART1_UART_Init+0x90>)
 80013d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013da:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <MX_USART1_UART_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <MX_USART1_UART_Init+0x90>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013e6:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <MX_USART1_UART_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013ec:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <MX_USART1_UART_Init+0x90>)
 80013ee:	220c      	movs	r2, #12
 80013f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f2:	4b19      	ldr	r3, [pc, #100]	; (8001458 <MX_USART1_UART_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f8:	4b17      	ldr	r3, [pc, #92]	; (8001458 <MX_USART1_UART_Init+0x90>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fe:	4b16      	ldr	r3, [pc, #88]	; (8001458 <MX_USART1_UART_Init+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001404:	4b14      	ldr	r3, [pc, #80]	; (8001458 <MX_USART1_UART_Init+0x90>)
 8001406:	2200      	movs	r2, #0
 8001408:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <MX_USART1_UART_Init+0x90>)
 800140c:	2200      	movs	r2, #0
 800140e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001410:	4811      	ldr	r0, [pc, #68]	; (8001458 <MX_USART1_UART_Init+0x90>)
 8001412:	f004 ffff 	bl	8006414 <HAL_UART_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800141c:	f7ff fe4c 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001420:	2100      	movs	r1, #0
 8001422:	480d      	ldr	r0, [pc, #52]	; (8001458 <MX_USART1_UART_Init+0x90>)
 8001424:	f005 fe84 	bl	8007130 <HAL_UARTEx_SetTxFifoThreshold>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800142e:	f7ff fe43 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001432:	2100      	movs	r1, #0
 8001434:	4808      	ldr	r0, [pc, #32]	; (8001458 <MX_USART1_UART_Init+0x90>)
 8001436:	f005 feb9 	bl	80071ac <HAL_UARTEx_SetRxFifoThreshold>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001440:	f7ff fe3a 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001444:	4804      	ldr	r0, [pc, #16]	; (8001458 <MX_USART1_UART_Init+0x90>)
 8001446:	f005 fe3a 	bl	80070be <HAL_UARTEx_DisableFifoMode>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001450:	f7ff fe32 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20002078 	.word	0x20002078
 800145c:	40013800 	.word	0x40013800

08001460 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b09e      	sub	sp, #120	; 0x78
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	2254      	movs	r2, #84	; 0x54
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f009 fa45 	bl	800a910 <memset>
  if(uartHandle->Instance==USART1)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a34      	ldr	r2, [pc, #208]	; (800155c <HAL_UART_MspInit+0xfc>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d160      	bne.n	8001552 <HAL_UART_MspInit+0xf2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001490:	2301      	movs	r3, #1
 8001492:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	4618      	mov	r0, r3
 800149e:	f003 ff53 	bl	8005348 <HAL_RCCEx_PeriphCLKConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014a8:	f7ff fe06 	bl	80010b8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ac:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <HAL_UART_MspInit+0x100>)
 80014ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b0:	4a2b      	ldr	r2, [pc, #172]	; (8001560 <HAL_UART_MspInit+0x100>)
 80014b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b6:	6613      	str	r3, [r2, #96]	; 0x60
 80014b8:	4b29      	ldr	r3, [pc, #164]	; (8001560 <HAL_UART_MspInit+0x100>)
 80014ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <HAL_UART_MspInit+0x100>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c8:	4a25      	ldr	r2, [pc, #148]	; (8001560 <HAL_UART_MspInit+0x100>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <HAL_UART_MspInit+0x100>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014e0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014ee:	2307      	movs	r3, #7
 80014f0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014f6:	4619      	mov	r1, r3
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fc:	f002 fb6c 	bl	8003bd8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001500:	4b18      	ldr	r3, [pc, #96]	; (8001564 <HAL_UART_MspInit+0x104>)
 8001502:	4a19      	ldr	r2, [pc, #100]	; (8001568 <HAL_UART_MspInit+0x108>)
 8001504:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <HAL_UART_MspInit+0x104>)
 8001508:	2218      	movs	r2, #24
 800150a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_UART_MspInit+0x104>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <HAL_UART_MspInit+0x104>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_UART_MspInit+0x104>)
 800151a:	2280      	movs	r2, #128	; 0x80
 800151c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_UART_MspInit+0x104>)
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_UART_MspInit+0x104>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <HAL_UART_MspInit+0x104>)
 800152c:	2220      	movs	r2, #32
 800152e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_UART_MspInit+0x104>)
 8001532:	2200      	movs	r2, #0
 8001534:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001536:	480b      	ldr	r0, [pc, #44]	; (8001564 <HAL_UART_MspInit+0x104>)
 8001538:	f002 f8dc 	bl	80036f4 <HAL_DMA_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001542:	f7ff fdb9 	bl	80010b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a06      	ldr	r2, [pc, #24]	; (8001564 <HAL_UART_MspInit+0x104>)
 800154a:	67da      	str	r2, [r3, #124]	; 0x7c
 800154c:	4a05      	ldr	r2, [pc, #20]	; (8001564 <HAL_UART_MspInit+0x104>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001552:	bf00      	nop
 8001554:	3778      	adds	r7, #120	; 0x78
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40013800 	.word	0x40013800
 8001560:	40021000 	.word	0x40021000
 8001564:	20002018 	.word	0x20002018
 8001568:	40020008 	.word	0x40020008

0800156c <w_Initialize>:
//-------------------------------------------------------------
/*
 * function initialising oled buffer struct. this value will be displayed unless
 * changed in program
 */
void w_Initialize() {
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0

	w_oledData[0].font = w_FONT1;
 8001570:	4b22      	ldr	r3, [pc, #136]	; (80015fc <w_Initialize+0x90>)
 8001572:	4a23      	ldr	r2, [pc, #140]	; (8001600 <w_Initialize+0x94>)
 8001574:	60da      	str	r2, [r3, #12]
	w_oledData[1].font = w_FONT1;
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <w_Initialize+0x90>)
 8001578:	4a21      	ldr	r2, [pc, #132]	; (8001600 <w_Initialize+0x94>)
 800157a:	61da      	str	r2, [r3, #28]
	w_oledData[2].font = w_FONT1;
 800157c:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <w_Initialize+0x90>)
 800157e:	4a20      	ldr	r2, [pc, #128]	; (8001600 <w_Initialize+0x94>)
 8001580:	62da      	str	r2, [r3, #44]	; 0x2c
	w_oledData[3].font = w_FONT2;
 8001582:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <w_Initialize+0x90>)
 8001584:	4a1f      	ldr	r2, [pc, #124]	; (8001604 <w_Initialize+0x98>)
 8001586:	63da      	str	r2, [r3, #60]	; 0x3c
	w_oledData[4].font = w_FONT2;
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <w_Initialize+0x90>)
 800158a:	4a1e      	ldr	r2, [pc, #120]	; (8001604 <w_Initialize+0x98>)
 800158c:	64da      	str	r2, [r3, #76]	; 0x4c

	strcpy(w_oledData[0].stringData, "Hell-0");
 800158e:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <w_Initialize+0x90>)
 8001590:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <w_Initialize+0x9c>)
 8001592:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001596:	6018      	str	r0, [r3, #0]
 8001598:	3304      	adds	r3, #4
 800159a:	8019      	strh	r1, [r3, #0]
 800159c:	3302      	adds	r3, #2
 800159e:	0c0a      	lsrs	r2, r1, #16
 80015a0:	701a      	strb	r2, [r3, #0]
	strcpy(w_oledData[1].stringData, "Hell-1");
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <w_Initialize+0xa0>)
 80015a4:	4a1a      	ldr	r2, [pc, #104]	; (8001610 <w_Initialize+0xa4>)
 80015a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015aa:	6018      	str	r0, [r3, #0]
 80015ac:	3304      	adds	r3, #4
 80015ae:	8019      	strh	r1, [r3, #0]
 80015b0:	3302      	adds	r3, #2
 80015b2:	0c0a      	lsrs	r2, r1, #16
 80015b4:	701a      	strb	r2, [r3, #0]
	strcpy(w_oledData[2].stringData, "Hell-2");
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <w_Initialize+0xa8>)
 80015b8:	4a17      	ldr	r2, [pc, #92]	; (8001618 <w_Initialize+0xac>)
 80015ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015be:	6018      	str	r0, [r3, #0]
 80015c0:	3304      	adds	r3, #4
 80015c2:	8019      	strh	r1, [r3, #0]
 80015c4:	3302      	adds	r3, #2
 80015c6:	0c0a      	lsrs	r2, r1, #16
 80015c8:	701a      	strb	r2, [r3, #0]
	strcpy(w_oledData[3].stringData, "Hell-3");
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <w_Initialize+0xb0>)
 80015cc:	4a14      	ldr	r2, [pc, #80]	; (8001620 <w_Initialize+0xb4>)
 80015ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015d2:	6018      	str	r0, [r3, #0]
 80015d4:	3304      	adds	r3, #4
 80015d6:	8019      	strh	r1, [r3, #0]
 80015d8:	3302      	adds	r3, #2
 80015da:	0c0a      	lsrs	r2, r1, #16
 80015dc:	701a      	strb	r2, [r3, #0]
	strcpy(w_oledData[4].stringData, "Hell-4");
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <w_Initialize+0xb8>)
 80015e0:	4a11      	ldr	r2, [pc, #68]	; (8001628 <w_Initialize+0xbc>)
 80015e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015e6:	6018      	str	r0, [r3, #0]
 80015e8:	3304      	adds	r3, #4
 80015ea:	8019      	strh	r1, [r3, #0]
 80015ec:	3302      	adds	r3, #2
 80015ee:	0c0a      	lsrs	r2, r1, #16
 80015f0:	701a      	strb	r2, [r3, #0]
	ssd1306_Init();
 80015f2:	f7ff f819 	bl	8000628 <ssd1306_Init>
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200004c4 	.word	0x200004c4
 8001600:	20000000 	.word	0x20000000
 8001604:	20000008 	.word	0x20000008
 8001608:	0800b1ac 	.word	0x0800b1ac
 800160c:	200004d4 	.word	0x200004d4
 8001610:	0800b1b4 	.word	0x0800b1b4
 8001614:	200004e4 	.word	0x200004e4
 8001618:	0800b1bc 	.word	0x0800b1bc
 800161c:	200004f4 	.word	0x200004f4
 8001620:	0800b1c4 	.word	0x0800b1c4
 8001624:	20000504 	.word	0x20000504
 8001628:	0800b1cc 	.word	0x0800b1cc

0800162c <w_oledCopyBuffer>:

//-------------------------------------------------------------
/*
 * copying the character data to oled buffer struct
 */
void w_oledCopyBuffer(char *data, uint8_t line, FontDef *font) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	460b      	mov	r3, r1
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	72fb      	strb	r3, [r7, #11]
	memset(w_oledData[line].stringData, 0, w_OLED_MSG_LEN);
 800163a:	7afb      	ldrb	r3, [r7, #11]
 800163c:	011b      	lsls	r3, r3, #4
 800163e:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <w_oledCopyBuffer+0x48>)
 8001640:	4413      	add	r3, r2
 8001642:	220a      	movs	r2, #10
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f009 f962 	bl	800a910 <memset>
	strcpy(w_oledData[line].stringData, data);
 800164c:	7afb      	ldrb	r3, [r7, #11]
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	4a08      	ldr	r2, [pc, #32]	; (8001674 <w_oledCopyBuffer+0x48>)
 8001652:	4413      	add	r3, r2
 8001654:	68f9      	ldr	r1, [r7, #12]
 8001656:	4618      	mov	r0, r3
 8001658:	f009 f982 	bl	800a960 <strcpy>
//	sprintf(w_oledData[line].stringData, data);
	w_oledData[line].font = font;
 800165c:	7afb      	ldrb	r3, [r7, #11]
 800165e:	4a05      	ldr	r2, [pc, #20]	; (8001674 <w_oledCopyBuffer+0x48>)
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	4413      	add	r3, r2
 8001664:	330c      	adds	r3, #12
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	601a      	str	r2, [r3, #0]
}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200004c4 	.word	0x200004c4

08001678 <w_oledParseUartData>:

char* w_oledParseUartData(char *data) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	uint8_t uartMsgBegFound = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	75fb      	strb	r3, [r7, #23]
	uint8_t uartMsgEndFound = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	72fb      	strb	r3, [r7, #11]
	char tempVar;
	char *dataptr = w_uartParsedData;
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <w_oledParseUartData+0x80>)
 800168a:	613b      	str	r3, [r7, #16]
	memset(w_uartParsedData, 0, w_OLED_MSG_LEN);
 800168c:	220a      	movs	r2, #10
 800168e:	2100      	movs	r1, #0
 8001690:	4819      	ldr	r0, [pc, #100]	; (80016f8 <w_oledParseUartData+0x80>)
 8001692:	f009 f93d 	bl	800a910 <memset>
	for (int i = 0; i < w_UART_DMA_BUFF_LEN; i++) {
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2b18      	cmp	r3, #24
 800169e:	dc25      	bgt.n	80016ec <w_oledParseUartData+0x74>
		if (i != 0)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d002      	beq.n	80016ac <w_oledParseUartData+0x34>
			data++;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3301      	adds	r3, #1
 80016aa:	607b      	str	r3, [r7, #4]
		tempVar = *data;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	72bb      	strb	r3, [r7, #10]
		if (tempVar == '<' && uartMsgEndFound == 0) {
 80016b2:	7abb      	ldrb	r3, [r7, #10]
 80016b4:	2b3c      	cmp	r3, #60	; 0x3c
 80016b6:	d105      	bne.n	80016c4 <w_oledParseUartData+0x4c>
 80016b8:	7afb      	ldrb	r3, [r7, #11]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d102      	bne.n	80016c4 <w_oledParseUartData+0x4c>
			uartMsgBegFound = 1;
 80016be:	2301      	movs	r3, #1
 80016c0:	75fb      	strb	r3, [r7, #23]
			continue;
 80016c2:	e00f      	b.n	80016e4 <w_oledParseUartData+0x6c>
		}
		if (uartMsgBegFound) {
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00c      	beq.n	80016e4 <w_oledParseUartData+0x6c>
			if (tempVar == '>') {
 80016ca:	7abb      	ldrb	r3, [r7, #10]
 80016cc:	2b3e      	cmp	r3, #62	; 0x3e
 80016ce:	d103      	bne.n	80016d8 <w_oledParseUartData+0x60>
				uartMsgEndFound = 1;
 80016d0:	2301      	movs	r3, #1
 80016d2:	72fb      	strb	r3, [r7, #11]
				return w_uartParsedData;
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <w_oledParseUartData+0x80>)
 80016d6:	e00a      	b.n	80016ee <w_oledParseUartData+0x76>
			}
			*dataptr = tempVar;
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	7aba      	ldrb	r2, [r7, #10]
 80016dc:	701a      	strb	r2, [r3, #0]
			dataptr++;
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	3301      	adds	r3, #1
 80016e2:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < w_UART_DMA_BUFF_LEN; i++) {
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3301      	adds	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	e7d6      	b.n	800169a <w_oledParseUartData+0x22>
		}
	}
	return " ERROR ";
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <w_oledParseUartData+0x84>)
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000530 	.word	0x20000530
 80016fc:	0800b1d4 	.word	0x0800b1d4

08001700 <w_oledPageWrite>:
/*
 * Writes the data in w_oledData to lines according to its size. Extra data not fitting
 * will be discarded.
 */

void w_oledPageWrite() {
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
	static uint8_t LineVal = 0;
	ssd1306_SetCursor(0, w_oledYPos[0]);
 8001706:	4b43      	ldr	r3, [pc, #268]	; (8001814 <w_oledPageWrite+0x114>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	2000      	movs	r0, #0
 800170e:	f7ff f94f 	bl	80009b0 <ssd1306_SetCursor>
	ssd1306_WriteString(w_oledData[0].stringData, *(w_oledData[0].font), White);
 8001712:	4b41      	ldr	r3, [pc, #260]	; (8001818 <w_oledPageWrite+0x118>)
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	2301      	movs	r3, #1
 8001718:	ca06      	ldmia	r2, {r1, r2}
 800171a:	483f      	ldr	r0, [pc, #252]	; (8001818 <w_oledPageWrite+0x118>)
 800171c:	f7ff f922 	bl	8000964 <ssd1306_WriteString>

	for (int i = 1; i < w_OLED_MSG_NO; i++) {
 8001720:	2301      	movs	r3, #1
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b04      	cmp	r3, #4
 8001728:	dc2c      	bgt.n	8001784 <w_oledPageWrite+0x84>
		LineVal += w_oledPosIncVal(i);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f000 f878 	bl	8001824 <_Z15w_oledPosIncValh>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	4b38      	ldr	r3, [pc, #224]	; (800181c <w_oledPageWrite+0x11c>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4413      	add	r3, r2
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b36      	ldr	r3, [pc, #216]	; (800181c <w_oledPageWrite+0x11c>)
 8001742:	701a      	strb	r2, [r3, #0]
		if (LineVal >= w_OLED_MSG_NO)
 8001744:	4b35      	ldr	r3, [pc, #212]	; (800181c <w_oledPageWrite+0x11c>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b04      	cmp	r3, #4
 800174a:	d81a      	bhi.n	8001782 <w_oledPageWrite+0x82>
			break;
		ssd1306_SetCursor(0, w_oledYPos[LineVal]);
 800174c:	4b33      	ldr	r3, [pc, #204]	; (800181c <w_oledPageWrite+0x11c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4b30      	ldr	r3, [pc, #192]	; (8001814 <w_oledPageWrite+0x114>)
 8001754:	5c9b      	ldrb	r3, [r3, r2]
 8001756:	4619      	mov	r1, r3
 8001758:	2000      	movs	r0, #0
 800175a:	f7ff f929 	bl	80009b0 <ssd1306_SetCursor>
		ssd1306_WriteString(w_oledData[i].stringData, *(w_oledData[i].font),
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	4a2d      	ldr	r2, [pc, #180]	; (8001818 <w_oledPageWrite+0x118>)
 8001764:	1898      	adds	r0, r3, r2
 8001766:	4a2c      	ldr	r2, [pc, #176]	; (8001818 <w_oledPageWrite+0x118>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	4413      	add	r3, r2
 800176e:	330c      	adds	r3, #12
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	2301      	movs	r3, #1
 8001774:	ca06      	ldmia	r2, {r1, r2}
 8001776:	f7ff f8f5 	bl	8000964 <ssd1306_WriteString>
	for (int i = 1; i < w_OLED_MSG_NO; i++) {
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3301      	adds	r3, #1
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	e7d0      	b.n	8001724 <w_oledPageWrite+0x24>
			break;
 8001782:	bf00      	nop
				White);
	}

	ssd1306_UpdateScreen();
 8001784:	f7fe ffde 	bl	8000744 <ssd1306_UpdateScreen>

	LineVal = 0;
 8001788:	4b24      	ldr	r3, [pc, #144]	; (800181c <w_oledPageWrite+0x11c>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]

	ssd1306_SetCursor(0, w_oledYPos[0]);
 800178e:	4b21      	ldr	r3, [pc, #132]	; (8001814 <w_oledPageWrite+0x114>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	4619      	mov	r1, r3
 8001794:	2000      	movs	r0, #0
 8001796:	f7ff f90b 	bl	80009b0 <ssd1306_SetCursor>
	ssd1306_WriteString(w_CLEARBUFF, *(w_oledData[0].font), White);
 800179a:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <w_oledPageWrite+0x118>)
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	2301      	movs	r3, #1
 80017a0:	ca06      	ldmia	r2, {r1, r2}
 80017a2:	481f      	ldr	r0, [pc, #124]	; (8001820 <w_oledPageWrite+0x120>)
 80017a4:	f7ff f8de 	bl	8000964 <ssd1306_WriteString>

	for (int i = 1; i < w_OLED_MSG_NO; i++) {
 80017a8:	2301      	movs	r3, #1
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	dc29      	bgt.n	8001806 <w_oledPageWrite+0x106>
		LineVal += w_oledPosIncVal(i);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 f834 	bl	8001824 <_Z15w_oledPosIncValh>
 80017bc:	4603      	mov	r3, r0
 80017be:	461a      	mov	r2, r3
 80017c0:	4b16      	ldr	r3, [pc, #88]	; (800181c <w_oledPageWrite+0x11c>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4413      	add	r3, r2
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <w_oledPageWrite+0x11c>)
 80017ca:	701a      	strb	r2, [r3, #0]
		if (LineVal >= w_OLED_MSG_NO)
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <w_oledPageWrite+0x11c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d817      	bhi.n	8001804 <w_oledPageWrite+0x104>
			break;
		ssd1306_SetCursor(0, w_oledYPos[LineVal]);
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <w_oledPageWrite+0x11c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <w_oledPageWrite+0x114>)
 80017dc:	5c9b      	ldrb	r3, [r3, r2]
 80017de:	4619      	mov	r1, r3
 80017e0:	2000      	movs	r0, #0
 80017e2:	f7ff f8e5 	bl	80009b0 <ssd1306_SetCursor>
		ssd1306_WriteString(w_CLEARBUFF, *(w_oledData[i].font), White);
 80017e6:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <w_oledPageWrite+0x118>)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	4413      	add	r3, r2
 80017ee:	330c      	adds	r3, #12
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	2301      	movs	r3, #1
 80017f4:	ca06      	ldmia	r2, {r1, r2}
 80017f6:	480a      	ldr	r0, [pc, #40]	; (8001820 <w_oledPageWrite+0x120>)
 80017f8:	f7ff f8b4 	bl	8000964 <ssd1306_WriteString>
	for (int i = 1; i < w_OLED_MSG_NO; i++) {
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	e7d3      	b.n	80017ac <w_oledPageWrite+0xac>
			break;
 8001804:	bf00      	nop
	}

	LineVal = 0;
 8001806:	4b05      	ldr	r3, [pc, #20]	; (800181c <w_oledPageWrite+0x11c>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000014 	.word	0x20000014
 8001818:	200004c4 	.word	0x200004c4
 800181c:	20000548 	.word	0x20000548
 8001820:	2000001c 	.word	0x2000001c

08001824 <_Z15w_oledPosIncValh>:
//-------------------------------------------------------------
/*
 * function returning the value to be incremented in Line position according
 * to size taken by previous line in oled.
 */
uint8_t w_oledPosIncVal(uint8_t i) {
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
	if (w_oledData[i - 1].font == w_FONT1)
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	3b01      	subs	r3, #1
 8001832:	4a0e      	ldr	r2, [pc, #56]	; (800186c <_Z15w_oledPosIncValh+0x48>)
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	4413      	add	r3, r2
 8001838:	330c      	adds	r3, #12
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0c      	ldr	r2, [pc, #48]	; (8001870 <_Z15w_oledPosIncValh+0x4c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d101      	bne.n	8001846 <_Z15w_oledPosIncValh+0x22>
		return 1;
 8001842:	2301      	movs	r3, #1
 8001844:	e00c      	b.n	8001860 <_Z15w_oledPosIncValh+0x3c>
	else if (w_oledData[i - 1].font == w_FONT2)
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	3b01      	subs	r3, #1
 800184a:	4a08      	ldr	r2, [pc, #32]	; (800186c <_Z15w_oledPosIncValh+0x48>)
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	4413      	add	r3, r2
 8001850:	330c      	adds	r3, #12
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a07      	ldr	r2, [pc, #28]	; (8001874 <_Z15w_oledPosIncValh+0x50>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d101      	bne.n	800185e <_Z15w_oledPosIncValh+0x3a>
		return 2;
 800185a:	2302      	movs	r3, #2
 800185c:	e000      	b.n	8001860 <_Z15w_oledPosIncValh+0x3c>
	return 2;
 800185e:	2302      	movs	r3, #2
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	200004c4 	.word	0x200004c4
 8001870:	20000000 	.word	0x20000000
 8001874:	20000008 	.word	0x20000008

08001878 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001878:	480d      	ldr	r0, [pc, #52]	; (80018b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800187a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800187c:	480d      	ldr	r0, [pc, #52]	; (80018b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800187e:	490e      	ldr	r1, [pc, #56]	; (80018b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001880:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <LoopForever+0xe>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001884:	e002      	b.n	800188c <LoopCopyDataInit>

08001886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188a:	3304      	adds	r3, #4

0800188c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800188c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001890:	d3f9      	bcc.n	8001886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001892:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001894:	4c0b      	ldr	r4, [pc, #44]	; (80018c4 <LoopForever+0x16>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001898:	e001      	b.n	800189e <LoopFillZerobss>

0800189a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800189c:	3204      	adds	r2, #4

0800189e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a0:	d3fb      	bcc.n	800189a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018a2:	f7ff fd13 	bl	80012cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018a6:	f008 ffe7 	bl	800a878 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018aa:	f7ff fb4f 	bl	8000f4c <main>

080018ae <LoopForever>:

LoopForever:
    b LoopForever
 80018ae:	e7fe      	b.n	80018ae <LoopForever>
  ldr   r0, =_estack
 80018b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b8:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80018bc:	0800c7cc 	.word	0x0800c7cc
  ldr r2, =_sbss
 80018c0:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80018c4:	2000215c 	.word	0x2000215c

080018c8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018c8:	e7fe      	b.n	80018c8 <ADC3_IRQHandler>

080018ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d4:	2003      	movs	r0, #3
 80018d6:	f001 feda 	bl	800368e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018da:	200f      	movs	r0, #15
 80018dc:	f7ff fc1c 	bl	8001118 <HAL_InitTick>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	71fb      	strb	r3, [r7, #7]
 80018ea:	e001      	b.n	80018f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018ec:	f7ff fbea 	bl	80010c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018f0:	79fb      	ldrb	r3, [r7, #7]

}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_IncTick+0x1c>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_IncTick+0x20>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4413      	add	r3, r2
 800190a:	4a03      	ldr	r2, [pc, #12]	; (8001918 <HAL_IncTick+0x1c>)
 800190c:	6013      	str	r3, [r2, #0]
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	20002108 	.word	0x20002108
 800191c:	20000030 	.word	0x20000030

08001920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return uwTick;
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_GetTick+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20002108 	.word	0x20002108

08001938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001940:	f7ff ffee 	bl	8001920 <HAL_GetTick>
 8001944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001950:	d004      	beq.n	800195c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_Delay+0x40>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4413      	add	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800195c:	bf00      	nop
 800195e:	f7ff ffdf 	bl	8001920 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	429a      	cmp	r2, r3
 800196c:	d8f7      	bhi.n	800195e <HAL_Delay+0x26>
  {
  }
}
 800196e:	bf00      	nop
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000030 	.word	0x20000030

0800197c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	609a      	str	r2, [r3, #8]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	609a      	str	r2, [r3, #8]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b087      	sub	sp, #28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3360      	adds	r3, #96	; 0x60
 80019f6:	461a      	mov	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <LL_ADC_SetOffset+0x44>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	4313      	orrs	r3, r2
 8001a14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a1c:	bf00      	nop
 8001a1e:	371c      	adds	r7, #28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	03fff000 	.word	0x03fff000

08001a2c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3360      	adds	r3, #96	; 0x60
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	3360      	adds	r3, #96	; 0x60
 8001a68:	461a      	mov	r2, r3
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a82:	bf00      	nop
 8001a84:	371c      	adds	r7, #28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b087      	sub	sp, #28
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3360      	adds	r3, #96	; 0x60
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ab8:	bf00      	nop
 8001aba:	371c      	adds	r7, #28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3360      	adds	r3, #96	; 0x60
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001aee:	bf00      	nop
 8001af0:	371c      	adds	r7, #28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	615a      	str	r2, [r3, #20]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b087      	sub	sp, #28
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3330      	adds	r3, #48	; 0x30
 8001b56:	461a      	mov	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	0a1b      	lsrs	r3, r3, #8
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	4413      	add	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	211f      	movs	r1, #31
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	401a      	ands	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	0e9b      	lsrs	r3, r3, #26
 8001b7e:	f003 011f 	and.w	r1, r3, #31
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b92:	bf00      	nop
 8001b94:	371c      	adds	r7, #28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3314      	adds	r3, #20
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	0e5b      	lsrs	r3, r3, #25
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	4413      	add	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	0d1b      	lsrs	r3, r3, #20
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	2107      	movs	r1, #7
 8001bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	0d1b      	lsrs	r3, r3, #20
 8001bfe:	f003 031f 	and.w	r3, r3, #31
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	fa01 f303 	lsl.w	r3, r1, r3
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c0e:	bf00      	nop
 8001c10:	371c      	adds	r7, #28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c34:	43db      	mvns	r3, r3
 8001c36:	401a      	ands	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0318 	and.w	r3, r3, #24
 8001c3e:	4908      	ldr	r1, [pc, #32]	; (8001c60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c40:	40d9      	lsrs	r1, r3
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	400b      	ands	r3, r1
 8001c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c52:	bf00      	nop
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	0007ffff 	.word	0x0007ffff

08001c64 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 031f 	and.w	r3, r3, #31
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001cac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6093      	str	r3, [r2, #8]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cd4:	d101      	bne.n	8001cda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001cf8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cfc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d24:	d101      	bne.n	8001d2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d4c:	f043 0201 	orr.w	r2, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <LL_ADC_IsEnabled+0x18>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <LL_ADC_IsEnabled+0x1a>
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d9a:	f043 0204 	orr.w	r2, r3, #4
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d101      	bne.n	8001dc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d101      	bne.n	8001dec <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e1af      	b.n	8002176 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d109      	bne.n	8001e38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7fe fe87 	bl	8000b38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff3f 	bl	8001cc0 <LL_ADC_IsDeepPowerDownEnabled>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d004      	beq.n	8001e52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff25 	bl	8001c9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff5a 	bl	8001d10 <LL_ADC_IsInternalRegulatorEnabled>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d115      	bne.n	8001e8e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff ff3e 	bl	8001ce8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e6c:	4b9f      	ldr	r3, [pc, #636]	; (80020ec <HAL_ADC_Init+0x2f0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	099b      	lsrs	r3, r3, #6
 8001e72:	4a9f      	ldr	r2, [pc, #636]	; (80020f0 <HAL_ADC_Init+0x2f4>)
 8001e74:	fba2 2303 	umull	r2, r3, r2, r3
 8001e78:	099b      	lsrs	r3, r3, #6
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e80:	e002      	b.n	8001e88 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f9      	bne.n	8001e82 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff3c 	bl	8001d10 <LL_ADC_IsInternalRegulatorEnabled>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10d      	bne.n	8001eba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea2:	f043 0210 	orr.w	r2, r3, #16
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eae:	f043 0201 	orr.w	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff ff75 	bl	8001dae <LL_ADC_REG_IsConversionOngoing>
 8001ec4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eca:	f003 0310 	and.w	r3, r3, #16
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f040 8148 	bne.w	8002164 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f040 8144 	bne.w	8002164 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ee4:	f043 0202 	orr.w	r2, r3, #2
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff35 	bl	8001d60 <LL_ADC_IsEnabled>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d141      	bne.n	8001f80 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f04:	d004      	beq.n	8001f10 <HAL_ADC_Init+0x114>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a7a      	ldr	r2, [pc, #488]	; (80020f4 <HAL_ADC_Init+0x2f8>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d10f      	bne.n	8001f30 <HAL_ADC_Init+0x134>
 8001f10:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f14:	f7ff ff24 	bl	8001d60 <LL_ADC_IsEnabled>
 8001f18:	4604      	mov	r4, r0
 8001f1a:	4876      	ldr	r0, [pc, #472]	; (80020f4 <HAL_ADC_Init+0x2f8>)
 8001f1c:	f7ff ff20 	bl	8001d60 <LL_ADC_IsEnabled>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4323      	orrs	r3, r4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf0c      	ite	eq
 8001f28:	2301      	moveq	r3, #1
 8001f2a:	2300      	movne	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	e012      	b.n	8001f56 <HAL_ADC_Init+0x15a>
 8001f30:	4871      	ldr	r0, [pc, #452]	; (80020f8 <HAL_ADC_Init+0x2fc>)
 8001f32:	f7ff ff15 	bl	8001d60 <LL_ADC_IsEnabled>
 8001f36:	4604      	mov	r4, r0
 8001f38:	4870      	ldr	r0, [pc, #448]	; (80020fc <HAL_ADC_Init+0x300>)
 8001f3a:	f7ff ff11 	bl	8001d60 <LL_ADC_IsEnabled>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	431c      	orrs	r4, r3
 8001f42:	486f      	ldr	r0, [pc, #444]	; (8002100 <HAL_ADC_Init+0x304>)
 8001f44:	f7ff ff0c 	bl	8001d60 <LL_ADC_IsEnabled>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4323      	orrs	r3, r4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf0c      	ite	eq
 8001f50:	2301      	moveq	r3, #1
 8001f52:	2300      	movne	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d012      	beq.n	8001f80 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f62:	d004      	beq.n	8001f6e <HAL_ADC_Init+0x172>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a62      	ldr	r2, [pc, #392]	; (80020f4 <HAL_ADC_Init+0x2f8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_Init+0x176>
 8001f6e:	4a65      	ldr	r2, [pc, #404]	; (8002104 <HAL_ADC_Init+0x308>)
 8001f70:	e000      	b.n	8001f74 <HAL_ADC_Init+0x178>
 8001f72:	4a65      	ldr	r2, [pc, #404]	; (8002108 <HAL_ADC_Init+0x30c>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	f7ff fcfe 	bl	800197c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	7f5b      	ldrb	r3, [r3, #29]
 8001f84:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f8a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001f90:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001f96:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f9e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d106      	bne.n	8001fbc <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	045b      	lsls	r3, r3, #17
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d009      	beq.n	8001fd8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	4b4b      	ldr	r3, [pc, #300]	; (800210c <HAL_ADC_Init+0x310>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	69b9      	ldr	r1, [r7, #24]
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fed1 	bl	8001dae <LL_ADC_REG_IsConversionOngoing>
 800200c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fede 	bl	8001dd4 <LL_ADC_INJ_IsConversionOngoing>
 8002018:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d17f      	bne.n	8002120 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d17c      	bne.n	8002120 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800202a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002032:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002042:	f023 0302 	bic.w	r3, r3, #2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	69b9      	ldr	r1, [r7, #24]
 800204c:	430b      	orrs	r3, r1
 800204e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d017      	beq.n	8002088 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002066:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002070:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002074:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6911      	ldr	r1, [r2, #16]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	430b      	orrs	r3, r1
 8002082:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002086:	e013      	b.n	80020b0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691a      	ldr	r2, [r3, #16]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002096:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020ac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d12a      	bne.n	8002110 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80020c4:	f023 0304 	bic.w	r3, r3, #4
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020d0:	4311      	orrs	r1, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80020d6:	4311      	orrs	r1, r2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020dc:	430a      	orrs	r2, r1
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 0201 	orr.w	r2, r2, #1
 80020e8:	611a      	str	r2, [r3, #16]
 80020ea:	e019      	b.n	8002120 <HAL_ADC_Init+0x324>
 80020ec:	20000010 	.word	0x20000010
 80020f0:	053e2d63 	.word	0x053e2d63
 80020f4:	50000100 	.word	0x50000100
 80020f8:	50000400 	.word	0x50000400
 80020fc:	50000500 	.word	0x50000500
 8002100:	50000600 	.word	0x50000600
 8002104:	50000300 	.word	0x50000300
 8002108:	50000700 	.word	0x50000700
 800210c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0201 	bic.w	r2, r2, #1
 800211e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d10c      	bne.n	8002142 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f023 010f 	bic.w	r1, r3, #15
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	1e5a      	subs	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	631a      	str	r2, [r3, #48]	; 0x30
 8002140:	e007      	b.n	8002152 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 020f 	bic.w	r2, r2, #15
 8002150:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002156:	f023 0303 	bic.w	r3, r3, #3
 800215a:	f043 0201 	orr.w	r2, r3, #1
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	65da      	str	r2, [r3, #92]	; 0x5c
 8002162:	e007      	b.n	8002174 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002168:	f043 0210 	orr.w	r2, r3, #16
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002174:	7ffb      	ldrb	r3, [r7, #31]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd90      	pop	{r4, r7, pc}
 800217e:	bf00      	nop

08002180 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002190:	d004      	beq.n	800219c <HAL_ADC_Start_IT+0x1c>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a93      	ldr	r2, [pc, #588]	; (80023e4 <HAL_ADC_Start_IT+0x264>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d101      	bne.n	80021a0 <HAL_ADC_Start_IT+0x20>
 800219c:	4b92      	ldr	r3, [pc, #584]	; (80023e8 <HAL_ADC_Start_IT+0x268>)
 800219e:	e000      	b.n	80021a2 <HAL_ADC_Start_IT+0x22>
 80021a0:	4b92      	ldr	r3, [pc, #584]	; (80023ec <HAL_ADC_Start_IT+0x26c>)
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fd5e 	bl	8001c64 <LL_ADC_GetMultimode>
 80021a8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fdfd 	bl	8001dae <LL_ADC_REG_IsConversionOngoing>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 8134 	bne.w	8002424 <HAL_ADC_Start_IT+0x2a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_ADC_Start_IT+0x4a>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e131      	b.n	800242e <HAL_ADC_Start_IT+0x2ae>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 ffec 	bl	80031b0 <ADC_Enable>
 80021d8:	4603      	mov	r3, r0
 80021da:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021dc:	7dfb      	ldrb	r3, [r7, #23]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f040 811b 	bne.w	800241a <HAL_ADC_Start_IT+0x29a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021ec:	f023 0301 	bic.w	r3, r3, #1
 80021f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a79      	ldr	r2, [pc, #484]	; (80023e4 <HAL_ADC_Start_IT+0x264>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d009      	beq.n	8002216 <HAL_ADC_Start_IT+0x96>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a7a      	ldr	r2, [pc, #488]	; (80023f0 <HAL_ADC_Start_IT+0x270>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d002      	beq.n	8002212 <HAL_ADC_Start_IT+0x92>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	e003      	b.n	800221a <HAL_ADC_Start_IT+0x9a>
 8002212:	4b78      	ldr	r3, [pc, #480]	; (80023f4 <HAL_ADC_Start_IT+0x274>)
 8002214:	e001      	b.n	800221a <HAL_ADC_Start_IT+0x9a>
 8002216:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	4293      	cmp	r3, r2
 8002220:	d002      	beq.n	8002228 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d105      	bne.n	8002234 <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d006      	beq.n	800224e <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002244:	f023 0206 	bic.w	r2, r3, #6
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	661a      	str	r2, [r3, #96]	; 0x60
 800224c:	e002      	b.n	8002254 <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	221c      	movs	r2, #28
 800225a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 021c 	bic.w	r2, r2, #28
 8002272:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	2b08      	cmp	r3, #8
 800227a:	d108      	bne.n	800228e <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0208 	orr.w	r2, r2, #8
 800228a:	605a      	str	r2, [r3, #4]
          break;
 800228c:	e008      	b.n	80022a0 <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0204 	orr.w	r2, r2, #4
 800229c:	605a      	str	r2, [r3, #4]
          break;
 800229e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d107      	bne.n	80022b8 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0210 	orr.w	r2, r2, #16
 80022b6:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a49      	ldr	r2, [pc, #292]	; (80023e4 <HAL_ADC_Start_IT+0x264>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d009      	beq.n	80022d6 <HAL_ADC_Start_IT+0x156>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a4a      	ldr	r2, [pc, #296]	; (80023f0 <HAL_ADC_Start_IT+0x270>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d002      	beq.n	80022d2 <HAL_ADC_Start_IT+0x152>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	e003      	b.n	80022da <HAL_ADC_Start_IT+0x15a>
 80022d2:	4b48      	ldr	r3, [pc, #288]	; (80023f4 <HAL_ADC_Start_IT+0x274>)
 80022d4:	e001      	b.n	80022da <HAL_ADC_Start_IT+0x15a>
 80022d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	4293      	cmp	r3, r2
 80022e0:	d008      	beq.n	80022f4 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	d002      	beq.n	80022f4 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b09      	cmp	r3, #9
 80022f2:	d13b      	bne.n	800236c <HAL_ADC_Start_IT+0x1ec>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d02d      	beq.n	800235e <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002306:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800230a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b08      	cmp	r3, #8
 8002318:	d110      	bne.n	800233c <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0220 	bic.w	r2, r2, #32
 8002328:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002338:	605a      	str	r2, [r3, #4]
              break;
 800233a:	e011      	b.n	8002360 <HAL_ADC_Start_IT+0x1e0>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800234a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0220 	orr.w	r2, r2, #32
 800235a:	605a      	str	r2, [r3, #4]
              break;
 800235c:	e000      	b.n	8002360 <HAL_ADC_Start_IT+0x1e0>
          }
        }
 800235e:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fd0e 	bl	8001d86 <LL_ADC_REG_StartConversion>
 800236a:	e05f      	b.n	800242c <HAL_ADC_Start_IT+0x2ac>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a19      	ldr	r2, [pc, #100]	; (80023e4 <HAL_ADC_Start_IT+0x264>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d009      	beq.n	8002396 <HAL_ADC_Start_IT+0x216>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a1a      	ldr	r2, [pc, #104]	; (80023f0 <HAL_ADC_Start_IT+0x270>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d002      	beq.n	8002392 <HAL_ADC_Start_IT+0x212>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	e003      	b.n	800239a <HAL_ADC_Start_IT+0x21a>
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_ADC_Start_IT+0x274>)
 8002394:	e001      	b.n	800239a <HAL_ADC_Start_IT+0x21a>
 8002396:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800239a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d040      	beq.n	800242a <HAL_ADC_Start_IT+0x2aa>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d11b      	bne.n	80023f8 <HAL_ADC_Start_IT+0x278>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0220 	bic.w	r2, r2, #32
 80023ce:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023de:	605a      	str	r2, [r3, #4]
              break;
 80023e0:	e024      	b.n	800242c <HAL_ADC_Start_IT+0x2ac>
 80023e2:	bf00      	nop
 80023e4:	50000100 	.word	0x50000100
 80023e8:	50000300 	.word	0x50000300
 80023ec:	50000700 	.word	0x50000700
 80023f0:	50000500 	.word	0x50000500
 80023f4:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002406:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0220 	orr.w	r2, r2, #32
 8002416:	605a      	str	r2, [r3, #4]
              break;
 8002418:	e008      	b.n	800242c <HAL_ADC_Start_IT+0x2ac>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002422:	e003      	b.n	800242c <HAL_ADC_Start_IT+0x2ac>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002424:	2302      	movs	r3, #2
 8002426:	75fb      	strb	r3, [r7, #23]
 8002428:	e000      	b.n	800242c <HAL_ADC_Start_IT+0x2ac>
        }
 800242a:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 800242c:	7dfb      	ldrb	r3, [r7, #23]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop

08002438 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	; 0x28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800245c:	2300      	movs	r3, #0
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002478:	d004      	beq.n	8002484 <HAL_ADC_IRQHandler+0x30>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a95      	ldr	r2, [pc, #596]	; (80026d4 <HAL_ADC_IRQHandler+0x280>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d101      	bne.n	8002488 <HAL_ADC_IRQHandler+0x34>
 8002484:	4b94      	ldr	r3, [pc, #592]	; (80026d8 <HAL_ADC_IRQHandler+0x284>)
 8002486:	e000      	b.n	800248a <HAL_ADC_IRQHandler+0x36>
 8002488:	4b94      	ldr	r3, [pc, #592]	; (80026dc <HAL_ADC_IRQHandler+0x288>)
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fbea 	bl	8001c64 <LL_ADC_GetMultimode>
 8002490:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d017      	beq.n	80024cc <HAL_ADC_IRQHandler+0x78>
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d012      	beq.n	80024cc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d105      	bne.n	80024be <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 ff26 	bl	8003310 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2202      	movs	r2, #2
 80024ca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d004      	beq.n	80024e0 <HAL_ADC_IRQHandler+0x8c>
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10b      	bne.n	80024f8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 8094 	beq.w	8002614 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 808e 	beq.w	8002614 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	2b00      	cmp	r3, #0
 8002502:	d105      	bne.n	8002510 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002508:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fb03 	bl	8001b20 <LL_ADC_REG_IsTriggerSourceSWStart>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d072      	beq.n	8002606 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a6b      	ldr	r2, [pc, #428]	; (80026d4 <HAL_ADC_IRQHandler+0x280>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d009      	beq.n	800253e <HAL_ADC_IRQHandler+0xea>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a6c      	ldr	r2, [pc, #432]	; (80026e0 <HAL_ADC_IRQHandler+0x28c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d002      	beq.n	800253a <HAL_ADC_IRQHandler+0xe6>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	e003      	b.n	8002542 <HAL_ADC_IRQHandler+0xee>
 800253a:	4b6a      	ldr	r3, [pc, #424]	; (80026e4 <HAL_ADC_IRQHandler+0x290>)
 800253c:	e001      	b.n	8002542 <HAL_ADC_IRQHandler+0xee>
 800253e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	4293      	cmp	r3, r2
 8002548:	d008      	beq.n	800255c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2b05      	cmp	r3, #5
 8002554:	d002      	beq.n	800255c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2b09      	cmp	r3, #9
 800255a:	d104      	bne.n	8002566 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	623b      	str	r3, [r7, #32]
 8002564:	e014      	b.n	8002590 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a5a      	ldr	r2, [pc, #360]	; (80026d4 <HAL_ADC_IRQHandler+0x280>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d009      	beq.n	8002584 <HAL_ADC_IRQHandler+0x130>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a5a      	ldr	r2, [pc, #360]	; (80026e0 <HAL_ADC_IRQHandler+0x28c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d002      	beq.n	8002580 <HAL_ADC_IRQHandler+0x12c>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	e003      	b.n	8002588 <HAL_ADC_IRQHandler+0x134>
 8002580:	4b58      	ldr	r3, [pc, #352]	; (80026e4 <HAL_ADC_IRQHandler+0x290>)
 8002582:	e001      	b.n	8002588 <HAL_ADC_IRQHandler+0x134>
 8002584:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002588:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d135      	bne.n	8002606 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d12e      	bne.n	8002606 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fbfe 	bl	8001dae <LL_ADC_REG_IsConversionOngoing>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d11a      	bne.n	80025ee <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 020c 	bic.w	r2, r2, #12
 80025c6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d112      	bne.n	8002606 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	f043 0201 	orr.w	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80025ec:	e00b      	b.n	8002606 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f2:	f043 0210 	orr.w	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fe:	f043 0201 	orr.w	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe fd22 	bl	8001050 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	220c      	movs	r2, #12
 8002612:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b00      	cmp	r3, #0
 800261c:	d004      	beq.n	8002628 <HAL_ADC_IRQHandler+0x1d4>
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	f003 0320 	and.w	r3, r3, #32
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10b      	bne.n	8002640 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 80b2 	beq.w	8002798 <HAL_ADC_IRQHandler+0x344>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 80ac 	beq.w	8002798 <HAL_ADC_IRQHandler+0x344>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	2b00      	cmp	r3, #0
 800264a:	d105      	bne.n	8002658 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fa9e 	bl	8001b9e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002662:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fa59 	bl	8001b20 <LL_ADC_REG_IsTriggerSourceSWStart>
 800266e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a17      	ldr	r2, [pc, #92]	; (80026d4 <HAL_ADC_IRQHandler+0x280>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d009      	beq.n	800268e <HAL_ADC_IRQHandler+0x23a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a18      	ldr	r2, [pc, #96]	; (80026e0 <HAL_ADC_IRQHandler+0x28c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d002      	beq.n	800268a <HAL_ADC_IRQHandler+0x236>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	e003      	b.n	8002692 <HAL_ADC_IRQHandler+0x23e>
 800268a:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <HAL_ADC_IRQHandler+0x290>)
 800268c:	e001      	b.n	8002692 <HAL_ADC_IRQHandler+0x23e>
 800268e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	4293      	cmp	r3, r2
 8002698:	d008      	beq.n	80026ac <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b06      	cmp	r3, #6
 80026a4:	d002      	beq.n	80026ac <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b07      	cmp	r3, #7
 80026aa:	d104      	bne.n	80026b6 <HAL_ADC_IRQHandler+0x262>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	623b      	str	r3, [r7, #32]
 80026b4:	e01e      	b.n	80026f4 <HAL_ADC_IRQHandler+0x2a0>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a06      	ldr	r2, [pc, #24]	; (80026d4 <HAL_ADC_IRQHandler+0x280>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d013      	beq.n	80026e8 <HAL_ADC_IRQHandler+0x294>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a06      	ldr	r2, [pc, #24]	; (80026e0 <HAL_ADC_IRQHandler+0x28c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d002      	beq.n	80026d0 <HAL_ADC_IRQHandler+0x27c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	e00d      	b.n	80026ec <HAL_ADC_IRQHandler+0x298>
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <HAL_ADC_IRQHandler+0x290>)
 80026d2:	e00b      	b.n	80026ec <HAL_ADC_IRQHandler+0x298>
 80026d4:	50000100 	.word	0x50000100
 80026d8:	50000300 	.word	0x50000300
 80026dc:	50000700 	.word	0x50000700
 80026e0:	50000500 	.word	0x50000500
 80026e4:	50000400 	.word	0x50000400
 80026e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026ec:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d047      	beq.n	800278a <HAL_ADC_IRQHandler+0x336>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d007      	beq.n	8002714 <HAL_ADC_IRQHandler+0x2c0>
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d03f      	beq.n	800278a <HAL_ADC_IRQHandler+0x336>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002710:	2b00      	cmp	r3, #0
 8002712:	d13a      	bne.n	800278a <HAL_ADC_IRQHandler+0x336>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271e:	2b40      	cmp	r3, #64	; 0x40
 8002720:	d133      	bne.n	800278a <HAL_ADC_IRQHandler+0x336>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d12e      	bne.n	800278a <HAL_ADC_IRQHandler+0x336>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fb4f 	bl	8001dd4 <LL_ADC_INJ_IsConversionOngoing>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d11a      	bne.n	8002772 <HAL_ADC_IRQHandler+0x31e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800274a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d112      	bne.n	800278a <HAL_ADC_IRQHandler+0x336>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	f043 0201 	orr.w	r2, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002770:	e00b      	b.n	800278a <HAL_ADC_IRQHandler+0x336>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	f043 0210 	orr.w	r2, r3, #16
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002782:	f043 0201 	orr.w	r2, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fd98 	bl	80032c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2260      	movs	r2, #96	; 0x60
 8002796:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d011      	beq.n	80027c6 <HAL_ADC_IRQHandler+0x372>
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00c      	beq.n	80027c6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f8a5 	bl	8002908 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2280      	movs	r2, #128	; 0x80
 80027c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d012      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x3a2>
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00d      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x3a2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 fd7e 	bl	80032e8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d012      	beq.n	8002826 <HAL_ADC_IRQHandler+0x3d2>
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00d      	beq.n	8002826 <HAL_ADC_IRQHandler+0x3d2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fd70 	bl	80032fc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002824:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b00      	cmp	r3, #0
 800282e:	d043      	beq.n	80028b8 <HAL_ADC_IRQHandler+0x464>
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	d03e      	beq.n	80028b8 <HAL_ADC_IRQHandler+0x464>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283e:	2b00      	cmp	r3, #0
 8002840:	d102      	bne.n	8002848 <HAL_ADC_IRQHandler+0x3f4>
    {
      overrun_error = 1UL;
 8002842:	2301      	movs	r3, #1
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
 8002846:	e021      	b.n	800288c <HAL_ADC_IRQHandler+0x438>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d015      	beq.n	800287a <HAL_ADC_IRQHandler+0x426>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002856:	d004      	beq.n	8002862 <HAL_ADC_IRQHandler+0x40e>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a27      	ldr	r2, [pc, #156]	; (80028fc <HAL_ADC_IRQHandler+0x4a8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d101      	bne.n	8002866 <HAL_ADC_IRQHandler+0x412>
 8002862:	4b27      	ldr	r3, [pc, #156]	; (8002900 <HAL_ADC_IRQHandler+0x4ac>)
 8002864:	e000      	b.n	8002868 <HAL_ADC_IRQHandler+0x414>
 8002866:	4b27      	ldr	r3, [pc, #156]	; (8002904 <HAL_ADC_IRQHandler+0x4b0>)
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fa09 	bl	8001c80 <LL_ADC_GetMultiDMATransfer>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00b      	beq.n	800288c <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 8002874:	2301      	movs	r3, #1
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
 8002878:	e008      	b.n	800288c <HAL_ADC_IRQHandler+0x438>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 8002888:	2301      	movs	r3, #1
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	2b01      	cmp	r3, #1
 8002890:	d10e      	bne.n	80028b0 <HAL_ADC_IRQHandler+0x45c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002896:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a2:	f043 0202 	orr.w	r2, r3, #2
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f836 	bl	800291c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2210      	movs	r2, #16
 80028b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d018      	beq.n	80028f4 <HAL_ADC_IRQHandler+0x4a0>
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d013      	beq.n	80028f4 <HAL_ADC_IRQHandler+0x4a0>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028dc:	f043 0208 	orr.w	r2, r3, #8
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ec:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fcf0 	bl	80032d4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80028f4:	bf00      	nop
 80028f6:	3728      	adds	r7, #40	; 0x28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	50000100 	.word	0x50000100
 8002900:	50000300 	.word	0x50000300
 8002904:	50000700 	.word	0x50000700

08002908 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b0b6      	sub	sp, #216	; 0xd8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800294a:	2b01      	cmp	r3, #1
 800294c:	d102      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x24>
 800294e:	2302      	movs	r3, #2
 8002950:	f000 bc13 	b.w	800317a <HAL_ADC_ConfigChannel+0x84a>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fa24 	bl	8001dae <LL_ADC_REG_IsConversionOngoing>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	f040 83f3 	bne.w	8003154 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	6859      	ldr	r1, [r3, #4]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	f7ff f8e3 	bl	8001b46 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fa12 	bl	8001dae <LL_ADC_REG_IsConversionOngoing>
 800298a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fa1e 	bl	8001dd4 <LL_ADC_INJ_IsConversionOngoing>
 8002998:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800299c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f040 81d9 	bne.w	8002d58 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 81d4 	bne.w	8002d58 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029b8:	d10f      	bne.n	80029da <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2200      	movs	r2, #0
 80029c4:	4619      	mov	r1, r3
 80029c6:	f7ff f8fd 	bl	8001bc4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff f891 	bl	8001afa <LL_ADC_SetSamplingTimeCommonConfig>
 80029d8:	e00e      	b.n	80029f8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	6819      	ldr	r1, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	461a      	mov	r2, r3
 80029e8:	f7ff f8ec 	bl	8001bc4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff f881 	bl	8001afa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	08db      	lsrs	r3, r3, #3
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d022      	beq.n	8002a60 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6919      	ldr	r1, [r3, #16]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a2a:	f7fe ffdb 	bl	80019e4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6919      	ldr	r1, [r3, #16]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f7ff f827 	bl	8001a8e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	6919      	ldr	r1, [r3, #16]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	7f1b      	ldrb	r3, [r3, #28]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d102      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x126>
 8002a50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a54:	e000      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x128>
 8002a56:	2300      	movs	r3, #0
 8002a58:	461a      	mov	r2, r3
 8002a5a:	f7ff f833 	bl	8001ac4 <LL_ADC_SetOffsetSaturation>
 8002a5e:	e17b      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2100      	movs	r1, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe ffe0 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10a      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x15c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fe ffd5 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 8002a82:	4603      	mov	r3, r0
 8002a84:	0e9b      	lsrs	r3, r3, #26
 8002a86:	f003 021f 	and.w	r2, r3, #31
 8002a8a:	e01e      	b.n	8002aca <HAL_ADC_ConfigChannel+0x19a>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2100      	movs	r1, #0
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe ffca 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002aaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002aae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ab2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002aba:	2320      	movs	r3, #32
 8002abc:	e004      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002abe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d105      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x1b2>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	0e9b      	lsrs	r3, r3, #26
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	e018      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x1e4>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002af6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002afa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002afe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002b06:	2320      	movs	r3, #32
 8002b08:	e004      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002b0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d106      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe ff99 	bl	8001a58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe ff7d 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 8002b32:	4603      	mov	r3, r0
 8002b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x222>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2101      	movs	r1, #1
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe ff72 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	0e9b      	lsrs	r3, r3, #26
 8002b4c:	f003 021f 	and.w	r2, r3, #31
 8002b50:	e01e      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x260>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2101      	movs	r1, #1
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fe ff67 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002b70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002b78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002b80:	2320      	movs	r3, #32
 8002b82:	e004      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002b84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b88:	fab3 f383 	clz	r3, r3
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d105      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x278>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0e9b      	lsrs	r3, r3, #26
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	e018      	b.n	8002bda <HAL_ADC_ConfigChannel+0x2aa>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bb4:	fa93 f3a3 	rbit	r3, r3
 8002bb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002bbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002bc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002bcc:	2320      	movs	r3, #32
 8002bce:	e004      	b.n	8002bda <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002bd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bd4:	fab3 f383 	clz	r3, r3
 8002bd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d106      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2200      	movs	r2, #0
 8002be4:	2101      	movs	r1, #1
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe ff36 	bl	8001a58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe ff1a 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10a      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x2e8>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2102      	movs	r1, #2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fe ff0f 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	0e9b      	lsrs	r3, r3, #26
 8002c12:	f003 021f 	and.w	r2, r3, #31
 8002c16:	e01e      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x326>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe ff04 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002c36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002c3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002c46:	2320      	movs	r3, #32
 8002c48:	e004      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002c4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c4e:	fab3 f383 	clz	r3, r3
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d105      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x33e>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	0e9b      	lsrs	r3, r3, #26
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	e016      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x36c>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002c80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002c86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002c8e:	2320      	movs	r3, #32
 8002c90:	e004      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002c92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d106      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe fed5 	bl	8001a58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2103      	movs	r1, #3
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe feb9 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10a      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x3aa>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2103      	movs	r1, #3
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe feae 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	0e9b      	lsrs	r3, r3, #26
 8002cd4:	f003 021f 	and.w	r2, r3, #31
 8002cd8:	e017      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x3da>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2103      	movs	r1, #3
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe fea3 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cf4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002cfc:	2320      	movs	r3, #32
 8002cfe:	e003      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002d00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d105      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x3f2>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	0e9b      	lsrs	r3, r3, #26
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	e011      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x416>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d32:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002d3a:	2320      	movs	r3, #32
 8002d3c:	e003      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d106      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2103      	movs	r1, #3
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fe fe80 	bl	8001a58 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe ffff 	bl	8001d60 <LL_ADC_IsEnabled>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f040 813d 	bne.w	8002fe4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6819      	ldr	r1, [r3, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f7fe ff50 	bl	8001c1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4aa2      	ldr	r2, [pc, #648]	; (800300c <HAL_ADC_ConfigChannel+0x6dc>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	f040 812e 	bne.w	8002fe4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10b      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x480>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	0e9b      	lsrs	r3, r3, #26
 8002d9e:	3301      	adds	r3, #1
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	2b09      	cmp	r3, #9
 8002da6:	bf94      	ite	ls
 8002da8:	2301      	movls	r3, #1
 8002daa:	2300      	movhi	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	e019      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x4b4>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dc0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002dc8:	2320      	movs	r3, #32
 8002dca:	e003      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002dcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	2b09      	cmp	r3, #9
 8002ddc:	bf94      	ite	ls
 8002dde:	2301      	movls	r3, #1
 8002de0:	2300      	movhi	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d079      	beq.n	8002edc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d107      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x4d4>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	0e9b      	lsrs	r3, r3, #26
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	069b      	lsls	r3, r3, #26
 8002dfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e02:	e015      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x500>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e14:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002e1c:	2320      	movs	r3, #32
 8002e1e:	e003      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	069b      	lsls	r3, r3, #26
 8002e2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x520>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	0e9b      	lsrs	r3, r3, #26
 8002e42:	3301      	adds	r3, #1
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	2101      	movs	r1, #1
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	e017      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x550>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e60:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002e68:	2320      	movs	r3, #32
 8002e6a:	e003      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	f003 031f 	and.w	r3, r3, #31
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e80:	ea42 0103 	orr.w	r1, r2, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x576>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	0e9b      	lsrs	r3, r3, #26
 8002e96:	3301      	adds	r3, #1
 8002e98:	f003 021f 	and.w	r2, r3, #31
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	051b      	lsls	r3, r3, #20
 8002ea4:	e018      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x5a8>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002ebe:	2320      	movs	r3, #32
 8002ec0:	e003      	b.n	8002eca <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f003 021f 	and.w	r2, r3, #31
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	e07e      	b.n	8002fda <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d107      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x5c8>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	0e9b      	lsrs	r3, r3, #26
 8002eee:	3301      	adds	r3, #1
 8002ef0:	069b      	lsls	r3, r3, #26
 8002ef2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ef6:	e015      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x5f4>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	fa93 f3a3 	rbit	r3, r3
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f08:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002f10:	2320      	movs	r3, #32
 8002f12:	e003      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	069b      	lsls	r3, r3, #26
 8002f20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d109      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x614>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	0e9b      	lsrs	r3, r3, #26
 8002f36:	3301      	adds	r3, #1
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f42:	e017      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x644>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	fa93 f3a3 	rbit	r3, r3
 8002f50:	61fb      	str	r3, [r7, #28]
  return result;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002f5c:	2320      	movs	r3, #32
 8002f5e:	e003      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	2101      	movs	r1, #1
 8002f70:	fa01 f303 	lsl.w	r3, r1, r3
 8002f74:	ea42 0103 	orr.w	r1, r2, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10d      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x670>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	0e9b      	lsrs	r3, r3, #26
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f003 021f 	and.w	r2, r3, #31
 8002f90:	4613      	mov	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	4413      	add	r3, r2
 8002f96:	3b1e      	subs	r3, #30
 8002f98:	051b      	lsls	r3, r3, #20
 8002f9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	e01b      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x6a8>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	fa93 f3a3 	rbit	r3, r3
 8002fac:	613b      	str	r3, [r7, #16]
  return result;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002fb8:	2320      	movs	r3, #32
 8002fba:	e003      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	f003 021f 	and.w	r2, r3, #31
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	3b1e      	subs	r3, #30
 8002fd2:	051b      	lsls	r3, r3, #20
 8002fd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	6892      	ldr	r2, [r2, #8]
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f7fe fdf0 	bl	8001bc4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4b09      	ldr	r3, [pc, #36]	; (8003010 <HAL_ADC_ConfigChannel+0x6e0>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80be 	beq.w	800316e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ffa:	d004      	beq.n	8003006 <HAL_ADC_ConfigChannel+0x6d6>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a04      	ldr	r2, [pc, #16]	; (8003014 <HAL_ADC_ConfigChannel+0x6e4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d10a      	bne.n	800301c <HAL_ADC_ConfigChannel+0x6ec>
 8003006:	4b04      	ldr	r3, [pc, #16]	; (8003018 <HAL_ADC_ConfigChannel+0x6e8>)
 8003008:	e009      	b.n	800301e <HAL_ADC_ConfigChannel+0x6ee>
 800300a:	bf00      	nop
 800300c:	407f0000 	.word	0x407f0000
 8003010:	80080000 	.word	0x80080000
 8003014:	50000100 	.word	0x50000100
 8003018:	50000300 	.word	0x50000300
 800301c:	4b59      	ldr	r3, [pc, #356]	; (8003184 <HAL_ADC_ConfigChannel+0x854>)
 800301e:	4618      	mov	r0, r3
 8003020:	f7fe fcd2 	bl	80019c8 <LL_ADC_GetCommonPathInternalCh>
 8003024:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a56      	ldr	r2, [pc, #344]	; (8003188 <HAL_ADC_ConfigChannel+0x858>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d004      	beq.n	800303c <HAL_ADC_ConfigChannel+0x70c>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a55      	ldr	r2, [pc, #340]	; (800318c <HAL_ADC_ConfigChannel+0x85c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d13a      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800303c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d134      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003050:	d005      	beq.n	800305e <HAL_ADC_ConfigChannel+0x72e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a4e      	ldr	r2, [pc, #312]	; (8003190 <HAL_ADC_ConfigChannel+0x860>)
 8003058:	4293      	cmp	r3, r2
 800305a:	f040 8085 	bne.w	8003168 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003066:	d004      	beq.n	8003072 <HAL_ADC_ConfigChannel+0x742>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a49      	ldr	r2, [pc, #292]	; (8003194 <HAL_ADC_ConfigChannel+0x864>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d101      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x746>
 8003072:	4a49      	ldr	r2, [pc, #292]	; (8003198 <HAL_ADC_ConfigChannel+0x868>)
 8003074:	e000      	b.n	8003078 <HAL_ADC_ConfigChannel+0x748>
 8003076:	4a43      	ldr	r2, [pc, #268]	; (8003184 <HAL_ADC_ConfigChannel+0x854>)
 8003078:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800307c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003080:	4619      	mov	r1, r3
 8003082:	4610      	mov	r0, r2
 8003084:	f7fe fc8d 	bl	80019a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003088:	4b44      	ldr	r3, [pc, #272]	; (800319c <HAL_ADC_ConfigChannel+0x86c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	099b      	lsrs	r3, r3, #6
 800308e:	4a44      	ldr	r2, [pc, #272]	; (80031a0 <HAL_ADC_ConfigChannel+0x870>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	099b      	lsrs	r3, r3, #6
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030a2:	e002      	b.n	80030aa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1f9      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030b0:	e05a      	b.n	8003168 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a3b      	ldr	r2, [pc, #236]	; (80031a4 <HAL_ADC_ConfigChannel+0x874>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d125      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x7d8>
 80030bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d11f      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a31      	ldr	r2, [pc, #196]	; (8003194 <HAL_ADC_ConfigChannel+0x864>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d104      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x7ac>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a34      	ldr	r2, [pc, #208]	; (80031a8 <HAL_ADC_ConfigChannel+0x878>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d047      	beq.n	800316c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030e4:	d004      	beq.n	80030f0 <HAL_ADC_ConfigChannel+0x7c0>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <HAL_ADC_ConfigChannel+0x864>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d101      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x7c4>
 80030f0:	4a29      	ldr	r2, [pc, #164]	; (8003198 <HAL_ADC_ConfigChannel+0x868>)
 80030f2:	e000      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x7c6>
 80030f4:	4a23      	ldr	r2, [pc, #140]	; (8003184 <HAL_ADC_ConfigChannel+0x854>)
 80030f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030fe:	4619      	mov	r1, r3
 8003100:	4610      	mov	r0, r2
 8003102:	f7fe fc4e 	bl	80019a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003106:	e031      	b.n	800316c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a27      	ldr	r2, [pc, #156]	; (80031ac <HAL_ADC_ConfigChannel+0x87c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d12d      	bne.n	800316e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003112:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d127      	bne.n	800316e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a1c      	ldr	r2, [pc, #112]	; (8003194 <HAL_ADC_ConfigChannel+0x864>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d022      	beq.n	800316e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003130:	d004      	beq.n	800313c <HAL_ADC_ConfigChannel+0x80c>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a17      	ldr	r2, [pc, #92]	; (8003194 <HAL_ADC_ConfigChannel+0x864>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d101      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x810>
 800313c:	4a16      	ldr	r2, [pc, #88]	; (8003198 <HAL_ADC_ConfigChannel+0x868>)
 800313e:	e000      	b.n	8003142 <HAL_ADC_ConfigChannel+0x812>
 8003140:	4a10      	ldr	r2, [pc, #64]	; (8003184 <HAL_ADC_ConfigChannel+0x854>)
 8003142:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003146:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800314a:	4619      	mov	r1, r3
 800314c:	4610      	mov	r0, r2
 800314e:	f7fe fc28 	bl	80019a2 <LL_ADC_SetCommonPathInternalCh>
 8003152:	e00c      	b.n	800316e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003158:	f043 0220 	orr.w	r2, r3, #32
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003166:	e002      	b.n	800316e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003168:	bf00      	nop
 800316a:	e000      	b.n	800316e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800316c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003176:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800317a:	4618      	mov	r0, r3
 800317c:	37d8      	adds	r7, #216	; 0xd8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	50000700 	.word	0x50000700
 8003188:	c3210000 	.word	0xc3210000
 800318c:	90c00010 	.word	0x90c00010
 8003190:	50000600 	.word	0x50000600
 8003194:	50000100 	.word	0x50000100
 8003198:	50000300 	.word	0x50000300
 800319c:	20000010 	.word	0x20000010
 80031a0:	053e2d63 	.word	0x053e2d63
 80031a4:	c7520000 	.word	0xc7520000
 80031a8:	50000500 	.word	0x50000500
 80031ac:	cb840000 	.word	0xcb840000

080031b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fe fdcf 	bl	8001d60 <LL_ADC_IsEnabled>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d14d      	bne.n	8003264 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	4b28      	ldr	r3, [pc, #160]	; (8003270 <ADC_Enable+0xc0>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00d      	beq.n	80031f2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	f043 0210 	orr.w	r2, r3, #16
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e6:	f043 0201 	orr.w	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e039      	b.n	8003266 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe fd9e 	bl	8001d38 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031fc:	f7fe fb90 	bl	8001920 <HAL_GetTick>
 8003200:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003202:	e028      	b.n	8003256 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7fe fda9 	bl	8001d60 <LL_ADC_IsEnabled>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d104      	bne.n	800321e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7fe fd8d 	bl	8001d38 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800321e:	f7fe fb7f 	bl	8001920 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d914      	bls.n	8003256 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b01      	cmp	r3, #1
 8003238:	d00d      	beq.n	8003256 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323e:	f043 0210 	orr.w	r2, r3, #16
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e007      	b.n	8003266 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d1cf      	bne.n	8003204 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	8000003f 	.word	0x8000003f

08003274 <LL_ADC_IsEnabled>:
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <LL_ADC_IsEnabled+0x18>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <LL_ADC_IsEnabled+0x1a>
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <LL_ADC_REG_IsConversionOngoing>:
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d101      	bne.n	80032b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003324:	b590      	push	{r4, r7, lr}
 8003326:	b0a1      	sub	sp, #132	; 0x84
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800333e:	2302      	movs	r3, #2
 8003340:	e0e7      	b.n	8003512 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800334a:	2300      	movs	r3, #0
 800334c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800334e:	2300      	movs	r3, #0
 8003350:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800335a:	d102      	bne.n	8003362 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800335c:	4b6f      	ldr	r3, [pc, #444]	; (800351c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800335e:	60bb      	str	r3, [r7, #8]
 8003360:	e009      	b.n	8003376 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a6e      	ldr	r2, [pc, #440]	; (8003520 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d102      	bne.n	8003372 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800336c:	4b6d      	ldr	r3, [pc, #436]	; (8003524 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	e001      	b.n	8003376 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	f043 0220 	orr.w	r2, r3, #32
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0be      	b.n	8003512 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff ff7f 	bl	800329a <LL_ADC_REG_IsConversionOngoing>
 800339c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff ff79 	bl	800329a <LL_ADC_REG_IsConversionOngoing>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f040 80a0 	bne.w	80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80033b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f040 809c 	bne.w	80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033c0:	d004      	beq.n	80033cc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a55      	ldr	r2, [pc, #340]	; (800351c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d101      	bne.n	80033d0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80033cc:	4b56      	ldr	r3, [pc, #344]	; (8003528 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80033ce:	e000      	b.n	80033d2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80033d0:	4b56      	ldr	r3, [pc, #344]	; (800352c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80033d2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d04b      	beq.n	8003474 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80033dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033ee:	035b      	lsls	r3, r3, #13
 80033f0:	430b      	orrs	r3, r1
 80033f2:	431a      	orrs	r2, r3
 80033f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033f6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003400:	d004      	beq.n	800340c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a45      	ldr	r2, [pc, #276]	; (800351c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d10f      	bne.n	800342c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800340c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003410:	f7ff ff30 	bl	8003274 <LL_ADC_IsEnabled>
 8003414:	4604      	mov	r4, r0
 8003416:	4841      	ldr	r0, [pc, #260]	; (800351c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003418:	f7ff ff2c 	bl	8003274 <LL_ADC_IsEnabled>
 800341c:	4603      	mov	r3, r0
 800341e:	4323      	orrs	r3, r4
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	e012      	b.n	8003452 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800342c:	483c      	ldr	r0, [pc, #240]	; (8003520 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800342e:	f7ff ff21 	bl	8003274 <LL_ADC_IsEnabled>
 8003432:	4604      	mov	r4, r0
 8003434:	483b      	ldr	r0, [pc, #236]	; (8003524 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003436:	f7ff ff1d 	bl	8003274 <LL_ADC_IsEnabled>
 800343a:	4603      	mov	r3, r0
 800343c:	431c      	orrs	r4, r3
 800343e:	483c      	ldr	r0, [pc, #240]	; (8003530 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003440:	f7ff ff18 	bl	8003274 <LL_ADC_IsEnabled>
 8003444:	4603      	mov	r3, r0
 8003446:	4323      	orrs	r3, r4
 8003448:	2b00      	cmp	r3, #0
 800344a:	bf0c      	ite	eq
 800344c:	2301      	moveq	r3, #1
 800344e:	2300      	movne	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d056      	beq.n	8003504 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800345e:	f023 030f 	bic.w	r3, r3, #15
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	6811      	ldr	r1, [r2, #0]
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	6892      	ldr	r2, [r2, #8]
 800346a:	430a      	orrs	r2, r1
 800346c:	431a      	orrs	r2, r3
 800346e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003470:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003472:	e047      	b.n	8003504 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800347c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800347e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003488:	d004      	beq.n	8003494 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a23      	ldr	r2, [pc, #140]	; (800351c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d10f      	bne.n	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003494:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003498:	f7ff feec 	bl	8003274 <LL_ADC_IsEnabled>
 800349c:	4604      	mov	r4, r0
 800349e:	481f      	ldr	r0, [pc, #124]	; (800351c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034a0:	f7ff fee8 	bl	8003274 <LL_ADC_IsEnabled>
 80034a4:	4603      	mov	r3, r0
 80034a6:	4323      	orrs	r3, r4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf0c      	ite	eq
 80034ac:	2301      	moveq	r3, #1
 80034ae:	2300      	movne	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	e012      	b.n	80034da <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80034b4:	481a      	ldr	r0, [pc, #104]	; (8003520 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80034b6:	f7ff fedd 	bl	8003274 <LL_ADC_IsEnabled>
 80034ba:	4604      	mov	r4, r0
 80034bc:	4819      	ldr	r0, [pc, #100]	; (8003524 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80034be:	f7ff fed9 	bl	8003274 <LL_ADC_IsEnabled>
 80034c2:	4603      	mov	r3, r0
 80034c4:	431c      	orrs	r4, r3
 80034c6:	481a      	ldr	r0, [pc, #104]	; (8003530 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80034c8:	f7ff fed4 	bl	8003274 <LL_ADC_IsEnabled>
 80034cc:	4603      	mov	r3, r0
 80034ce:	4323      	orrs	r3, r4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d012      	beq.n	8003504 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034e6:	f023 030f 	bic.w	r3, r3, #15
 80034ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80034ec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034ee:	e009      	b.n	8003504 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f4:	f043 0220 	orr.w	r2, r3, #32
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003502:	e000      	b.n	8003506 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003504:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800350e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003512:	4618      	mov	r0, r3
 8003514:	3784      	adds	r7, #132	; 0x84
 8003516:	46bd      	mov	sp, r7
 8003518:	bd90      	pop	{r4, r7, pc}
 800351a:	bf00      	nop
 800351c:	50000100 	.word	0x50000100
 8003520:	50000400 	.word	0x50000400
 8003524:	50000500 	.word	0x50000500
 8003528:	50000300 	.word	0x50000300
 800352c:	50000700 	.word	0x50000700
 8003530:	50000600 	.word	0x50000600

08003534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003544:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <__NVIC_SetPriorityGrouping+0x44>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003550:	4013      	ands	r3, r2
 8003552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800355c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003566:	4a04      	ldr	r2, [pc, #16]	; (8003578 <__NVIC_SetPriorityGrouping+0x44>)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	60d3      	str	r3, [r2, #12]
}
 800356c:	bf00      	nop
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	e000ed00 	.word	0xe000ed00

0800357c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003580:	4b04      	ldr	r3, [pc, #16]	; (8003594 <__NVIC_GetPriorityGrouping+0x18>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	0a1b      	lsrs	r3, r3, #8
 8003586:	f003 0307 	and.w	r3, r3, #7
}
 800358a:	4618      	mov	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	e000ed00 	.word	0xe000ed00

08003598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	db0b      	blt.n	80035c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	f003 021f 	and.w	r2, r3, #31
 80035b0:	4907      	ldr	r1, [pc, #28]	; (80035d0 <__NVIC_EnableIRQ+0x38>)
 80035b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	2001      	movs	r0, #1
 80035ba:	fa00 f202 	lsl.w	r2, r0, r2
 80035be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	e000e100 	.word	0xe000e100

080035d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	6039      	str	r1, [r7, #0]
 80035de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	db0a      	blt.n	80035fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	490c      	ldr	r1, [pc, #48]	; (8003620 <__NVIC_SetPriority+0x4c>)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	0112      	lsls	r2, r2, #4
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	440b      	add	r3, r1
 80035f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035fc:	e00a      	b.n	8003614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	b2da      	uxtb	r2, r3
 8003602:	4908      	ldr	r1, [pc, #32]	; (8003624 <__NVIC_SetPriority+0x50>)
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	3b04      	subs	r3, #4
 800360c:	0112      	lsls	r2, r2, #4
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	440b      	add	r3, r1
 8003612:	761a      	strb	r2, [r3, #24]
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	e000e100 	.word	0xe000e100
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003628:	b480      	push	{r7}
 800362a:	b089      	sub	sp, #36	; 0x24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f1c3 0307 	rsb	r3, r3, #7
 8003642:	2b04      	cmp	r3, #4
 8003644:	bf28      	it	cs
 8003646:	2304      	movcs	r3, #4
 8003648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3304      	adds	r3, #4
 800364e:	2b06      	cmp	r3, #6
 8003650:	d902      	bls.n	8003658 <NVIC_EncodePriority+0x30>
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	3b03      	subs	r3, #3
 8003656:	e000      	b.n	800365a <NVIC_EncodePriority+0x32>
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800365c:	f04f 32ff 	mov.w	r2, #4294967295
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43da      	mvns	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	401a      	ands	r2, r3
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003670:	f04f 31ff 	mov.w	r1, #4294967295
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	fa01 f303 	lsl.w	r3, r1, r3
 800367a:	43d9      	mvns	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003680:	4313      	orrs	r3, r2
         );
}
 8003682:	4618      	mov	r0, r3
 8003684:	3724      	adds	r7, #36	; 0x24
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff ff4c 	bl	8003534 <__NVIC_SetPriorityGrouping>
}
 800369c:	bf00      	nop
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036b2:	f7ff ff63 	bl	800357c <__NVIC_GetPriorityGrouping>
 80036b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	6978      	ldr	r0, [r7, #20]
 80036be:	f7ff ffb3 	bl	8003628 <NVIC_EncodePriority>
 80036c2:	4602      	mov	r2, r0
 80036c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c8:	4611      	mov	r1, r2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff ff82 	bl	80035d4 <__NVIC_SetPriority>
}
 80036d0:	bf00      	nop
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff ff56 	bl	8003598 <__NVIC_EnableIRQ>
}
 80036ec:	bf00      	nop
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e08d      	b.n	8003822 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	4b47      	ldr	r3, [pc, #284]	; (800382c <HAL_DMA_Init+0x138>)
 800370e:	429a      	cmp	r2, r3
 8003710:	d80f      	bhi.n	8003732 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	4b45      	ldr	r3, [pc, #276]	; (8003830 <HAL_DMA_Init+0x13c>)
 800371a:	4413      	add	r3, r2
 800371c:	4a45      	ldr	r2, [pc, #276]	; (8003834 <HAL_DMA_Init+0x140>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	009a      	lsls	r2, r3, #2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a42      	ldr	r2, [pc, #264]	; (8003838 <HAL_DMA_Init+0x144>)
 800372e:	641a      	str	r2, [r3, #64]	; 0x40
 8003730:	e00e      	b.n	8003750 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	4b40      	ldr	r3, [pc, #256]	; (800383c <HAL_DMA_Init+0x148>)
 800373a:	4413      	add	r3, r2
 800373c:	4a3d      	ldr	r2, [pc, #244]	; (8003834 <HAL_DMA_Init+0x140>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	091b      	lsrs	r3, r3, #4
 8003744:	009a      	lsls	r2, r3, #2
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a3c      	ldr	r2, [pc, #240]	; (8003840 <HAL_DMA_Init+0x14c>)
 800374e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003774:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003780:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800378c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f9b6 	bl	8003b14 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037b0:	d102      	bne.n	80037b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037cc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d010      	beq.n	80037f8 <HAL_DMA_Init+0x104>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d80c      	bhi.n	80037f8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f9d6 	bl	8003b90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	e008      	b.n	800380a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40020407 	.word	0x40020407
 8003830:	bffdfff8 	.word	0xbffdfff8
 8003834:	cccccccd 	.word	0xcccccccd
 8003838:	40020000 	.word	0x40020000
 800383c:	bffdfbf8 	.word	0xbffdfbf8
 8003840:	40020400 	.word	0x40020400

08003844 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_DMA_Start_IT+0x20>
 8003860:	2302      	movs	r3, #2
 8003862:	e066      	b.n	8003932 <HAL_DMA_Start_IT+0xee>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d155      	bne.n	8003924 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0201 	bic.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	68b9      	ldr	r1, [r7, #8]
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f8fb 	bl	8003a98 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d008      	beq.n	80038bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 020e 	orr.w	r2, r2, #14
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e00f      	b.n	80038dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0204 	bic.w	r2, r2, #4
 80038ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 020a 	orr.w	r2, r2, #10
 80038da:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d007      	beq.n	80038fa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038f8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d007      	beq.n	8003912 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003910:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0201 	orr.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	e005      	b.n	8003930 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800392c:	2302      	movs	r3, #2
 800392e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003930:	7dfb      	ldrb	r3, [r7, #23]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b084      	sub	sp, #16
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	2204      	movs	r2, #4
 800395c:	409a      	lsls	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4013      	ands	r3, r2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d026      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x7a>
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d021      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d107      	bne.n	800398e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0204 	bic.w	r2, r2, #4
 800398c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	f003 021f 	and.w	r2, r3, #31
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	2104      	movs	r1, #4
 800399c:	fa01 f202 	lsl.w	r2, r1, r2
 80039a0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d071      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80039b2:	e06c      	b.n	8003a8e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	2202      	movs	r2, #2
 80039be:	409a      	lsls	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d02e      	beq.n	8003a26 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d029      	beq.n	8003a26 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0320 	and.w	r3, r3, #32
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10b      	bne.n	80039f8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 020a 	bic.w	r2, r2, #10
 80039ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	f003 021f 	and.w	r2, r3, #31
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	2102      	movs	r1, #2
 8003a06:	fa01 f202 	lsl.w	r2, r1, r2
 8003a0a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d038      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a24:	e033      	b.n	8003a8e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	2208      	movs	r2, #8
 8003a30:	409a      	lsls	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d02a      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d025      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 020e 	bic.w	r2, r2, #14
 8003a52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a58:	f003 021f 	and.w	r2, r3, #31
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	2101      	movs	r1, #1
 8003a62:	fa01 f202 	lsl.w	r2, r1, r2
 8003a66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d004      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a8e:	bf00      	nop
 8003a90:	bf00      	nop
}
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003aae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d004      	beq.n	8003ac2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ac0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	f003 021f 	and.w	r2, r3, #31
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	2101      	movs	r1, #1
 8003ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b10      	cmp	r3, #16
 8003ae4:	d108      	bne.n	8003af8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003af6:	e007      	b.n	8003b08 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	60da      	str	r2, [r3, #12]
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	4b16      	ldr	r3, [pc, #88]	; (8003b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d802      	bhi.n	8003b2e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003b28:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	e001      	b.n	8003b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003b2e:	4b15      	ldr	r3, [pc, #84]	; (8003b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b30:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	3b08      	subs	r3, #8
 8003b3e:	4a12      	ldr	r2, [pc, #72]	; (8003b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b40:	fba2 2303 	umull	r2, r3, r2, r3
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4c:	089b      	lsrs	r3, r3, #2
 8003b4e:	009a      	lsls	r2, r3, #2
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4413      	add	r3, r2
 8003b54:	461a      	mov	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a0b      	ldr	r2, [pc, #44]	; (8003b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f003 031f 	and.w	r3, r3, #31
 8003b66:	2201      	movs	r2, #1
 8003b68:	409a      	lsls	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b6e:	bf00      	nop
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40020407 	.word	0x40020407
 8003b80:	40020800 	.word	0x40020800
 8003b84:	40020820 	.word	0x40020820
 8003b88:	cccccccd 	.word	0xcccccccd
 8003b8c:	40020880 	.word	0x40020880

08003b90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	461a      	mov	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a08      	ldr	r2, [pc, #32]	; (8003bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003bb2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	409a      	lsls	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003bc4:	bf00      	nop
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	1000823f 	.word	0x1000823f
 8003bd4:	40020940 	.word	0x40020940

08003bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003be6:	e15a      	b.n	8003e9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	2101      	movs	r1, #1
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 814c 	beq.w	8003e98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d00b      	beq.n	8003c20 <HAL_GPIO_Init+0x48>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d007      	beq.n	8003c20 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c14:	2b11      	cmp	r3, #17
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b12      	cmp	r3, #18
 8003c1e:	d130      	bne.n	8003c82 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4013      	ands	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c56:	2201      	movs	r2, #1
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4013      	ands	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	091b      	lsrs	r3, r3, #4
 8003c6c:	f003 0201 	and.w	r2, r3, #1
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	43db      	mvns	r3, r3
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4013      	ands	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d003      	beq.n	8003cc2 <HAL_GPIO_Init+0xea>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b12      	cmp	r3, #18
 8003cc0:	d123      	bne.n	8003d0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	08da      	lsrs	r2, r3, #3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3208      	adds	r2, #8
 8003cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	220f      	movs	r2, #15
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	691a      	ldr	r2, [r3, #16]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	08da      	lsrs	r2, r3, #3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3208      	adds	r2, #8
 8003d04:	6939      	ldr	r1, [r7, #16]
 8003d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	2203      	movs	r2, #3
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 0203 	and.w	r2, r3, #3
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80a6 	beq.w	8003e98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d4c:	4b5b      	ldr	r3, [pc, #364]	; (8003ebc <HAL_GPIO_Init+0x2e4>)
 8003d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d50:	4a5a      	ldr	r2, [pc, #360]	; (8003ebc <HAL_GPIO_Init+0x2e4>)
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	6613      	str	r3, [r2, #96]	; 0x60
 8003d58:	4b58      	ldr	r3, [pc, #352]	; (8003ebc <HAL_GPIO_Init+0x2e4>)
 8003d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d64:	4a56      	ldr	r2, [pc, #344]	; (8003ec0 <HAL_GPIO_Init+0x2e8>)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	089b      	lsrs	r3, r3, #2
 8003d6a:	3302      	adds	r3, #2
 8003d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	220f      	movs	r2, #15
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	43db      	mvns	r3, r3
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4013      	ands	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d8e:	d01f      	beq.n	8003dd0 <HAL_GPIO_Init+0x1f8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a4c      	ldr	r2, [pc, #304]	; (8003ec4 <HAL_GPIO_Init+0x2ec>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d019      	beq.n	8003dcc <HAL_GPIO_Init+0x1f4>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a4b      	ldr	r2, [pc, #300]	; (8003ec8 <HAL_GPIO_Init+0x2f0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d013      	beq.n	8003dc8 <HAL_GPIO_Init+0x1f0>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a4a      	ldr	r2, [pc, #296]	; (8003ecc <HAL_GPIO_Init+0x2f4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00d      	beq.n	8003dc4 <HAL_GPIO_Init+0x1ec>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a49      	ldr	r2, [pc, #292]	; (8003ed0 <HAL_GPIO_Init+0x2f8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d007      	beq.n	8003dc0 <HAL_GPIO_Init+0x1e8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a48      	ldr	r2, [pc, #288]	; (8003ed4 <HAL_GPIO_Init+0x2fc>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d101      	bne.n	8003dbc <HAL_GPIO_Init+0x1e4>
 8003db8:	2305      	movs	r3, #5
 8003dba:	e00a      	b.n	8003dd2 <HAL_GPIO_Init+0x1fa>
 8003dbc:	2306      	movs	r3, #6
 8003dbe:	e008      	b.n	8003dd2 <HAL_GPIO_Init+0x1fa>
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	e006      	b.n	8003dd2 <HAL_GPIO_Init+0x1fa>
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e004      	b.n	8003dd2 <HAL_GPIO_Init+0x1fa>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e002      	b.n	8003dd2 <HAL_GPIO_Init+0x1fa>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <HAL_GPIO_Init+0x1fa>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	f002 0203 	and.w	r2, r2, #3
 8003dd8:	0092      	lsls	r2, r2, #2
 8003dda:	4093      	lsls	r3, r2
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003de2:	4937      	ldr	r1, [pc, #220]	; (8003ec0 <HAL_GPIO_Init+0x2e8>)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	3302      	adds	r3, #2
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003df0:	4b39      	ldr	r3, [pc, #228]	; (8003ed8 <HAL_GPIO_Init+0x300>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e14:	4a30      	ldr	r2, [pc, #192]	; (8003ed8 <HAL_GPIO_Init+0x300>)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003e1a:	4b2f      	ldr	r3, [pc, #188]	; (8003ed8 <HAL_GPIO_Init+0x300>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	43db      	mvns	r3, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e3e:	4a26      	ldr	r2, [pc, #152]	; (8003ed8 <HAL_GPIO_Init+0x300>)
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e44:	4b24      	ldr	r3, [pc, #144]	; (8003ed8 <HAL_GPIO_Init+0x300>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4013      	ands	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e68:	4a1b      	ldr	r2, [pc, #108]	; (8003ed8 <HAL_GPIO_Init+0x300>)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e6e:	4b1a      	ldr	r3, [pc, #104]	; (8003ed8 <HAL_GPIO_Init+0x300>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	43db      	mvns	r3, r3
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e92:	4a11      	ldr	r2, [pc, #68]	; (8003ed8 <HAL_GPIO_Init+0x300>)
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f47f ae9d 	bne.w	8003be8 <HAL_GPIO_Init+0x10>
  }
}
 8003eae:	bf00      	nop
 8003eb0:	bf00      	nop
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	40010000 	.word	0x40010000
 8003ec4:	48000400 	.word	0x48000400
 8003ec8:	48000800 	.word	0x48000800
 8003ecc:	48000c00 	.word	0x48000c00
 8003ed0:	48001000 	.word	0x48001000
 8003ed4:	48001400 	.word	0x48001400
 8003ed8:	40010400 	.word	0x40010400

08003edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	807b      	strh	r3, [r7, #2]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003eec:	787b      	ldrb	r3, [r7, #1]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ef2:	887a      	ldrh	r2, [r7, #2]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ef8:	e002      	b.n	8003f00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003efa:	887a      	ldrh	r2, [r7, #2]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e081      	b.n	8004022 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fc ff94 	bl	8000e60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2224      	movs	r2, #36	; 0x24
 8003f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0201 	bic.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d107      	bne.n	8003f86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f82:	609a      	str	r2, [r3, #8]
 8003f84:	e006      	b.n	8003f94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d104      	bne.n	8003fa6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fa4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6812      	ldr	r2, [r2, #0]
 8003fb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	ea42 0103 	orr.w	r1, r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	021a      	lsls	r2, r3, #8
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69d9      	ldr	r1, [r3, #28]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1a      	ldr	r2, [r3, #32]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af02      	add	r7, sp, #8
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	4608      	mov	r0, r1
 8004036:	4611      	mov	r1, r2
 8004038:	461a      	mov	r2, r3
 800403a:	4603      	mov	r3, r0
 800403c:	817b      	strh	r3, [r7, #10]
 800403e:	460b      	mov	r3, r1
 8004040:	813b      	strh	r3, [r7, #8]
 8004042:	4613      	mov	r3, r2
 8004044:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b20      	cmp	r3, #32
 8004050:	f040 80f9 	bne.w	8004246 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_I2C_Mem_Write+0x34>
 800405a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800405c:	2b00      	cmp	r3, #0
 800405e:	d105      	bne.n	800406c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004066:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0ed      	b.n	8004248 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_I2C_Mem_Write+0x4e>
 8004076:	2302      	movs	r3, #2
 8004078:	e0e6      	b.n	8004248 <HAL_I2C_Mem_Write+0x21c>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004082:	f7fd fc4d 	bl	8001920 <HAL_GetTick>
 8004086:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	2319      	movs	r3, #25
 800408e:	2201      	movs	r2, #1
 8004090:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f955 	bl	8004344 <I2C_WaitOnFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0d1      	b.n	8004248 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2221      	movs	r2, #33	; 0x21
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2240      	movs	r2, #64	; 0x40
 80040b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a3a      	ldr	r2, [r7, #32]
 80040be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040cc:	88f8      	ldrh	r0, [r7, #6]
 80040ce:	893a      	ldrh	r2, [r7, #8]
 80040d0:	8979      	ldrh	r1, [r7, #10]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	9301      	str	r3, [sp, #4]
 80040d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	4603      	mov	r3, r0
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 f8b9 	bl	8004254 <I2C_RequestMemoryWrite>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0a9      	b.n	8004248 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2bff      	cmp	r3, #255	; 0xff
 80040fc:	d90e      	bls.n	800411c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	22ff      	movs	r2, #255	; 0xff
 8004102:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004108:	b2da      	uxtb	r2, r3
 800410a:	8979      	ldrh	r1, [r7, #10]
 800410c:	2300      	movs	r3, #0
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 fa37 	bl	8004588 <I2C_TransferConfig>
 800411a:	e00f      	b.n	800413c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412a:	b2da      	uxtb	r2, r3
 800412c:	8979      	ldrh	r1, [r7, #10]
 800412e:	2300      	movs	r3, #0
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 fa26 	bl	8004588 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 f93f 	bl	80043c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e07b      	b.n	8004248 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	781a      	ldrb	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d034      	beq.n	80041f4 <HAL_I2C_Mem_Write+0x1c8>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418e:	2b00      	cmp	r3, #0
 8004190:	d130      	bne.n	80041f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	2200      	movs	r2, #0
 800419a:	2180      	movs	r1, #128	; 0x80
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f8d1 	bl	8004344 <I2C_WaitOnFlagUntilTimeout>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e04d      	b.n	8004248 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2bff      	cmp	r3, #255	; 0xff
 80041b4:	d90e      	bls.n	80041d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	22ff      	movs	r2, #255	; 0xff
 80041ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	8979      	ldrh	r1, [r7, #10]
 80041c4:	2300      	movs	r3, #0
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 f9db 	bl	8004588 <I2C_TransferConfig>
 80041d2:	e00f      	b.n	80041f4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	8979      	ldrh	r1, [r7, #10]
 80041e6:	2300      	movs	r3, #0
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f9ca 	bl	8004588 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d19e      	bne.n	800413c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f91e 	bl	8004444 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e01a      	b.n	8004248 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2220      	movs	r2, #32
 8004218:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6859      	ldr	r1, [r3, #4]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <HAL_I2C_Mem_Write+0x224>)
 8004226:	400b      	ands	r3, r1
 8004228:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	e000      	b.n	8004248 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004246:	2302      	movs	r3, #2
  }
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	fe00e800 	.word	0xfe00e800

08004254 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af02      	add	r7, sp, #8
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	4608      	mov	r0, r1
 800425e:	4611      	mov	r1, r2
 8004260:	461a      	mov	r2, r3
 8004262:	4603      	mov	r3, r0
 8004264:	817b      	strh	r3, [r7, #10]
 8004266:	460b      	mov	r3, r1
 8004268:	813b      	strh	r3, [r7, #8]
 800426a:	4613      	mov	r3, r2
 800426c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	8979      	ldrh	r1, [r7, #10]
 8004274:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <I2C_RequestMemoryWrite+0xa4>)
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f983 	bl	8004588 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	69b9      	ldr	r1, [r7, #24]
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 f89c 	bl	80043c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e02c      	b.n	80042f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004296:	88fb      	ldrh	r3, [r7, #6]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d105      	bne.n	80042a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800429c:	893b      	ldrh	r3, [r7, #8]
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	629a      	str	r2, [r3, #40]	; 0x28
 80042a6:	e015      	b.n	80042d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042a8:	893b      	ldrh	r3, [r7, #8]
 80042aa:	0a1b      	lsrs	r3, r3, #8
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	69b9      	ldr	r1, [r7, #24]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f882 	bl	80043c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e012      	b.n	80042f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042ca:	893b      	ldrh	r3, [r7, #8]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2200      	movs	r2, #0
 80042dc:	2180      	movs	r1, #128	; 0x80
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f830 	bl	8004344 <I2C_WaitOnFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	80002000 	.word	0x80002000

080042fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b02      	cmp	r3, #2
 8004310:	d103      	bne.n	800431a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2200      	movs	r2, #0
 8004318:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b01      	cmp	r3, #1
 8004326:	d007      	beq.n	8004338 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	619a      	str	r2, [r3, #24]
  }
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004354:	e022      	b.n	800439c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435c:	d01e      	beq.n	800439c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435e:	f7fd fadf 	bl	8001920 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d302      	bcc.n	8004374 <I2C_WaitOnFlagUntilTimeout+0x30>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d113      	bne.n	800439c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004378:	f043 0220 	orr.w	r2, r3, #32
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e00f      	b.n	80043bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	4013      	ands	r3, r2
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	bf0c      	ite	eq
 80043ac:	2301      	moveq	r3, #1
 80043ae:	2300      	movne	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d0cd      	beq.n	8004356 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043d0:	e02c      	b.n	800442c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 f870 	bl	80044bc <I2C_IsAcknowledgeFailed>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e02a      	b.n	800443c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ec:	d01e      	beq.n	800442c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ee:	f7fd fa97 	bl	8001920 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d302      	bcc.n	8004404 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d113      	bne.n	800442c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004408:	f043 0220 	orr.w	r2, r3, #32
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e007      	b.n	800443c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b02      	cmp	r3, #2
 8004438:	d1cb      	bne.n	80043d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004450:	e028      	b.n	80044a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	68b9      	ldr	r1, [r7, #8]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 f830 	bl	80044bc <I2C_IsAcknowledgeFailed>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e026      	b.n	80044b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004466:	f7fd fa5b 	bl	8001920 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	429a      	cmp	r2, r3
 8004474:	d302      	bcc.n	800447c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d113      	bne.n	80044a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004480:	f043 0220 	orr.w	r2, r3, #32
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e007      	b.n	80044b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d1cf      	bne.n	8004452 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	2b10      	cmp	r3, #16
 80044d4:	d151      	bne.n	800457a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044d6:	e022      	b.n	800451e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044de:	d01e      	beq.n	800451e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e0:	f7fd fa1e 	bl	8001920 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d302      	bcc.n	80044f6 <I2C_IsAcknowledgeFailed+0x3a>
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d113      	bne.n	800451e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	f043 0220 	orr.w	r2, r3, #32
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2220      	movs	r2, #32
 8004506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e02e      	b.n	800457c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b20      	cmp	r3, #32
 800452a:	d1d5      	bne.n	80044d8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2210      	movs	r2, #16
 8004532:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2220      	movs	r2, #32
 800453a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7ff fedd 	bl	80042fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6859      	ldr	r1, [r3, #4]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <I2C_IsAcknowledgeFailed+0xc8>)
 800454e:	400b      	ands	r3, r1
 8004550:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004556:	f043 0204 	orr.w	r2, r3, #4
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2220      	movs	r2, #32
 8004562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	fe00e800 	.word	0xfe00e800

08004588 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	607b      	str	r3, [r7, #4]
 8004592:	460b      	mov	r3, r1
 8004594:	817b      	strh	r3, [r7, #10]
 8004596:	4613      	mov	r3, r2
 8004598:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	0d5b      	lsrs	r3, r3, #21
 80045a4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80045a8:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <I2C_TransferConfig+0x58>)
 80045aa:	430b      	orrs	r3, r1
 80045ac:	43db      	mvns	r3, r3
 80045ae:	ea02 0103 	and.w	r1, r2, r3
 80045b2:	897b      	ldrh	r3, [r7, #10]
 80045b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80045b8:	7a7b      	ldrb	r3, [r7, #9]
 80045ba:	041b      	lsls	r3, r3, #16
 80045bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	431a      	orrs	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80045d2:	bf00      	nop
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	03ff63ff 	.word	0x03ff63ff

080045e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	d138      	bne.n	800466c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004604:	2302      	movs	r3, #2
 8004606:	e032      	b.n	800466e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2224      	movs	r2, #36	; 0x24
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0201 	bic.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004636:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6819      	ldr	r1, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	e000      	b.n	800466e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800466c:	2302      	movs	r3, #2
  }
}
 800466e:	4618      	mov	r0, r3
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800467a:	b480      	push	{r7}
 800467c:	b085      	sub	sp, #20
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b20      	cmp	r3, #32
 800468e:	d139      	bne.n	8004704 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004696:	2b01      	cmp	r3, #1
 8004698:	d101      	bne.n	800469e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800469a:	2302      	movs	r3, #2
 800469c:	e033      	b.n	8004706 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2224      	movs	r2, #36	; 0x24
 80046aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	021b      	lsls	r3, r3, #8
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	e000      	b.n	8004706 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
	...

08004714 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d141      	bne.n	80047a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004722:	4b4b      	ldr	r3, [pc, #300]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800472a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800472e:	d131      	bne.n	8004794 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004730:	4b47      	ldr	r3, [pc, #284]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004736:	4a46      	ldr	r2, [pc, #280]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800473c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004740:	4b43      	ldr	r3, [pc, #268]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004748:	4a41      	ldr	r2, [pc, #260]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800474a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800474e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004750:	4b40      	ldr	r3, [pc, #256]	; (8004854 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2232      	movs	r2, #50	; 0x32
 8004756:	fb02 f303 	mul.w	r3, r2, r3
 800475a:	4a3f      	ldr	r2, [pc, #252]	; (8004858 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800475c:	fba2 2303 	umull	r2, r3, r2, r3
 8004760:	0c9b      	lsrs	r3, r3, #18
 8004762:	3301      	adds	r3, #1
 8004764:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004766:	e002      	b.n	800476e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3b01      	subs	r3, #1
 800476c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800476e:	4b38      	ldr	r3, [pc, #224]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477a:	d102      	bne.n	8004782 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f2      	bne.n	8004768 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004782:	4b33      	ldr	r3, [pc, #204]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800478a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478e:	d158      	bne.n	8004842 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e057      	b.n	8004844 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004794:	4b2e      	ldr	r3, [pc, #184]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800479a:	4a2d      	ldr	r2, [pc, #180]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800479c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80047a4:	e04d      	b.n	8004842 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ac:	d141      	bne.n	8004832 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047ae:	4b28      	ldr	r3, [pc, #160]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ba:	d131      	bne.n	8004820 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047bc:	4b24      	ldr	r3, [pc, #144]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047c2:	4a23      	ldr	r2, [pc, #140]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047cc:	4b20      	ldr	r3, [pc, #128]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047d4:	4a1e      	ldr	r2, [pc, #120]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047dc:	4b1d      	ldr	r3, [pc, #116]	; (8004854 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2232      	movs	r2, #50	; 0x32
 80047e2:	fb02 f303 	mul.w	r3, r2, r3
 80047e6:	4a1c      	ldr	r2, [pc, #112]	; (8004858 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047e8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ec:	0c9b      	lsrs	r3, r3, #18
 80047ee:	3301      	adds	r3, #1
 80047f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047f2:	e002      	b.n	80047fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047fa:	4b15      	ldr	r3, [pc, #84]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004806:	d102      	bne.n	800480e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f2      	bne.n	80047f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800480e:	4b10      	ldr	r3, [pc, #64]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481a:	d112      	bne.n	8004842 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e011      	b.n	8004844 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004826:	4a0a      	ldr	r2, [pc, #40]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800482c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004830:	e007      	b.n	8004842 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004832:	4b07      	ldr	r3, [pc, #28]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800483a:	4a05      	ldr	r2, [pc, #20]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800483c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004840:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	40007000 	.word	0x40007000
 8004854:	20000010 	.word	0x20000010
 8004858:	431bde83 	.word	0x431bde83

0800485c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004860:	4b05      	ldr	r3, [pc, #20]	; (8004878 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	4a04      	ldr	r2, [pc, #16]	; (8004878 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800486a:	6093      	str	r3, [r2, #8]
}
 800486c:	bf00      	nop
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40007000 	.word	0x40007000

0800487c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e308      	b.n	8004ea0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d075      	beq.n	8004986 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800489a:	4ba3      	ldr	r3, [pc, #652]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 030c 	and.w	r3, r3, #12
 80048a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048a4:	4ba0      	ldr	r3, [pc, #640]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	d102      	bne.n	80048ba <HAL_RCC_OscConfig+0x3e>
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d002      	beq.n	80048c0 <HAL_RCC_OscConfig+0x44>
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d10b      	bne.n	80048d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c0:	4b99      	ldr	r3, [pc, #612]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d05b      	beq.n	8004984 <HAL_RCC_OscConfig+0x108>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d157      	bne.n	8004984 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e2e3      	b.n	8004ea0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e0:	d106      	bne.n	80048f0 <HAL_RCC_OscConfig+0x74>
 80048e2:	4b91      	ldr	r3, [pc, #580]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a90      	ldr	r2, [pc, #576]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 80048e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	e01d      	b.n	800492c <HAL_RCC_OscConfig+0xb0>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048f8:	d10c      	bne.n	8004914 <HAL_RCC_OscConfig+0x98>
 80048fa:	4b8b      	ldr	r3, [pc, #556]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a8a      	ldr	r2, [pc, #552]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	4b88      	ldr	r3, [pc, #544]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a87      	ldr	r2, [pc, #540]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 800490c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	e00b      	b.n	800492c <HAL_RCC_OscConfig+0xb0>
 8004914:	4b84      	ldr	r3, [pc, #528]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a83      	ldr	r2, [pc, #524]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 800491a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	4b81      	ldr	r3, [pc, #516]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a80      	ldr	r2, [pc, #512]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800492a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d013      	beq.n	800495c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004934:	f7fc fff4 	bl	8001920 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800493c:	f7fc fff0 	bl	8001920 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	; 0x64
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e2a8      	b.n	8004ea0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800494e:	4b76      	ldr	r3, [pc, #472]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0xc0>
 800495a:	e014      	b.n	8004986 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495c:	f7fc ffe0 	bl	8001920 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004964:	f7fc ffdc 	bl	8001920 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b64      	cmp	r3, #100	; 0x64
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e294      	b.n	8004ea0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004976:	4b6c      	ldr	r3, [pc, #432]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0xe8>
 8004982:	e000      	b.n	8004986 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d075      	beq.n	8004a7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004992:	4b65      	ldr	r3, [pc, #404]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800499c:	4b62      	ldr	r3, [pc, #392]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b0c      	cmp	r3, #12
 80049aa:	d102      	bne.n	80049b2 <HAL_RCC_OscConfig+0x136>
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d002      	beq.n	80049b8 <HAL_RCC_OscConfig+0x13c>
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d11f      	bne.n	80049f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049b8:	4b5b      	ldr	r3, [pc, #364]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_OscConfig+0x154>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e267      	b.n	8004ea0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d0:	4b55      	ldr	r3, [pc, #340]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	061b      	lsls	r3, r3, #24
 80049de:	4952      	ldr	r1, [pc, #328]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049e4:	4b51      	ldr	r3, [pc, #324]	; (8004b2c <HAL_RCC_OscConfig+0x2b0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fc fb95 	bl	8001118 <HAL_InitTick>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d043      	beq.n	8004a7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e253      	b.n	8004ea0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d023      	beq.n	8004a48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a00:	4b49      	ldr	r3, [pc, #292]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a48      	ldr	r2, [pc, #288]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fc ff88 	bl	8001920 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a14:	f7fc ff84 	bl	8001920 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e23c      	b.n	8004ea0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a26:	4b40      	ldr	r3, [pc, #256]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0f0      	beq.n	8004a14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a32:	4b3d      	ldr	r3, [pc, #244]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	061b      	lsls	r3, r3, #24
 8004a40:	4939      	ldr	r1, [pc, #228]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	604b      	str	r3, [r1, #4]
 8004a46:	e01a      	b.n	8004a7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a48:	4b37      	ldr	r3, [pc, #220]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a36      	ldr	r2, [pc, #216]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004a4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fc ff64 	bl	8001920 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a5c:	f7fc ff60 	bl	8001920 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e218      	b.n	8004ea0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a6e:	4b2e      	ldr	r3, [pc, #184]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x1e0>
 8004a7a:	e000      	b.n	8004a7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d03c      	beq.n	8004b04 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d01c      	beq.n	8004acc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a92:	4b25      	ldr	r3, [pc, #148]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a98:	4a23      	ldr	r2, [pc, #140]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa2:	f7fc ff3d 	bl	8001920 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aaa:	f7fc ff39 	bl	8001920 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e1f1      	b.n	8004ea0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004abc:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0ef      	beq.n	8004aaa <HAL_RCC_OscConfig+0x22e>
 8004aca:	e01b      	b.n	8004b04 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004acc:	4b16      	ldr	r3, [pc, #88]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ad2:	4a15      	ldr	r2, [pc, #84]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	f023 0301 	bic.w	r3, r3, #1
 8004ad8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004adc:	f7fc ff20 	bl	8001920 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae4:	f7fc ff1c 	bl	8001920 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e1d4      	b.n	8004ea0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004af6:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1ef      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 80ab 	beq.w	8004c68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b12:	2300      	movs	r3, #0
 8004b14:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b16:	4b04      	ldr	r3, [pc, #16]	; (8004b28 <HAL_RCC_OscConfig+0x2ac>)
 8004b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <HAL_RCC_OscConfig+0x2b4>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e005      	b.n	8004b32 <HAL_RCC_OscConfig+0x2b6>
 8004b26:	bf00      	nop
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	2000002c 	.word	0x2000002c
 8004b30:	2300      	movs	r3, #0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00d      	beq.n	8004b52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b36:	4baf      	ldr	r3, [pc, #700]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3a:	4aae      	ldr	r2, [pc, #696]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b40:	6593      	str	r3, [r2, #88]	; 0x58
 8004b42:	4bac      	ldr	r3, [pc, #688]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b52:	4ba9      	ldr	r3, [pc, #676]	; (8004df8 <HAL_RCC_OscConfig+0x57c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d118      	bne.n	8004b90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b5e:	4ba6      	ldr	r3, [pc, #664]	; (8004df8 <HAL_RCC_OscConfig+0x57c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4aa5      	ldr	r2, [pc, #660]	; (8004df8 <HAL_RCC_OscConfig+0x57c>)
 8004b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b6a:	f7fc fed9 	bl	8001920 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b72:	f7fc fed5 	bl	8001920 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e18d      	b.n	8004ea0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b84:	4b9c      	ldr	r3, [pc, #624]	; (8004df8 <HAL_RCC_OscConfig+0x57c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d108      	bne.n	8004baa <HAL_RCC_OscConfig+0x32e>
 8004b98:	4b96      	ldr	r3, [pc, #600]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9e:	4a95      	ldr	r2, [pc, #596]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ba8:	e024      	b.n	8004bf4 <HAL_RCC_OscConfig+0x378>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b05      	cmp	r3, #5
 8004bb0:	d110      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x358>
 8004bb2:	4b90      	ldr	r3, [pc, #576]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb8:	4a8e      	ldr	r2, [pc, #568]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004bba:	f043 0304 	orr.w	r3, r3, #4
 8004bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bc2:	4b8c      	ldr	r3, [pc, #560]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc8:	4a8a      	ldr	r2, [pc, #552]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bd2:	e00f      	b.n	8004bf4 <HAL_RCC_OscConfig+0x378>
 8004bd4:	4b87      	ldr	r3, [pc, #540]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	4a86      	ldr	r2, [pc, #536]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004bdc:	f023 0301 	bic.w	r3, r3, #1
 8004be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004be4:	4b83      	ldr	r3, [pc, #524]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bea:	4a82      	ldr	r2, [pc, #520]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004bec:	f023 0304 	bic.w	r3, r3, #4
 8004bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d016      	beq.n	8004c2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfc:	f7fc fe90 	bl	8001920 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c02:	e00a      	b.n	8004c1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c04:	f7fc fe8c 	bl	8001920 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e142      	b.n	8004ea0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c1a:	4b76      	ldr	r3, [pc, #472]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0ed      	beq.n	8004c04 <HAL_RCC_OscConfig+0x388>
 8004c28:	e015      	b.n	8004c56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2a:	f7fc fe79 	bl	8001920 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c30:	e00a      	b.n	8004c48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c32:	f7fc fe75 	bl	8001920 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e12b      	b.n	8004ea0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c48:	4b6a      	ldr	r3, [pc, #424]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1ed      	bne.n	8004c32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c56:	7ffb      	ldrb	r3, [r7, #31]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d105      	bne.n	8004c68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c5c:	4b65      	ldr	r3, [pc, #404]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c60:	4a64      	ldr	r2, [pc, #400]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0320 	and.w	r3, r3, #32
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d03c      	beq.n	8004cee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01c      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c7c:	4b5d      	ldr	r3, [pc, #372]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c82:	4a5c      	ldr	r2, [pc, #368]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004c84:	f043 0301 	orr.w	r3, r3, #1
 8004c88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8c:	f7fc fe48 	bl	8001920 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c94:	f7fc fe44 	bl	8001920 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e0fc      	b.n	8004ea0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ca6:	4b53      	ldr	r3, [pc, #332]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004ca8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0ef      	beq.n	8004c94 <HAL_RCC_OscConfig+0x418>
 8004cb4:	e01b      	b.n	8004cee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004cb6:	4b4f      	ldr	r3, [pc, #316]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cbc:	4a4d      	ldr	r2, [pc, #308]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc6:	f7fc fe2b 	bl	8001920 <HAL_GetTick>
 8004cca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cce:	f7fc fe27 	bl	8001920 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e0df      	b.n	8004ea0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ce0:	4b44      	ldr	r3, [pc, #272]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1ef      	bne.n	8004cce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 80d3 	beq.w	8004e9e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cf8:	4b3e      	ldr	r3, [pc, #248]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 030c 	and.w	r3, r3, #12
 8004d00:	2b0c      	cmp	r3, #12
 8004d02:	f000 808d 	beq.w	8004e20 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d15a      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d0e:	4b39      	ldr	r3, [pc, #228]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a38      	ldr	r2, [pc, #224]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004d14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1a:	f7fc fe01 	bl	8001920 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d22:	f7fc fdfd 	bl	8001920 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e0b5      	b.n	8004ea0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d34:	4b2f      	ldr	r3, [pc, #188]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f0      	bne.n	8004d22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d40:	4b2c      	ldr	r3, [pc, #176]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004d42:	68da      	ldr	r2, [r3, #12]
 8004d44:	4b2d      	ldr	r3, [pc, #180]	; (8004dfc <HAL_RCC_OscConfig+0x580>)
 8004d46:	4013      	ands	r3, r2
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6a11      	ldr	r1, [r2, #32]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d50:	3a01      	subs	r2, #1
 8004d52:	0112      	lsls	r2, r2, #4
 8004d54:	4311      	orrs	r1, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004d5a:	0212      	lsls	r2, r2, #8
 8004d5c:	4311      	orrs	r1, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d62:	0852      	lsrs	r2, r2, #1
 8004d64:	3a01      	subs	r2, #1
 8004d66:	0552      	lsls	r2, r2, #21
 8004d68:	4311      	orrs	r1, r2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d6e:	0852      	lsrs	r2, r2, #1
 8004d70:	3a01      	subs	r2, #1
 8004d72:	0652      	lsls	r2, r2, #25
 8004d74:	4311      	orrs	r1, r2
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d7a:	06d2      	lsls	r2, r2, #27
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	491d      	ldr	r1, [pc, #116]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d84:	4b1b      	ldr	r3, [pc, #108]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a1a      	ldr	r2, [pc, #104]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d8e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d90:	4b18      	ldr	r3, [pc, #96]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	4a17      	ldr	r2, [pc, #92]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9c:	f7fc fdc0 	bl	8001920 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da4:	f7fc fdbc 	bl	8001920 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e074      	b.n	8004ea0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004db6:	4b0f      	ldr	r3, [pc, #60]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x528>
 8004dc2:	e06c      	b.n	8004e9e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc4:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a0a      	ldr	r2, [pc, #40]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004dca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dce:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004dd0:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	4a07      	ldr	r2, [pc, #28]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004dd6:	f023 0303 	bic.w	r3, r3, #3
 8004dda:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004ddc:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	4a04      	ldr	r2, [pc, #16]	; (8004df4 <HAL_RCC_OscConfig+0x578>)
 8004de2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dec:	f7fc fd98 	bl	8001920 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004df2:	e00e      	b.n	8004e12 <HAL_RCC_OscConfig+0x596>
 8004df4:	40021000 	.word	0x40021000
 8004df8:	40007000 	.word	0x40007000
 8004dfc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e00:	f7fc fd8e 	bl	8001920 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e046      	b.n	8004ea0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e12:	4b25      	ldr	r3, [pc, #148]	; (8004ea8 <HAL_RCC_OscConfig+0x62c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f0      	bne.n	8004e00 <HAL_RCC_OscConfig+0x584>
 8004e1e:	e03e      	b.n	8004e9e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e039      	b.n	8004ea0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004e2c:	4b1e      	ldr	r3, [pc, #120]	; (8004ea8 <HAL_RCC_OscConfig+0x62c>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f003 0203 	and.w	r2, r3, #3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d12c      	bne.n	8004e9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d123      	bne.n	8004e9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d11b      	bne.n	8004e9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d113      	bne.n	8004e9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7c:	085b      	lsrs	r3, r3, #1
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d109      	bne.n	8004e9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	3b01      	subs	r3, #1
 8004e94:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d001      	beq.n	8004e9e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e000      	b.n	8004ea0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3720      	adds	r7, #32
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40021000 	.word	0x40021000

08004eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e11e      	b.n	8005102 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ec4:	4b91      	ldr	r3, [pc, #580]	; (800510c <HAL_RCC_ClockConfig+0x260>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d910      	bls.n	8004ef4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed2:	4b8e      	ldr	r3, [pc, #568]	; (800510c <HAL_RCC_ClockConfig+0x260>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f023 020f 	bic.w	r2, r3, #15
 8004eda:	498c      	ldr	r1, [pc, #560]	; (800510c <HAL_RCC_ClockConfig+0x260>)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee2:	4b8a      	ldr	r3, [pc, #552]	; (800510c <HAL_RCC_ClockConfig+0x260>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e106      	b.n	8005102 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d073      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d129      	bne.n	8004f5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f08:	4b81      	ldr	r3, [pc, #516]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0f4      	b.n	8005102 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004f18:	f000 f9d0 	bl	80052bc <RCC_GetSysClockFreqFromPLLSource>
 8004f1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	4a7c      	ldr	r2, [pc, #496]	; (8005114 <HAL_RCC_ClockConfig+0x268>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d93f      	bls.n	8004fa6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f26:	4b7a      	ldr	r3, [pc, #488]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d033      	beq.n	8004fa6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d12f      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f46:	4b72      	ldr	r3, [pc, #456]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f4e:	4a70      	ldr	r2, [pc, #448]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f56:	2380      	movs	r3, #128	; 0x80
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	e024      	b.n	8004fa6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d107      	bne.n	8004f74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f64:	4b6a      	ldr	r3, [pc, #424]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d109      	bne.n	8004f84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0c6      	b.n	8005102 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f74:	4b66      	ldr	r3, [pc, #408]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e0be      	b.n	8005102 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004f84:	f000 f8ce 	bl	8005124 <HAL_RCC_GetSysClockFreq>
 8004f88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	4a61      	ldr	r2, [pc, #388]	; (8005114 <HAL_RCC_ClockConfig+0x268>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d909      	bls.n	8004fa6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f92:	4b5f      	ldr	r3, [pc, #380]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f9a:	4a5d      	ldr	r2, [pc, #372]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004fa2:	2380      	movs	r3, #128	; 0x80
 8004fa4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fa6:	4b5a      	ldr	r3, [pc, #360]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f023 0203 	bic.w	r2, r3, #3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	4957      	ldr	r1, [pc, #348]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb8:	f7fc fcb2 	bl	8001920 <HAL_GetTick>
 8004fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc0:	f7fc fcae 	bl	8001920 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e095      	b.n	8005102 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd6:	4b4e      	ldr	r3, [pc, #312]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 020c 	and.w	r2, r3, #12
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d1eb      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d023      	beq.n	800503c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005000:	4b43      	ldr	r3, [pc, #268]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	4a42      	ldr	r2, [pc, #264]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8005006:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800500a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d007      	beq.n	8005028 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005018:	4b3d      	ldr	r3, [pc, #244]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005020:	4a3b      	ldr	r2, [pc, #236]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8005022:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005026:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005028:	4b39      	ldr	r3, [pc, #228]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	4936      	ldr	r1, [pc, #216]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8005036:	4313      	orrs	r3, r2
 8005038:	608b      	str	r3, [r1, #8]
 800503a:	e008      	b.n	800504e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2b80      	cmp	r3, #128	; 0x80
 8005040:	d105      	bne.n	800504e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005042:	4b33      	ldr	r3, [pc, #204]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	4a32      	ldr	r2, [pc, #200]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 8005048:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800504c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800504e:	4b2f      	ldr	r3, [pc, #188]	; (800510c <HAL_RCC_ClockConfig+0x260>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d21d      	bcs.n	8005098 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505c:	4b2b      	ldr	r3, [pc, #172]	; (800510c <HAL_RCC_ClockConfig+0x260>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f023 020f 	bic.w	r2, r3, #15
 8005064:	4929      	ldr	r1, [pc, #164]	; (800510c <HAL_RCC_ClockConfig+0x260>)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	4313      	orrs	r3, r2
 800506a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800506c:	f7fc fc58 	bl	8001920 <HAL_GetTick>
 8005070:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005072:	e00a      	b.n	800508a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005074:	f7fc fc54 	bl	8001920 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e03b      	b.n	8005102 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800508a:	4b20      	ldr	r3, [pc, #128]	; (800510c <HAL_RCC_ClockConfig+0x260>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	429a      	cmp	r2, r3
 8005096:	d1ed      	bne.n	8005074 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d008      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050a4:	4b1a      	ldr	r3, [pc, #104]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	4917      	ldr	r1, [pc, #92]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050c2:	4b13      	ldr	r3, [pc, #76]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	490f      	ldr	r1, [pc, #60]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050d6:	f000 f825 	bl	8005124 <HAL_RCC_GetSysClockFreq>
 80050da:	4602      	mov	r2, r0
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <HAL_RCC_ClockConfig+0x264>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	091b      	lsrs	r3, r3, #4
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	490c      	ldr	r1, [pc, #48]	; (8005118 <HAL_RCC_ClockConfig+0x26c>)
 80050e8:	5ccb      	ldrb	r3, [r1, r3]
 80050ea:	f003 031f 	and.w	r3, r3, #31
 80050ee:	fa22 f303 	lsr.w	r3, r2, r3
 80050f2:	4a0a      	ldr	r2, [pc, #40]	; (800511c <HAL_RCC_ClockConfig+0x270>)
 80050f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80050f6:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <HAL_RCC_ClockConfig+0x274>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fc f80c 	bl	8001118 <HAL_InitTick>
 8005100:	4603      	mov	r3, r0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40022000 	.word	0x40022000
 8005110:	40021000 	.word	0x40021000
 8005114:	04c4b400 	.word	0x04c4b400
 8005118:	0800c748 	.word	0x0800c748
 800511c:	20000010 	.word	0x20000010
 8005120:	2000002c 	.word	0x2000002c

08005124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800512a:	4b2c      	ldr	r3, [pc, #176]	; (80051dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 030c 	and.w	r3, r3, #12
 8005132:	2b04      	cmp	r3, #4
 8005134:	d102      	bne.n	800513c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005136:	4b2a      	ldr	r3, [pc, #168]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	e047      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800513c:	4b27      	ldr	r3, [pc, #156]	; (80051dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 030c 	and.w	r3, r3, #12
 8005144:	2b08      	cmp	r3, #8
 8005146:	d102      	bne.n	800514e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005148:	4b26      	ldr	r3, [pc, #152]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	e03e      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800514e:	4b23      	ldr	r3, [pc, #140]	; (80051dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 030c 	and.w	r3, r3, #12
 8005156:	2b0c      	cmp	r3, #12
 8005158:	d136      	bne.n	80051c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800515a:	4b20      	ldr	r3, [pc, #128]	; (80051dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005164:	4b1d      	ldr	r3, [pc, #116]	; (80051dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	3301      	adds	r3, #1
 8005170:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b03      	cmp	r3, #3
 8005176:	d10c      	bne.n	8005192 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005178:	4a1a      	ldr	r2, [pc, #104]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005180:	4a16      	ldr	r2, [pc, #88]	; (80051dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005182:	68d2      	ldr	r2, [r2, #12]
 8005184:	0a12      	lsrs	r2, r2, #8
 8005186:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800518a:	fb02 f303 	mul.w	r3, r2, r3
 800518e:	617b      	str	r3, [r7, #20]
      break;
 8005190:	e00c      	b.n	80051ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005192:	4a13      	ldr	r2, [pc, #76]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	fbb2 f3f3 	udiv	r3, r2, r3
 800519a:	4a10      	ldr	r2, [pc, #64]	; (80051dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800519c:	68d2      	ldr	r2, [r2, #12]
 800519e:	0a12      	lsrs	r2, r2, #8
 80051a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051a4:	fb02 f303 	mul.w	r3, r2, r3
 80051a8:	617b      	str	r3, [r7, #20]
      break;
 80051aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051ac:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	0e5b      	lsrs	r3, r3, #25
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	3301      	adds	r3, #1
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	e001      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80051cc:	693b      	ldr	r3, [r7, #16]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40021000 	.word	0x40021000
 80051e0:	00f42400 	.word	0x00f42400
 80051e4:	007a1200 	.word	0x007a1200

080051e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051ec:	4b03      	ldr	r3, [pc, #12]	; (80051fc <HAL_RCC_GetHCLKFreq+0x14>)
 80051ee:	681b      	ldr	r3, [r3, #0]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20000010 	.word	0x20000010

08005200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005204:	f7ff fff0 	bl	80051e8 <HAL_RCC_GetHCLKFreq>
 8005208:	4602      	mov	r2, r0
 800520a:	4b06      	ldr	r3, [pc, #24]	; (8005224 <HAL_RCC_GetPCLK1Freq+0x24>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	0a1b      	lsrs	r3, r3, #8
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	4904      	ldr	r1, [pc, #16]	; (8005228 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005216:	5ccb      	ldrb	r3, [r1, r3]
 8005218:	f003 031f 	and.w	r3, r3, #31
 800521c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005220:	4618      	mov	r0, r3
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40021000 	.word	0x40021000
 8005228:	0800c758 	.word	0x0800c758

0800522c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005230:	f7ff ffda 	bl	80051e8 <HAL_RCC_GetHCLKFreq>
 8005234:	4602      	mov	r2, r0
 8005236:	4b06      	ldr	r3, [pc, #24]	; (8005250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	0adb      	lsrs	r3, r3, #11
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	4904      	ldr	r1, [pc, #16]	; (8005254 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005242:	5ccb      	ldrb	r3, [r1, r3]
 8005244:	f003 031f 	and.w	r3, r3, #31
 8005248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800524c:	4618      	mov	r0, r3
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40021000 	.word	0x40021000
 8005254:	0800c758 	.word	0x0800c758

08005258 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	220f      	movs	r2, #15
 8005266:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005268:	4b12      	ldr	r3, [pc, #72]	; (80052b4 <HAL_RCC_GetClockConfig+0x5c>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f003 0203 	and.w	r2, r3, #3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005274:	4b0f      	ldr	r3, [pc, #60]	; (80052b4 <HAL_RCC_GetClockConfig+0x5c>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005280:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <HAL_RCC_GetClockConfig+0x5c>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800528c:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <HAL_RCC_GetClockConfig+0x5c>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	08db      	lsrs	r3, r3, #3
 8005292:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800529a:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <HAL_RCC_GetClockConfig+0x60>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 020f 	and.w	r2, r3, #15
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	601a      	str	r2, [r3, #0]
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40021000 	.word	0x40021000
 80052b8:	40022000 	.word	0x40022000

080052bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052c2:	4b1e      	ldr	r3, [pc, #120]	; (800533c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052cc:	4b1b      	ldr	r3, [pc, #108]	; (800533c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	091b      	lsrs	r3, r3, #4
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	3301      	adds	r3, #1
 80052d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d10c      	bne.n	80052fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052e0:	4a17      	ldr	r2, [pc, #92]	; (8005340 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e8:	4a14      	ldr	r2, [pc, #80]	; (800533c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052ea:	68d2      	ldr	r2, [r2, #12]
 80052ec:	0a12      	lsrs	r2, r2, #8
 80052ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052f2:	fb02 f303 	mul.w	r3, r2, r3
 80052f6:	617b      	str	r3, [r7, #20]
    break;
 80052f8:	e00c      	b.n	8005314 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052fa:	4a12      	ldr	r2, [pc, #72]	; (8005344 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005302:	4a0e      	ldr	r2, [pc, #56]	; (800533c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005304:	68d2      	ldr	r2, [r2, #12]
 8005306:	0a12      	lsrs	r2, r2, #8
 8005308:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800530c:	fb02 f303 	mul.w	r3, r2, r3
 8005310:	617b      	str	r3, [r7, #20]
    break;
 8005312:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005314:	4b09      	ldr	r3, [pc, #36]	; (800533c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	0e5b      	lsrs	r3, r3, #25
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	3301      	adds	r3, #1
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	fbb2 f3f3 	udiv	r3, r2, r3
 800532c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800532e:	687b      	ldr	r3, [r7, #4]
}
 8005330:	4618      	mov	r0, r3
 8005332:	371c      	adds	r7, #28
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	40021000 	.word	0x40021000
 8005340:	007a1200 	.word	0x007a1200
 8005344:	00f42400 	.word	0x00f42400

08005348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005350:	2300      	movs	r3, #0
 8005352:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005354:	2300      	movs	r3, #0
 8005356:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 8098 	beq.w	8005496 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005366:	2300      	movs	r3, #0
 8005368:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800536a:	4b43      	ldr	r3, [pc, #268]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800536c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10d      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005376:	4b40      	ldr	r3, [pc, #256]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537a:	4a3f      	ldr	r2, [pc, #252]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800537c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005380:	6593      	str	r3, [r2, #88]	; 0x58
 8005382:	4b3d      	ldr	r3, [pc, #244]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800538a:	60bb      	str	r3, [r7, #8]
 800538c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800538e:	2301      	movs	r3, #1
 8005390:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005392:	4b3a      	ldr	r3, [pc, #232]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a39      	ldr	r2, [pc, #228]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800539c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800539e:	f7fc fabf 	bl	8001920 <HAL_GetTick>
 80053a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053a4:	e009      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053a6:	f7fc fabb 	bl	8001920 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d902      	bls.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	74fb      	strb	r3, [r7, #19]
        break;
 80053b8:	e005      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053ba:	4b30      	ldr	r3, [pc, #192]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0ef      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80053c6:	7cfb      	ldrb	r3, [r7, #19]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d159      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053cc:	4b2a      	ldr	r3, [pc, #168]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d01e      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d019      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053e8:	4b23      	ldr	r3, [pc, #140]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053f4:	4b20      	ldr	r3, [pc, #128]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fa:	4a1f      	ldr	r2, [pc, #124]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005404:	4b1c      	ldr	r3, [pc, #112]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540a:	4a1b      	ldr	r2, [pc, #108]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800540c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005414:	4a18      	ldr	r2, [pc, #96]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d016      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005426:	f7fc fa7b 	bl	8001920 <HAL_GetTick>
 800542a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800542c:	e00b      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800542e:	f7fc fa77 	bl	8001920 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	f241 3288 	movw	r2, #5000	; 0x1388
 800543c:	4293      	cmp	r3, r2
 800543e:	d902      	bls.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	74fb      	strb	r3, [r7, #19]
            break;
 8005444:	e006      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005446:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0ec      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005454:	7cfb      	ldrb	r3, [r7, #19]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10b      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800545a:	4b07      	ldr	r3, [pc, #28]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800545c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005460:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005468:	4903      	ldr	r1, [pc, #12]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800546a:	4313      	orrs	r3, r2
 800546c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005470:	e008      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005472:	7cfb      	ldrb	r3, [r7, #19]
 8005474:	74bb      	strb	r3, [r7, #18]
 8005476:	e005      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005478:	40021000 	.word	0x40021000
 800547c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005480:	7cfb      	ldrb	r3, [r7, #19]
 8005482:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005484:	7c7b      	ldrb	r3, [r7, #17]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d105      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800548a:	4baf      	ldr	r3, [pc, #700]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800548c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548e:	4aae      	ldr	r2, [pc, #696]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005494:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054a2:	4ba9      	ldr	r3, [pc, #676]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a8:	f023 0203 	bic.w	r2, r3, #3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	49a5      	ldr	r1, [pc, #660]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054c4:	4ba0      	ldr	r3, [pc, #640]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ca:	f023 020c 	bic.w	r2, r3, #12
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	499d      	ldr	r1, [pc, #628]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054e6:	4b98      	ldr	r3, [pc, #608]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	4994      	ldr	r1, [pc, #592]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005508:	4b8f      	ldr	r3, [pc, #572]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800550a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	498c      	ldr	r1, [pc, #560]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800552a:	4b87      	ldr	r3, [pc, #540]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	4983      	ldr	r1, [pc, #524]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00a      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800554c:	4b7e      	ldr	r3, [pc, #504]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800554e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005552:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	497b      	ldr	r1, [pc, #492]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800555c:	4313      	orrs	r3, r2
 800555e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800556e:	4b76      	ldr	r3, [pc, #472]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005574:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	4972      	ldr	r1, [pc, #456]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00a      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005590:	4b6d      	ldr	r3, [pc, #436]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005596:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	496a      	ldr	r1, [pc, #424]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055b2:	4b65      	ldr	r3, [pc, #404]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	4961      	ldr	r1, [pc, #388]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00a      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055d4:	4b5c      	ldr	r3, [pc, #368]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055da:	f023 0203 	bic.w	r2, r3, #3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	4959      	ldr	r1, [pc, #356]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055f6:	4b54      	ldr	r3, [pc, #336]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	4950      	ldr	r1, [pc, #320]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005606:	4313      	orrs	r3, r2
 8005608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005614:	2b00      	cmp	r3, #0
 8005616:	d015      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005618:	4b4b      	ldr	r3, [pc, #300]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800561a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005626:	4948      	ldr	r1, [pc, #288]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005628:	4313      	orrs	r3, r2
 800562a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005636:	d105      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005638:	4b43      	ldr	r3, [pc, #268]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	4a42      	ldr	r2, [pc, #264]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800563e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005642:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800564c:	2b00      	cmp	r3, #0
 800564e:	d015      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005650:	4b3d      	ldr	r3, [pc, #244]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005656:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565e:	493a      	ldr	r1, [pc, #232]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005660:	4313      	orrs	r3, r2
 8005662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800566e:	d105      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005670:	4b35      	ldr	r3, [pc, #212]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	4a34      	ldr	r2, [pc, #208]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800567a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d015      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005688:	4b2f      	ldr	r3, [pc, #188]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800568a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	492c      	ldr	r1, [pc, #176]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005698:	4313      	orrs	r3, r2
 800569a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056a6:	d105      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056a8:	4b27      	ldr	r3, [pc, #156]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	4a26      	ldr	r2, [pc, #152]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d015      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056c0:	4b21      	ldr	r3, [pc, #132]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ce:	491e      	ldr	r1, [pc, #120]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056de:	d105      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056e0:	4b19      	ldr	r3, [pc, #100]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	4a18      	ldr	r2, [pc, #96]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d015      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056f8:	4b13      	ldr	r3, [pc, #76]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	4910      	ldr	r1, [pc, #64]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005716:	d105      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005718:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	4a0a      	ldr	r2, [pc, #40]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800571e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005722:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d018      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005730:	4b05      	ldr	r3, [pc, #20]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005736:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573e:	4902      	ldr	r1, [pc, #8]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005746:	e001      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005748:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005750:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005754:	d105      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005756:	4b21      	ldr	r3, [pc, #132]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	4a20      	ldr	r2, [pc, #128]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800575c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005760:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d015      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800576e:	4b1b      	ldr	r3, [pc, #108]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005774:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800577c:	4917      	ldr	r1, [pc, #92]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800577e:	4313      	orrs	r3, r2
 8005780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578c:	d105      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800578e:	4b13      	ldr	r3, [pc, #76]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	4a12      	ldr	r2, [pc, #72]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005798:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d015      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80057a6:	4b0d      	ldr	r3, [pc, #52]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b4:	4909      	ldr	r1, [pc, #36]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057c4:	d105      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057c6:	4b05      	ldr	r3, [pc, #20]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	4a04      	ldr	r2, [pc, #16]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057d0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80057d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	40021000 	.word	0x40021000

080057e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e049      	b.n	8005886 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7fb fdc0 	bl	800138c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3304      	adds	r3, #4
 800581c:	4619      	mov	r1, r3
 800581e:	4610      	mov	r0, r2
 8005820:	f000 fbd8 	bl	8005fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d001      	beq.n	80058a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e04c      	b.n	8005942 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a26      	ldr	r2, [pc, #152]	; (8005950 <HAL_TIM_Base_Start+0xc0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d022      	beq.n	8005900 <HAL_TIM_Base_Start+0x70>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c2:	d01d      	beq.n	8005900 <HAL_TIM_Base_Start+0x70>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a22      	ldr	r2, [pc, #136]	; (8005954 <HAL_TIM_Base_Start+0xc4>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d018      	beq.n	8005900 <HAL_TIM_Base_Start+0x70>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a21      	ldr	r2, [pc, #132]	; (8005958 <HAL_TIM_Base_Start+0xc8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d013      	beq.n	8005900 <HAL_TIM_Base_Start+0x70>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1f      	ldr	r2, [pc, #124]	; (800595c <HAL_TIM_Base_Start+0xcc>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00e      	beq.n	8005900 <HAL_TIM_Base_Start+0x70>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a1e      	ldr	r2, [pc, #120]	; (8005960 <HAL_TIM_Base_Start+0xd0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d009      	beq.n	8005900 <HAL_TIM_Base_Start+0x70>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1c      	ldr	r2, [pc, #112]	; (8005964 <HAL_TIM_Base_Start+0xd4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d004      	beq.n	8005900 <HAL_TIM_Base_Start+0x70>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1b      	ldr	r2, [pc, #108]	; (8005968 <HAL_TIM_Base_Start+0xd8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d115      	bne.n	800592c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	4b19      	ldr	r3, [pc, #100]	; (800596c <HAL_TIM_Base_Start+0xdc>)
 8005908:	4013      	ands	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2b06      	cmp	r3, #6
 8005910:	d015      	beq.n	800593e <HAL_TIM_Base_Start+0xae>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005918:	d011      	beq.n	800593e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f042 0201 	orr.w	r2, r2, #1
 8005928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800592a:	e008      	b.n	800593e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0201 	orr.w	r2, r2, #1
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	e000      	b.n	8005940 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40012c00 	.word	0x40012c00
 8005954:	40000400 	.word	0x40000400
 8005958:	40000800 	.word	0x40000800
 800595c:	40000c00 	.word	0x40000c00
 8005960:	40013400 	.word	0x40013400
 8005964:	40014000 	.word	0x40014000
 8005968:	40015000 	.word	0x40015000
 800596c:	00010007 	.word	0x00010007

08005970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b01      	cmp	r3, #1
 8005982:	d001      	beq.n	8005988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e054      	b.n	8005a32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0201 	orr.w	r2, r2, #1
 800599e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a26      	ldr	r2, [pc, #152]	; (8005a40 <HAL_TIM_Base_Start_IT+0xd0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d022      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b2:	d01d      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a22      	ldr	r2, [pc, #136]	; (8005a44 <HAL_TIM_Base_Start_IT+0xd4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d018      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a21      	ldr	r2, [pc, #132]	; (8005a48 <HAL_TIM_Base_Start_IT+0xd8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d013      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a1f      	ldr	r2, [pc, #124]	; (8005a4c <HAL_TIM_Base_Start_IT+0xdc>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00e      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a1e      	ldr	r2, [pc, #120]	; (8005a50 <HAL_TIM_Base_Start_IT+0xe0>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d009      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a1c      	ldr	r2, [pc, #112]	; (8005a54 <HAL_TIM_Base_Start_IT+0xe4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d004      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x80>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1b      	ldr	r2, [pc, #108]	; (8005a58 <HAL_TIM_Base_Start_IT+0xe8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d115      	bne.n	8005a1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	4b19      	ldr	r3, [pc, #100]	; (8005a5c <HAL_TIM_Base_Start_IT+0xec>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b06      	cmp	r3, #6
 8005a00:	d015      	beq.n	8005a2e <HAL_TIM_Base_Start_IT+0xbe>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a08:	d011      	beq.n	8005a2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0201 	orr.w	r2, r2, #1
 8005a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a1a:	e008      	b.n	8005a2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0201 	orr.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	e000      	b.n	8005a30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40012c00 	.word	0x40012c00
 8005a44:	40000400 	.word	0x40000400
 8005a48:	40000800 	.word	0x40000800
 8005a4c:	40000c00 	.word	0x40000c00
 8005a50:	40013400 	.word	0x40013400
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40015000 	.word	0x40015000
 8005a5c:	00010007 	.word	0x00010007

08005a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d122      	bne.n	8005abc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d11b      	bne.n	8005abc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0202 	mvn.w	r2, #2
 8005a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fa78 	bl	8005f98 <HAL_TIM_IC_CaptureCallback>
 8005aa8:	e005      	b.n	8005ab6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fa6a 	bl	8005f84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fa7b 	bl	8005fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d122      	bne.n	8005b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d11b      	bne.n	8005b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0204 	mvn.w	r2, #4
 8005ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fa4e 	bl	8005f98 <HAL_TIM_IC_CaptureCallback>
 8005afc:	e005      	b.n	8005b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fa40 	bl	8005f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fa51 	bl	8005fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	2b08      	cmp	r3, #8
 8005b1c:	d122      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d11b      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0208 	mvn.w	r2, #8
 8005b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2204      	movs	r2, #4
 8005b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fa24 	bl	8005f98 <HAL_TIM_IC_CaptureCallback>
 8005b50:	e005      	b.n	8005b5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fa16 	bl	8005f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fa27 	bl	8005fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f003 0310 	and.w	r3, r3, #16
 8005b6e:	2b10      	cmp	r3, #16
 8005b70:	d122      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 0310 	and.w	r3, r3, #16
 8005b7c:	2b10      	cmp	r3, #16
 8005b7e:	d11b      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0210 	mvn.w	r2, #16
 8005b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2208      	movs	r2, #8
 8005b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f9fa 	bl	8005f98 <HAL_TIM_IC_CaptureCallback>
 8005ba4:	e005      	b.n	8005bb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f9ec 	bl	8005f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f9fd 	bl	8005fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d10e      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d107      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0201 	mvn.w	r2, #1
 8005bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7fb fa58 	bl	8001094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bee:	2b80      	cmp	r3, #128	; 0x80
 8005bf0:	d10e      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfc:	2b80      	cmp	r3, #128	; 0x80
 8005bfe:	d107      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fbc6 	bl	800639c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c1e:	d10e      	bne.n	8005c3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2a:	2b80      	cmp	r3, #128	; 0x80
 8005c2c:	d107      	bne.n	8005c3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fbb9 	bl	80063b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c48:	2b40      	cmp	r3, #64	; 0x40
 8005c4a:	d10e      	bne.n	8005c6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c56:	2b40      	cmp	r3, #64	; 0x40
 8005c58:	d107      	bne.n	8005c6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f9ab 	bl	8005fc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f003 0320 	and.w	r3, r3, #32
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	d10e      	bne.n	8005c96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f003 0320 	and.w	r3, r3, #32
 8005c82:	2b20      	cmp	r3, #32
 8005c84:	d107      	bne.n	8005c96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f06f 0220 	mvn.w	r2, #32
 8005c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fb79 	bl	8006388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ca0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ca4:	d10f      	bne.n	8005cc6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cb4:	d107      	bne.n	8005cc6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fb7f 	bl	80063c4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cd4:	d10f      	bne.n	8005cf6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ce0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ce4:	d107      	bne.n	8005cf6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fb71 	bl	80063d8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d04:	d10f      	bne.n	8005d26 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d14:	d107      	bne.n	8005d26 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fb63 	bl	80063ec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d34:	d10f      	bne.n	8005d56 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d44:	d107      	bne.n	8005d56 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fb55 	bl	8006400 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d56:	bf00      	nop
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_TIM_ConfigClockSource+0x18>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e0f5      	b.n	8005f64 <HAL_TIM_ConfigClockSource+0x204>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005d96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005da2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a6e      	ldr	r2, [pc, #440]	; (8005f6c <HAL_TIM_ConfigClockSource+0x20c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	f000 80c1 	beq.w	8005f3a <HAL_TIM_ConfigClockSource+0x1da>
 8005db8:	4a6c      	ldr	r2, [pc, #432]	; (8005f6c <HAL_TIM_ConfigClockSource+0x20c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	f200 80c6 	bhi.w	8005f4c <HAL_TIM_ConfigClockSource+0x1ec>
 8005dc0:	4a6b      	ldr	r2, [pc, #428]	; (8005f70 <HAL_TIM_ConfigClockSource+0x210>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	f000 80b9 	beq.w	8005f3a <HAL_TIM_ConfigClockSource+0x1da>
 8005dc8:	4a69      	ldr	r2, [pc, #420]	; (8005f70 <HAL_TIM_ConfigClockSource+0x210>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	f200 80be 	bhi.w	8005f4c <HAL_TIM_ConfigClockSource+0x1ec>
 8005dd0:	4a68      	ldr	r2, [pc, #416]	; (8005f74 <HAL_TIM_ConfigClockSource+0x214>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	f000 80b1 	beq.w	8005f3a <HAL_TIM_ConfigClockSource+0x1da>
 8005dd8:	4a66      	ldr	r2, [pc, #408]	; (8005f74 <HAL_TIM_ConfigClockSource+0x214>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	f200 80b6 	bhi.w	8005f4c <HAL_TIM_ConfigClockSource+0x1ec>
 8005de0:	4a65      	ldr	r2, [pc, #404]	; (8005f78 <HAL_TIM_ConfigClockSource+0x218>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	f000 80a9 	beq.w	8005f3a <HAL_TIM_ConfigClockSource+0x1da>
 8005de8:	4a63      	ldr	r2, [pc, #396]	; (8005f78 <HAL_TIM_ConfigClockSource+0x218>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	f200 80ae 	bhi.w	8005f4c <HAL_TIM_ConfigClockSource+0x1ec>
 8005df0:	4a62      	ldr	r2, [pc, #392]	; (8005f7c <HAL_TIM_ConfigClockSource+0x21c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	f000 80a1 	beq.w	8005f3a <HAL_TIM_ConfigClockSource+0x1da>
 8005df8:	4a60      	ldr	r2, [pc, #384]	; (8005f7c <HAL_TIM_ConfigClockSource+0x21c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	f200 80a6 	bhi.w	8005f4c <HAL_TIM_ConfigClockSource+0x1ec>
 8005e00:	4a5f      	ldr	r2, [pc, #380]	; (8005f80 <HAL_TIM_ConfigClockSource+0x220>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	f000 8099 	beq.w	8005f3a <HAL_TIM_ConfigClockSource+0x1da>
 8005e08:	4a5d      	ldr	r2, [pc, #372]	; (8005f80 <HAL_TIM_ConfigClockSource+0x220>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	f200 809e 	bhi.w	8005f4c <HAL_TIM_ConfigClockSource+0x1ec>
 8005e10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005e14:	f000 8091 	beq.w	8005f3a <HAL_TIM_ConfigClockSource+0x1da>
 8005e18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005e1c:	f200 8096 	bhi.w	8005f4c <HAL_TIM_ConfigClockSource+0x1ec>
 8005e20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e24:	f000 8089 	beq.w	8005f3a <HAL_TIM_ConfigClockSource+0x1da>
 8005e28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e2c:	f200 808e 	bhi.w	8005f4c <HAL_TIM_ConfigClockSource+0x1ec>
 8005e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e34:	d03e      	beq.n	8005eb4 <HAL_TIM_ConfigClockSource+0x154>
 8005e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e3a:	f200 8087 	bhi.w	8005f4c <HAL_TIM_ConfigClockSource+0x1ec>
 8005e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e42:	f000 8085 	beq.w	8005f50 <HAL_TIM_ConfigClockSource+0x1f0>
 8005e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e4a:	d87f      	bhi.n	8005f4c <HAL_TIM_ConfigClockSource+0x1ec>
 8005e4c:	2b70      	cmp	r3, #112	; 0x70
 8005e4e:	d01a      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x126>
 8005e50:	2b70      	cmp	r3, #112	; 0x70
 8005e52:	d87b      	bhi.n	8005f4c <HAL_TIM_ConfigClockSource+0x1ec>
 8005e54:	2b60      	cmp	r3, #96	; 0x60
 8005e56:	d050      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0x19a>
 8005e58:	2b60      	cmp	r3, #96	; 0x60
 8005e5a:	d877      	bhi.n	8005f4c <HAL_TIM_ConfigClockSource+0x1ec>
 8005e5c:	2b50      	cmp	r3, #80	; 0x50
 8005e5e:	d03c      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0x17a>
 8005e60:	2b50      	cmp	r3, #80	; 0x50
 8005e62:	d873      	bhi.n	8005f4c <HAL_TIM_ConfigClockSource+0x1ec>
 8005e64:	2b40      	cmp	r3, #64	; 0x40
 8005e66:	d058      	beq.n	8005f1a <HAL_TIM_ConfigClockSource+0x1ba>
 8005e68:	2b40      	cmp	r3, #64	; 0x40
 8005e6a:	d86f      	bhi.n	8005f4c <HAL_TIM_ConfigClockSource+0x1ec>
 8005e6c:	2b30      	cmp	r3, #48	; 0x30
 8005e6e:	d064      	beq.n	8005f3a <HAL_TIM_ConfigClockSource+0x1da>
 8005e70:	2b30      	cmp	r3, #48	; 0x30
 8005e72:	d86b      	bhi.n	8005f4c <HAL_TIM_ConfigClockSource+0x1ec>
 8005e74:	2b20      	cmp	r3, #32
 8005e76:	d060      	beq.n	8005f3a <HAL_TIM_ConfigClockSource+0x1da>
 8005e78:	2b20      	cmp	r3, #32
 8005e7a:	d867      	bhi.n	8005f4c <HAL_TIM_ConfigClockSource+0x1ec>
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d05c      	beq.n	8005f3a <HAL_TIM_ConfigClockSource+0x1da>
 8005e80:	2b10      	cmp	r3, #16
 8005e82:	d05a      	beq.n	8005f3a <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005e84:	e062      	b.n	8005f4c <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6818      	ldr	r0, [r3, #0]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	6899      	ldr	r1, [r3, #8]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f000 f9c1 	bl	800621c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ea8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	609a      	str	r2, [r3, #8]
      break;
 8005eb2:	e04e      	b.n	8005f52 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	6899      	ldr	r1, [r3, #8]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f000 f9aa 	bl	800621c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ed6:	609a      	str	r2, [r3, #8]
      break;
 8005ed8:	e03b      	b.n	8005f52 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6818      	ldr	r0, [r3, #0]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6859      	ldr	r1, [r3, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f000 f91c 	bl	8006124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2150      	movs	r1, #80	; 0x50
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 f975 	bl	80061e2 <TIM_ITRx_SetConfig>
      break;
 8005ef8:	e02b      	b.n	8005f52 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6818      	ldr	r0, [r3, #0]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	6859      	ldr	r1, [r3, #4]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	461a      	mov	r2, r3
 8005f08:	f000 f93b 	bl	8006182 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2160      	movs	r1, #96	; 0x60
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 f965 	bl	80061e2 <TIM_ITRx_SetConfig>
      break;
 8005f18:	e01b      	b.n	8005f52 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6818      	ldr	r0, [r3, #0]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	6859      	ldr	r1, [r3, #4]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	461a      	mov	r2, r3
 8005f28:	f000 f8fc 	bl	8006124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2140      	movs	r1, #64	; 0x40
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 f955 	bl	80061e2 <TIM_ITRx_SetConfig>
      break;
 8005f38:	e00b      	b.n	8005f52 <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4619      	mov	r1, r3
 8005f44:	4610      	mov	r0, r2
 8005f46:	f000 f94c 	bl	80061e2 <TIM_ITRx_SetConfig>
        break;
 8005f4a:	e002      	b.n	8005f52 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8005f4c:	bf00      	nop
 8005f4e:	e000      	b.n	8005f52 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8005f50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	00100070 	.word	0x00100070
 8005f70:	00100060 	.word	0x00100060
 8005f74:	00100050 	.word	0x00100050
 8005f78:	00100040 	.word	0x00100040
 8005f7c:	00100030 	.word	0x00100030
 8005f80:	00100020 	.word	0x00100020

08005f84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a46      	ldr	r2, [pc, #280]	; (8006100 <TIM_Base_SetConfig+0x12c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d017      	beq.n	800601c <TIM_Base_SetConfig+0x48>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff2:	d013      	beq.n	800601c <TIM_Base_SetConfig+0x48>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a43      	ldr	r2, [pc, #268]	; (8006104 <TIM_Base_SetConfig+0x130>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d00f      	beq.n	800601c <TIM_Base_SetConfig+0x48>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a42      	ldr	r2, [pc, #264]	; (8006108 <TIM_Base_SetConfig+0x134>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d00b      	beq.n	800601c <TIM_Base_SetConfig+0x48>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a41      	ldr	r2, [pc, #260]	; (800610c <TIM_Base_SetConfig+0x138>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d007      	beq.n	800601c <TIM_Base_SetConfig+0x48>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a40      	ldr	r2, [pc, #256]	; (8006110 <TIM_Base_SetConfig+0x13c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d003      	beq.n	800601c <TIM_Base_SetConfig+0x48>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a3f      	ldr	r2, [pc, #252]	; (8006114 <TIM_Base_SetConfig+0x140>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d108      	bne.n	800602e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a33      	ldr	r2, [pc, #204]	; (8006100 <TIM_Base_SetConfig+0x12c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d023      	beq.n	800607e <TIM_Base_SetConfig+0xaa>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603c:	d01f      	beq.n	800607e <TIM_Base_SetConfig+0xaa>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a30      	ldr	r2, [pc, #192]	; (8006104 <TIM_Base_SetConfig+0x130>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d01b      	beq.n	800607e <TIM_Base_SetConfig+0xaa>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a2f      	ldr	r2, [pc, #188]	; (8006108 <TIM_Base_SetConfig+0x134>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d017      	beq.n	800607e <TIM_Base_SetConfig+0xaa>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a2e      	ldr	r2, [pc, #184]	; (800610c <TIM_Base_SetConfig+0x138>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d013      	beq.n	800607e <TIM_Base_SetConfig+0xaa>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a2d      	ldr	r2, [pc, #180]	; (8006110 <TIM_Base_SetConfig+0x13c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00f      	beq.n	800607e <TIM_Base_SetConfig+0xaa>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a2d      	ldr	r2, [pc, #180]	; (8006118 <TIM_Base_SetConfig+0x144>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00b      	beq.n	800607e <TIM_Base_SetConfig+0xaa>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a2c      	ldr	r2, [pc, #176]	; (800611c <TIM_Base_SetConfig+0x148>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d007      	beq.n	800607e <TIM_Base_SetConfig+0xaa>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a2b      	ldr	r2, [pc, #172]	; (8006120 <TIM_Base_SetConfig+0x14c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d003      	beq.n	800607e <TIM_Base_SetConfig+0xaa>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a26      	ldr	r2, [pc, #152]	; (8006114 <TIM_Base_SetConfig+0x140>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d108      	bne.n	8006090 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	4313      	orrs	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a12      	ldr	r2, [pc, #72]	; (8006100 <TIM_Base_SetConfig+0x12c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d013      	beq.n	80060e4 <TIM_Base_SetConfig+0x110>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a14      	ldr	r2, [pc, #80]	; (8006110 <TIM_Base_SetConfig+0x13c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00f      	beq.n	80060e4 <TIM_Base_SetConfig+0x110>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a14      	ldr	r2, [pc, #80]	; (8006118 <TIM_Base_SetConfig+0x144>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00b      	beq.n	80060e4 <TIM_Base_SetConfig+0x110>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a13      	ldr	r2, [pc, #76]	; (800611c <TIM_Base_SetConfig+0x148>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d007      	beq.n	80060e4 <TIM_Base_SetConfig+0x110>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a12      	ldr	r2, [pc, #72]	; (8006120 <TIM_Base_SetConfig+0x14c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d003      	beq.n	80060e4 <TIM_Base_SetConfig+0x110>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a0d      	ldr	r2, [pc, #52]	; (8006114 <TIM_Base_SetConfig+0x140>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d103      	bne.n	80060ec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	691a      	ldr	r2, [r3, #16]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	615a      	str	r2, [r3, #20]
}
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	40012c00 	.word	0x40012c00
 8006104:	40000400 	.word	0x40000400
 8006108:	40000800 	.word	0x40000800
 800610c:	40000c00 	.word	0x40000c00
 8006110:	40013400 	.word	0x40013400
 8006114:	40015000 	.word	0x40015000
 8006118:	40014000 	.word	0x40014000
 800611c:	40014400 	.word	0x40014400
 8006120:	40014800 	.word	0x40014800

08006124 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f023 0201 	bic.w	r2, r3, #1
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800614e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	4313      	orrs	r3, r2
 8006158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f023 030a 	bic.w	r3, r3, #10
 8006160:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	4313      	orrs	r3, r2
 8006168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	621a      	str	r2, [r3, #32]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006182:	b480      	push	{r7}
 8006184:	b087      	sub	sp, #28
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	f023 0210 	bic.w	r2, r3, #16
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	031b      	lsls	r3, r3, #12
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	621a      	str	r2, [r3, #32]
}
 80061d6:	bf00      	nop
 80061d8:	371c      	adds	r7, #28
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b085      	sub	sp, #20
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80061f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	f043 0307 	orr.w	r3, r3, #7
 8006208:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	609a      	str	r2, [r3, #8]
}
 8006210:	bf00      	nop
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006236:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	021a      	lsls	r2, r3, #8
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	431a      	orrs	r2, r3
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4313      	orrs	r3, r2
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	4313      	orrs	r3, r2
 8006248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	609a      	str	r2, [r3, #8]
}
 8006250:	bf00      	nop
 8006252:	371c      	adds	r7, #28
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800626c:	2b01      	cmp	r3, #1
 800626e:	d101      	bne.n	8006274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006270:	2302      	movs	r3, #2
 8006272:	e074      	b.n	800635e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a34      	ldr	r2, [pc, #208]	; (800636c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d009      	beq.n	80062b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a33      	ldr	r2, [pc, #204]	; (8006370 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d004      	beq.n	80062b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a31      	ldr	r2, [pc, #196]	; (8006374 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d108      	bne.n	80062c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80062ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a21      	ldr	r2, [pc, #132]	; (800636c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d022      	beq.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f4:	d01d      	beq.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a1f      	ldr	r2, [pc, #124]	; (8006378 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d018      	beq.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a1d      	ldr	r2, [pc, #116]	; (800637c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d013      	beq.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a1c      	ldr	r2, [pc, #112]	; (8006380 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d00e      	beq.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a15      	ldr	r2, [pc, #84]	; (8006370 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d009      	beq.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a18      	ldr	r2, [pc, #96]	; (8006384 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d004      	beq.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a11      	ldr	r2, [pc, #68]	; (8006374 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d10c      	bne.n	800634c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	4313      	orrs	r3, r2
 8006342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	40012c00 	.word	0x40012c00
 8006370:	40013400 	.word	0x40013400
 8006374:	40015000 	.word	0x40015000
 8006378:	40000400 	.word	0x40000400
 800637c:	40000800 	.word	0x40000800
 8006380:	40000c00 	.word	0x40000c00
 8006384:	40014000 	.word	0x40014000

08006388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e042      	b.n	80064ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800642c:	2b00      	cmp	r3, #0
 800642e:	d106      	bne.n	800643e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7fb f811 	bl	8001460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2224      	movs	r2, #36	; 0x24
 8006442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0201 	bic.w	r2, r2, #1
 8006454:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f892 	bl	8006580 <UART_SetConfig>
 800645c:	4603      	mov	r3, r0
 800645e:	2b01      	cmp	r3, #1
 8006460:	d101      	bne.n	8006466 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e022      	b.n	80064ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fb50 	bl	8006b14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006482:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689a      	ldr	r2, [r3, #8]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006492:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0201 	orr.w	r2, r2, #1
 80064a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fbd7 	bl	8006c58 <UART_CheckIdleState>
 80064aa:	4603      	mov	r3, r0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	4613      	mov	r3, r2
 80064c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c8:	2b20      	cmp	r3, #32
 80064ca:	d131      	bne.n	8006530 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <HAL_UART_Receive_DMA+0x24>
 80064d2:	88fb      	ldrh	r3, [r7, #6]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e02a      	b.n	8006532 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d101      	bne.n	80064ea <HAL_UART_Receive_DMA+0x36>
 80064e6:	2302      	movs	r3, #2
 80064e8:	e023      	b.n	8006532 <HAL_UART_Receive_DMA+0x7e>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a0f      	ldr	r2, [pc, #60]	; (800653c <HAL_UART_Receive_DMA+0x88>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00e      	beq.n	8006520 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d007      	beq.n	8006520 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800651e:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006520:	88fb      	ldrh	r3, [r7, #6]
 8006522:	461a      	mov	r2, r3
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 fc62 	bl	8006df0 <UART_Start_Receive_DMA>
 800652c:	4603      	mov	r3, r0
 800652e:	e000      	b.n	8006532 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006530:	2302      	movs	r3, #2
  }
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	40008000 	.word	0x40008000

08006540 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	460b      	mov	r3, r1
 8006572:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006580:	b5b0      	push	{r4, r5, r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	4bb1      	ldr	r3, [pc, #708]	; (8006870 <UART_SetConfig+0x2f0>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6812      	ldr	r2, [r2, #0]
 80065b2:	69f9      	ldr	r1, [r7, #28]
 80065b4:	430b      	orrs	r3, r1
 80065b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4aa6      	ldr	r2, [pc, #664]	; (8006874 <UART_SetConfig+0x2f4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d004      	beq.n	80065e8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80065f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6812      	ldr	r2, [r2, #0]
 80065fa:	69f9      	ldr	r1, [r7, #28]
 80065fc:	430b      	orrs	r3, r1
 80065fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006606:	f023 010f 	bic.w	r1, r3, #15
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a97      	ldr	r2, [pc, #604]	; (8006878 <UART_SetConfig+0x2f8>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d120      	bne.n	8006662 <UART_SetConfig+0xe2>
 8006620:	4b96      	ldr	r3, [pc, #600]	; (800687c <UART_SetConfig+0x2fc>)
 8006622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006626:	f003 0303 	and.w	r3, r3, #3
 800662a:	2b03      	cmp	r3, #3
 800662c:	d816      	bhi.n	800665c <UART_SetConfig+0xdc>
 800662e:	a201      	add	r2, pc, #4	; (adr r2, 8006634 <UART_SetConfig+0xb4>)
 8006630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006634:	08006645 	.word	0x08006645
 8006638:	08006651 	.word	0x08006651
 800663c:	0800664b 	.word	0x0800664b
 8006640:	08006657 	.word	0x08006657
 8006644:	2301      	movs	r3, #1
 8006646:	76fb      	strb	r3, [r7, #27]
 8006648:	e0e7      	b.n	800681a <UART_SetConfig+0x29a>
 800664a:	2302      	movs	r3, #2
 800664c:	76fb      	strb	r3, [r7, #27]
 800664e:	e0e4      	b.n	800681a <UART_SetConfig+0x29a>
 8006650:	2304      	movs	r3, #4
 8006652:	76fb      	strb	r3, [r7, #27]
 8006654:	e0e1      	b.n	800681a <UART_SetConfig+0x29a>
 8006656:	2308      	movs	r3, #8
 8006658:	76fb      	strb	r3, [r7, #27]
 800665a:	e0de      	b.n	800681a <UART_SetConfig+0x29a>
 800665c:	2310      	movs	r3, #16
 800665e:	76fb      	strb	r3, [r7, #27]
 8006660:	e0db      	b.n	800681a <UART_SetConfig+0x29a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a86      	ldr	r2, [pc, #536]	; (8006880 <UART_SetConfig+0x300>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d132      	bne.n	80066d2 <UART_SetConfig+0x152>
 800666c:	4b83      	ldr	r3, [pc, #524]	; (800687c <UART_SetConfig+0x2fc>)
 800666e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006672:	f003 030c 	and.w	r3, r3, #12
 8006676:	2b0c      	cmp	r3, #12
 8006678:	d828      	bhi.n	80066cc <UART_SetConfig+0x14c>
 800667a:	a201      	add	r2, pc, #4	; (adr r2, 8006680 <UART_SetConfig+0x100>)
 800667c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006680:	080066b5 	.word	0x080066b5
 8006684:	080066cd 	.word	0x080066cd
 8006688:	080066cd 	.word	0x080066cd
 800668c:	080066cd 	.word	0x080066cd
 8006690:	080066c1 	.word	0x080066c1
 8006694:	080066cd 	.word	0x080066cd
 8006698:	080066cd 	.word	0x080066cd
 800669c:	080066cd 	.word	0x080066cd
 80066a0:	080066bb 	.word	0x080066bb
 80066a4:	080066cd 	.word	0x080066cd
 80066a8:	080066cd 	.word	0x080066cd
 80066ac:	080066cd 	.word	0x080066cd
 80066b0:	080066c7 	.word	0x080066c7
 80066b4:	2300      	movs	r3, #0
 80066b6:	76fb      	strb	r3, [r7, #27]
 80066b8:	e0af      	b.n	800681a <UART_SetConfig+0x29a>
 80066ba:	2302      	movs	r3, #2
 80066bc:	76fb      	strb	r3, [r7, #27]
 80066be:	e0ac      	b.n	800681a <UART_SetConfig+0x29a>
 80066c0:	2304      	movs	r3, #4
 80066c2:	76fb      	strb	r3, [r7, #27]
 80066c4:	e0a9      	b.n	800681a <UART_SetConfig+0x29a>
 80066c6:	2308      	movs	r3, #8
 80066c8:	76fb      	strb	r3, [r7, #27]
 80066ca:	e0a6      	b.n	800681a <UART_SetConfig+0x29a>
 80066cc:	2310      	movs	r3, #16
 80066ce:	76fb      	strb	r3, [r7, #27]
 80066d0:	e0a3      	b.n	800681a <UART_SetConfig+0x29a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a6b      	ldr	r2, [pc, #428]	; (8006884 <UART_SetConfig+0x304>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d120      	bne.n	800671e <UART_SetConfig+0x19e>
 80066dc:	4b67      	ldr	r3, [pc, #412]	; (800687c <UART_SetConfig+0x2fc>)
 80066de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066e6:	2b30      	cmp	r3, #48	; 0x30
 80066e8:	d013      	beq.n	8006712 <UART_SetConfig+0x192>
 80066ea:	2b30      	cmp	r3, #48	; 0x30
 80066ec:	d814      	bhi.n	8006718 <UART_SetConfig+0x198>
 80066ee:	2b20      	cmp	r3, #32
 80066f0:	d009      	beq.n	8006706 <UART_SetConfig+0x186>
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d810      	bhi.n	8006718 <UART_SetConfig+0x198>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <UART_SetConfig+0x180>
 80066fa:	2b10      	cmp	r3, #16
 80066fc:	d006      	beq.n	800670c <UART_SetConfig+0x18c>
 80066fe:	e00b      	b.n	8006718 <UART_SetConfig+0x198>
 8006700:	2300      	movs	r3, #0
 8006702:	76fb      	strb	r3, [r7, #27]
 8006704:	e089      	b.n	800681a <UART_SetConfig+0x29a>
 8006706:	2302      	movs	r3, #2
 8006708:	76fb      	strb	r3, [r7, #27]
 800670a:	e086      	b.n	800681a <UART_SetConfig+0x29a>
 800670c:	2304      	movs	r3, #4
 800670e:	76fb      	strb	r3, [r7, #27]
 8006710:	e083      	b.n	800681a <UART_SetConfig+0x29a>
 8006712:	2308      	movs	r3, #8
 8006714:	76fb      	strb	r3, [r7, #27]
 8006716:	e080      	b.n	800681a <UART_SetConfig+0x29a>
 8006718:	2310      	movs	r3, #16
 800671a:	76fb      	strb	r3, [r7, #27]
 800671c:	e07d      	b.n	800681a <UART_SetConfig+0x29a>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a59      	ldr	r2, [pc, #356]	; (8006888 <UART_SetConfig+0x308>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d120      	bne.n	800676a <UART_SetConfig+0x1ea>
 8006728:	4b54      	ldr	r3, [pc, #336]	; (800687c <UART_SetConfig+0x2fc>)
 800672a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800672e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006732:	2bc0      	cmp	r3, #192	; 0xc0
 8006734:	d013      	beq.n	800675e <UART_SetConfig+0x1de>
 8006736:	2bc0      	cmp	r3, #192	; 0xc0
 8006738:	d814      	bhi.n	8006764 <UART_SetConfig+0x1e4>
 800673a:	2b80      	cmp	r3, #128	; 0x80
 800673c:	d009      	beq.n	8006752 <UART_SetConfig+0x1d2>
 800673e:	2b80      	cmp	r3, #128	; 0x80
 8006740:	d810      	bhi.n	8006764 <UART_SetConfig+0x1e4>
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <UART_SetConfig+0x1cc>
 8006746:	2b40      	cmp	r3, #64	; 0x40
 8006748:	d006      	beq.n	8006758 <UART_SetConfig+0x1d8>
 800674a:	e00b      	b.n	8006764 <UART_SetConfig+0x1e4>
 800674c:	2300      	movs	r3, #0
 800674e:	76fb      	strb	r3, [r7, #27]
 8006750:	e063      	b.n	800681a <UART_SetConfig+0x29a>
 8006752:	2302      	movs	r3, #2
 8006754:	76fb      	strb	r3, [r7, #27]
 8006756:	e060      	b.n	800681a <UART_SetConfig+0x29a>
 8006758:	2304      	movs	r3, #4
 800675a:	76fb      	strb	r3, [r7, #27]
 800675c:	e05d      	b.n	800681a <UART_SetConfig+0x29a>
 800675e:	2308      	movs	r3, #8
 8006760:	76fb      	strb	r3, [r7, #27]
 8006762:	e05a      	b.n	800681a <UART_SetConfig+0x29a>
 8006764:	2310      	movs	r3, #16
 8006766:	76fb      	strb	r3, [r7, #27]
 8006768:	e057      	b.n	800681a <UART_SetConfig+0x29a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a47      	ldr	r2, [pc, #284]	; (800688c <UART_SetConfig+0x30c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d125      	bne.n	80067c0 <UART_SetConfig+0x240>
 8006774:	4b41      	ldr	r3, [pc, #260]	; (800687c <UART_SetConfig+0x2fc>)
 8006776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800677e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006782:	d017      	beq.n	80067b4 <UART_SetConfig+0x234>
 8006784:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006788:	d817      	bhi.n	80067ba <UART_SetConfig+0x23a>
 800678a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800678e:	d00b      	beq.n	80067a8 <UART_SetConfig+0x228>
 8006790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006794:	d811      	bhi.n	80067ba <UART_SetConfig+0x23a>
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <UART_SetConfig+0x222>
 800679a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800679e:	d006      	beq.n	80067ae <UART_SetConfig+0x22e>
 80067a0:	e00b      	b.n	80067ba <UART_SetConfig+0x23a>
 80067a2:	2300      	movs	r3, #0
 80067a4:	76fb      	strb	r3, [r7, #27]
 80067a6:	e038      	b.n	800681a <UART_SetConfig+0x29a>
 80067a8:	2302      	movs	r3, #2
 80067aa:	76fb      	strb	r3, [r7, #27]
 80067ac:	e035      	b.n	800681a <UART_SetConfig+0x29a>
 80067ae:	2304      	movs	r3, #4
 80067b0:	76fb      	strb	r3, [r7, #27]
 80067b2:	e032      	b.n	800681a <UART_SetConfig+0x29a>
 80067b4:	2308      	movs	r3, #8
 80067b6:	76fb      	strb	r3, [r7, #27]
 80067b8:	e02f      	b.n	800681a <UART_SetConfig+0x29a>
 80067ba:	2310      	movs	r3, #16
 80067bc:	76fb      	strb	r3, [r7, #27]
 80067be:	e02c      	b.n	800681a <UART_SetConfig+0x29a>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a2b      	ldr	r2, [pc, #172]	; (8006874 <UART_SetConfig+0x2f4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d125      	bne.n	8006816 <UART_SetConfig+0x296>
 80067ca:	4b2c      	ldr	r3, [pc, #176]	; (800687c <UART_SetConfig+0x2fc>)
 80067cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067d8:	d017      	beq.n	800680a <UART_SetConfig+0x28a>
 80067da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067de:	d817      	bhi.n	8006810 <UART_SetConfig+0x290>
 80067e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067e4:	d00b      	beq.n	80067fe <UART_SetConfig+0x27e>
 80067e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ea:	d811      	bhi.n	8006810 <UART_SetConfig+0x290>
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d003      	beq.n	80067f8 <UART_SetConfig+0x278>
 80067f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f4:	d006      	beq.n	8006804 <UART_SetConfig+0x284>
 80067f6:	e00b      	b.n	8006810 <UART_SetConfig+0x290>
 80067f8:	2300      	movs	r3, #0
 80067fa:	76fb      	strb	r3, [r7, #27]
 80067fc:	e00d      	b.n	800681a <UART_SetConfig+0x29a>
 80067fe:	2302      	movs	r3, #2
 8006800:	76fb      	strb	r3, [r7, #27]
 8006802:	e00a      	b.n	800681a <UART_SetConfig+0x29a>
 8006804:	2304      	movs	r3, #4
 8006806:	76fb      	strb	r3, [r7, #27]
 8006808:	e007      	b.n	800681a <UART_SetConfig+0x29a>
 800680a:	2308      	movs	r3, #8
 800680c:	76fb      	strb	r3, [r7, #27]
 800680e:	e004      	b.n	800681a <UART_SetConfig+0x29a>
 8006810:	2310      	movs	r3, #16
 8006812:	76fb      	strb	r3, [r7, #27]
 8006814:	e001      	b.n	800681a <UART_SetConfig+0x29a>
 8006816:	2310      	movs	r3, #16
 8006818:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a15      	ldr	r2, [pc, #84]	; (8006874 <UART_SetConfig+0x2f4>)
 8006820:	4293      	cmp	r3, r2
 8006822:	f040 809f 	bne.w	8006964 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006826:	7efb      	ldrb	r3, [r7, #27]
 8006828:	2b08      	cmp	r3, #8
 800682a:	d837      	bhi.n	800689c <UART_SetConfig+0x31c>
 800682c:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <UART_SetConfig+0x2b4>)
 800682e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006832:	bf00      	nop
 8006834:	08006859 	.word	0x08006859
 8006838:	0800689d 	.word	0x0800689d
 800683c:	08006861 	.word	0x08006861
 8006840:	0800689d 	.word	0x0800689d
 8006844:	08006867 	.word	0x08006867
 8006848:	0800689d 	.word	0x0800689d
 800684c:	0800689d 	.word	0x0800689d
 8006850:	0800689d 	.word	0x0800689d
 8006854:	08006895 	.word	0x08006895
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006858:	f7fe fcd2 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 800685c:	6178      	str	r0, [r7, #20]
        break;
 800685e:	e022      	b.n	80068a6 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006860:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <UART_SetConfig+0x310>)
 8006862:	617b      	str	r3, [r7, #20]
        break;
 8006864:	e01f      	b.n	80068a6 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006866:	f7fe fc5d 	bl	8005124 <HAL_RCC_GetSysClockFreq>
 800686a:	6178      	str	r0, [r7, #20]
        break;
 800686c:	e01b      	b.n	80068a6 <UART_SetConfig+0x326>
 800686e:	bf00      	nop
 8006870:	cfff69f3 	.word	0xcfff69f3
 8006874:	40008000 	.word	0x40008000
 8006878:	40013800 	.word	0x40013800
 800687c:	40021000 	.word	0x40021000
 8006880:	40004400 	.word	0x40004400
 8006884:	40004800 	.word	0x40004800
 8006888:	40004c00 	.word	0x40004c00
 800688c:	40005000 	.word	0x40005000
 8006890:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006894:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006898:	617b      	str	r3, [r7, #20]
        break;
 800689a:	e004      	b.n	80068a6 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	76bb      	strb	r3, [r7, #26]
        break;
 80068a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 811b 	beq.w	8006ae4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	4a96      	ldr	r2, [pc, #600]	; (8006b0c <UART_SetConfig+0x58c>)
 80068b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068b8:	461a      	mov	r2, r3
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80068c0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	4613      	mov	r3, r2
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	4413      	add	r3, r2
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d305      	bcc.n	80068de <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d902      	bls.n	80068e4 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	76bb      	strb	r3, [r7, #26]
 80068e2:	e0ff      	b.n	8006ae4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f04f 0100 	mov.w	r1, #0
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	4a86      	ldr	r2, [pc, #536]	; (8006b0c <UART_SetConfig+0x58c>)
 80068f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	f04f 0300 	mov.w	r3, #0
 80068fc:	f7f9 fce0 	bl	80002c0 <__aeabi_uldivmod>
 8006900:	4602      	mov	r2, r0
 8006902:	460b      	mov	r3, r1
 8006904:	4610      	mov	r0, r2
 8006906:	4619      	mov	r1, r3
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	020b      	lsls	r3, r1, #8
 8006912:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006916:	0202      	lsls	r2, r0, #8
 8006918:	6879      	ldr	r1, [r7, #4]
 800691a:	6849      	ldr	r1, [r1, #4]
 800691c:	0849      	lsrs	r1, r1, #1
 800691e:	4608      	mov	r0, r1
 8006920:	f04f 0100 	mov.w	r1, #0
 8006924:	1814      	adds	r4, r2, r0
 8006926:	eb43 0501 	adc.w	r5, r3, r1
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	461a      	mov	r2, r3
 8006930:	f04f 0300 	mov.w	r3, #0
 8006934:	4620      	mov	r0, r4
 8006936:	4629      	mov	r1, r5
 8006938:	f7f9 fcc2 	bl	80002c0 <__aeabi_uldivmod>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	4613      	mov	r3, r2
 8006942:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800694a:	d308      	bcc.n	800695e <UART_SetConfig+0x3de>
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006952:	d204      	bcs.n	800695e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	60da      	str	r2, [r3, #12]
 800695c:	e0c2      	b.n	8006ae4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	76bb      	strb	r3, [r7, #26]
 8006962:	e0bf      	b.n	8006ae4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	69db      	ldr	r3, [r3, #28]
 8006968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800696c:	d165      	bne.n	8006a3a <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800696e:	7efb      	ldrb	r3, [r7, #27]
 8006970:	2b08      	cmp	r3, #8
 8006972:	d828      	bhi.n	80069c6 <UART_SetConfig+0x446>
 8006974:	a201      	add	r2, pc, #4	; (adr r2, 800697c <UART_SetConfig+0x3fc>)
 8006976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697a:	bf00      	nop
 800697c:	080069a1 	.word	0x080069a1
 8006980:	080069a9 	.word	0x080069a9
 8006984:	080069b1 	.word	0x080069b1
 8006988:	080069c7 	.word	0x080069c7
 800698c:	080069b7 	.word	0x080069b7
 8006990:	080069c7 	.word	0x080069c7
 8006994:	080069c7 	.word	0x080069c7
 8006998:	080069c7 	.word	0x080069c7
 800699c:	080069bf 	.word	0x080069bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069a0:	f7fe fc2e 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 80069a4:	6178      	str	r0, [r7, #20]
        break;
 80069a6:	e013      	b.n	80069d0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069a8:	f7fe fc40 	bl	800522c <HAL_RCC_GetPCLK2Freq>
 80069ac:	6178      	str	r0, [r7, #20]
        break;
 80069ae:	e00f      	b.n	80069d0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069b0:	4b57      	ldr	r3, [pc, #348]	; (8006b10 <UART_SetConfig+0x590>)
 80069b2:	617b      	str	r3, [r7, #20]
        break;
 80069b4:	e00c      	b.n	80069d0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069b6:	f7fe fbb5 	bl	8005124 <HAL_RCC_GetSysClockFreq>
 80069ba:	6178      	str	r0, [r7, #20]
        break;
 80069bc:	e008      	b.n	80069d0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069c2:	617b      	str	r3, [r7, #20]
        break;
 80069c4:	e004      	b.n	80069d0 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	76bb      	strb	r3, [r7, #26]
        break;
 80069ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 8086 	beq.w	8006ae4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	4a4b      	ldr	r2, [pc, #300]	; (8006b0c <UART_SetConfig+0x58c>)
 80069de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069e2:	461a      	mov	r2, r3
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80069ea:	005a      	lsls	r2, r3, #1
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	085b      	lsrs	r3, r3, #1
 80069f2:	441a      	add	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	2b0f      	cmp	r3, #15
 8006a04:	d916      	bls.n	8006a34 <UART_SetConfig+0x4b4>
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a0c:	d212      	bcs.n	8006a34 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	f023 030f 	bic.w	r3, r3, #15
 8006a16:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	085b      	lsrs	r3, r3, #1
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	89fb      	ldrh	r3, [r7, #14]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	89fa      	ldrh	r2, [r7, #14]
 8006a30:	60da      	str	r2, [r3, #12]
 8006a32:	e057      	b.n	8006ae4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	76bb      	strb	r3, [r7, #26]
 8006a38:	e054      	b.n	8006ae4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a3a:	7efb      	ldrb	r3, [r7, #27]
 8006a3c:	2b08      	cmp	r3, #8
 8006a3e:	d828      	bhi.n	8006a92 <UART_SetConfig+0x512>
 8006a40:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <UART_SetConfig+0x4c8>)
 8006a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a46:	bf00      	nop
 8006a48:	08006a6d 	.word	0x08006a6d
 8006a4c:	08006a75 	.word	0x08006a75
 8006a50:	08006a7d 	.word	0x08006a7d
 8006a54:	08006a93 	.word	0x08006a93
 8006a58:	08006a83 	.word	0x08006a83
 8006a5c:	08006a93 	.word	0x08006a93
 8006a60:	08006a93 	.word	0x08006a93
 8006a64:	08006a93 	.word	0x08006a93
 8006a68:	08006a8b 	.word	0x08006a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a6c:	f7fe fbc8 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 8006a70:	6178      	str	r0, [r7, #20]
        break;
 8006a72:	e013      	b.n	8006a9c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a74:	f7fe fbda 	bl	800522c <HAL_RCC_GetPCLK2Freq>
 8006a78:	6178      	str	r0, [r7, #20]
        break;
 8006a7a:	e00f      	b.n	8006a9c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a7c:	4b24      	ldr	r3, [pc, #144]	; (8006b10 <UART_SetConfig+0x590>)
 8006a7e:	617b      	str	r3, [r7, #20]
        break;
 8006a80:	e00c      	b.n	8006a9c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a82:	f7fe fb4f 	bl	8005124 <HAL_RCC_GetSysClockFreq>
 8006a86:	6178      	str	r0, [r7, #20]
        break;
 8006a88:	e008      	b.n	8006a9c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a8e:	617b      	str	r3, [r7, #20]
        break;
 8006a90:	e004      	b.n	8006a9c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	76bb      	strb	r3, [r7, #26]
        break;
 8006a9a:	bf00      	nop
    }

    if (pclk != 0U)
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d020      	beq.n	8006ae4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa6:	4a19      	ldr	r2, [pc, #100]	; (8006b0c <UART_SetConfig+0x58c>)
 8006aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006aac:	461a      	mov	r2, r3
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	085b      	lsrs	r3, r3, #1
 8006aba:	441a      	add	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	2b0f      	cmp	r3, #15
 8006acc:	d908      	bls.n	8006ae0 <UART_SetConfig+0x560>
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad4:	d204      	bcs.n	8006ae0 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	60da      	str	r2, [r3, #12]
 8006ade:	e001      	b.n	8006ae4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006b00:	7ebb      	ldrb	r3, [r7, #26]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3720      	adds	r7, #32
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bdb0      	pop	{r4, r5, r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	0800c760 	.word	0x0800c760
 8006b10:	00f42400 	.word	0x00f42400

08006b14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00a      	beq.n	8006b3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00a      	beq.n	8006b60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00a      	beq.n	8006b82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00a      	beq.n	8006ba4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba8:	f003 0310 	and.w	r3, r3, #16
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00a      	beq.n	8006bc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00a      	beq.n	8006be8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d01a      	beq.n	8006c2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c12:	d10a      	bne.n	8006c2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00a      	beq.n	8006c4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	605a      	str	r2, [r3, #4]
  }
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af02      	add	r7, sp, #8
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c68:	f7fa fe5a 	bl	8001920 <HAL_GetTick>
 8006c6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0308 	and.w	r3, r3, #8
 8006c78:	2b08      	cmp	r3, #8
 8006c7a:	d10e      	bne.n	8006c9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f82f 	bl	8006cee <UART_WaitOnFlagUntilTimeout>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e025      	b.n	8006ce6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b04      	cmp	r3, #4
 8006ca6:	d10e      	bne.n	8006cc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ca8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f819 	bl	8006cee <UART_WaitOnFlagUntilTimeout>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e00f      	b.n	8006ce6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	603b      	str	r3, [r7, #0]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cfe:	e062      	b.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d06:	d05e      	beq.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d08:	f7fa fe0a 	bl	8001920 <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	69ba      	ldr	r2, [r7, #24]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d302      	bcc.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x30>
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d11d      	bne.n	8006d5a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d2c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0201 	bic.w	r2, r2, #1
 8006d3c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e045      	b.n	8006de6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d02e      	beq.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d76:	d126      	bne.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d90:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 0201 	bic.w	r2, r2, #1
 8006da0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2220      	movs	r2, #32
 8006db6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e00f      	b.n	8006de6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	69da      	ldr	r2, [r3, #28]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	4013      	ands	r3, r2
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	bf0c      	ite	eq
 8006dd6:	2301      	moveq	r3, #1
 8006dd8:	2300      	movne	r3, #0
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	461a      	mov	r2, r3
 8006dde:	79fb      	ldrb	r3, [r7, #7]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d08d      	beq.n	8006d00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
	...

08006df0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	88fa      	ldrh	r2, [r7, #6]
 8006e08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2222      	movs	r2, #34	; 0x22
 8006e18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d02c      	beq.n	8006e7e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e28:	4a25      	ldr	r2, [pc, #148]	; (8006ec0 <UART_Start_Receive_DMA+0xd0>)
 8006e2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e30:	4a24      	ldr	r2, [pc, #144]	; (8006ec4 <UART_Start_Receive_DMA+0xd4>)
 8006e32:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e38:	4a23      	ldr	r2, [pc, #140]	; (8006ec8 <UART_Start_Receive_DMA+0xd8>)
 8006e3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e40:	2200      	movs	r2, #0
 8006e42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3324      	adds	r3, #36	; 0x24
 8006e4e:	4619      	mov	r1, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e54:	461a      	mov	r2, r3
 8006e56:	88fb      	ldrh	r3, [r7, #6]
 8006e58:	f7fc fcf4 	bl	8003844 <HAL_DMA_Start_IT>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00d      	beq.n	8006e7e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2210      	movs	r2, #16
 8006e66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e01c      	b.n	8006eb8 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e94:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	689a      	ldr	r2, [r3, #8]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f042 0201 	orr.w	r2, r2, #1
 8006ea4:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	689a      	ldr	r2, [r3, #8]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006eb4:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	08006f6d 	.word	0x08006f6d
 8006ec4:	08007007 	.word	0x08007007
 8006ec8:	0800703f 	.word	0x0800703f

08006ecc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006ee2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689a      	ldr	r2, [r3, #8]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006ef2:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f1e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	6812      	ldr	r2, [r2, #0]
 8006f2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f2e:	f023 0301 	bic.w	r3, r3, #1
 8006f32:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d107      	bne.n	8006f4c <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 0210 	bic.w	r2, r2, #16
 8006f4a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f78:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0320 	and.w	r3, r3, #32
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d12b      	bne.n	8006fe0 <UART_DMAReceiveCplt+0x74>
  {
    huart->RxXferCount = 0U;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f9e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689a      	ldr	r2, [r3, #8]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0201 	bic.w	r2, r2, #1
 8006fae:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689a      	ldr	r2, [r3, #8]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fbe:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d107      	bne.n	8006fe0 <UART_DMAReceiveCplt+0x74>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 0210 	bic.w	r2, r2, #16
 8006fde:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d107      	bne.n	8006ff8 <UART_DMAReceiveCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006fee:	4619      	mov	r1, r3
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f7ff fab9 	bl	8006568 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ff6:	e002      	b.n	8006ffe <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f7fa f81e 	bl	800103a <HAL_UART_RxCpltCallback>
}
 8006ffe:	bf00      	nop
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b084      	sub	sp, #16
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007012:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007018:	2b01      	cmp	r3, #1
 800701a:	d109      	bne.n	8007030 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007022:	085b      	lsrs	r3, r3, #1
 8007024:	b29b      	uxth	r3, r3
 8007026:	4619      	mov	r1, r3
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f7ff fa9d 	bl	8006568 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800702e:	e002      	b.n	8007036 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f7ff fa85 	bl	8006540 <HAL_UART_RxHalfCpltCallback>
}
 8007036:	bf00      	nop
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b086      	sub	sp, #24
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007052:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800705a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007066:	2b80      	cmp	r3, #128	; 0x80
 8007068:	d109      	bne.n	800707e <UART_DMAError+0x40>
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	2b21      	cmp	r3, #33	; 0x21
 800706e:	d106      	bne.n	800707e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	2200      	movs	r2, #0
 8007074:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007078:	6978      	ldr	r0, [r7, #20]
 800707a:	f7ff ff27 	bl	8006ecc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007088:	2b40      	cmp	r3, #64	; 0x40
 800708a:	d109      	bne.n	80070a0 <UART_DMAError+0x62>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b22      	cmp	r3, #34	; 0x22
 8007090:	d106      	bne.n	80070a0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2200      	movs	r2, #0
 8007096:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800709a:	6978      	ldr	r0, [r7, #20]
 800709c:	f7ff ff34 	bl	8006f08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070a6:	f043 0210 	orr.w	r2, r3, #16
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070b0:	6978      	ldr	r0, [r7, #20]
 80070b2:	f7ff fa4f 	bl	8006554 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070b6:	bf00      	nop
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80070be:	b480      	push	{r7}
 80070c0:	b085      	sub	sp, #20
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d101      	bne.n	80070d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e027      	b.n	8007124 <HAL_UARTEx_DisableFifoMode+0x66>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2224      	movs	r2, #36	; 0x24
 80070e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0201 	bic.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007102:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2220      	movs	r2, #32
 8007116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007140:	2b01      	cmp	r3, #1
 8007142:	d101      	bne.n	8007148 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007144:	2302      	movs	r3, #2
 8007146:	e02d      	b.n	80071a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2224      	movs	r2, #36	; 0x24
 8007154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0201 	bic.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	430a      	orrs	r2, r1
 8007182:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f84f 	bl	8007228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2220      	movs	r2, #32
 8007196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d101      	bne.n	80071c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e02d      	b.n	8007220 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2224      	movs	r2, #36	; 0x24
 80071d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0201 	bic.w	r2, r2, #1
 80071ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f811 	bl	8007228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2220      	movs	r2, #32
 8007212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007234:	2b00      	cmp	r3, #0
 8007236:	d108      	bne.n	800724a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007248:	e031      	b.n	80072ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800724a:	2308      	movs	r3, #8
 800724c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800724e:	2308      	movs	r3, #8
 8007250:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	0e5b      	lsrs	r3, r3, #25
 800725a:	b2db      	uxtb	r3, r3
 800725c:	f003 0307 	and.w	r3, r3, #7
 8007260:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	0f5b      	lsrs	r3, r3, #29
 800726a:	b2db      	uxtb	r3, r3
 800726c:	f003 0307 	and.w	r3, r3, #7
 8007270:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007272:	7bbb      	ldrb	r3, [r7, #14]
 8007274:	7b3a      	ldrb	r2, [r7, #12]
 8007276:	4911      	ldr	r1, [pc, #68]	; (80072bc <UARTEx_SetNbDataToProcess+0x94>)
 8007278:	5c8a      	ldrb	r2, [r1, r2]
 800727a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800727e:	7b3a      	ldrb	r2, [r7, #12]
 8007280:	490f      	ldr	r1, [pc, #60]	; (80072c0 <UARTEx_SetNbDataToProcess+0x98>)
 8007282:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007284:	fb93 f3f2 	sdiv	r3, r3, r2
 8007288:	b29a      	uxth	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007290:	7bfb      	ldrb	r3, [r7, #15]
 8007292:	7b7a      	ldrb	r2, [r7, #13]
 8007294:	4909      	ldr	r1, [pc, #36]	; (80072bc <UARTEx_SetNbDataToProcess+0x94>)
 8007296:	5c8a      	ldrb	r2, [r1, r2]
 8007298:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800729c:	7b7a      	ldrb	r2, [r7, #13]
 800729e:	4908      	ldr	r1, [pc, #32]	; (80072c0 <UARTEx_SetNbDataToProcess+0x98>)
 80072a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80072ae:	bf00      	nop
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	0800c778 	.word	0x0800c778
 80072c0:	0800c780 	.word	0x0800c780

080072c4 <__NVIC_SetPriority>:
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	4603      	mov	r3, r0
 80072cc:	6039      	str	r1, [r7, #0]
 80072ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	db0a      	blt.n	80072ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	490c      	ldr	r1, [pc, #48]	; (8007310 <__NVIC_SetPriority+0x4c>)
 80072de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072e2:	0112      	lsls	r2, r2, #4
 80072e4:	b2d2      	uxtb	r2, r2
 80072e6:	440b      	add	r3, r1
 80072e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80072ec:	e00a      	b.n	8007304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	4908      	ldr	r1, [pc, #32]	; (8007314 <__NVIC_SetPriority+0x50>)
 80072f4:	79fb      	ldrb	r3, [r7, #7]
 80072f6:	f003 030f 	and.w	r3, r3, #15
 80072fa:	3b04      	subs	r3, #4
 80072fc:	0112      	lsls	r2, r2, #4
 80072fe:	b2d2      	uxtb	r2, r2
 8007300:	440b      	add	r3, r1
 8007302:	761a      	strb	r2, [r3, #24]
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	e000e100 	.word	0xe000e100
 8007314:	e000ed00 	.word	0xe000ed00

08007318 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007318:	b580      	push	{r7, lr}
 800731a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800731c:	4b05      	ldr	r3, [pc, #20]	; (8007334 <SysTick_Handler+0x1c>)
 800731e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007320:	f002 f93e 	bl	80095a0 <xTaskGetSchedulerState>
 8007324:	4603      	mov	r3, r0
 8007326:	2b01      	cmp	r3, #1
 8007328:	d001      	beq.n	800732e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800732a:	f003 f825 	bl	800a378 <xPortSysTickHandler>
  }
}
 800732e:	bf00      	nop
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	e000e010 	.word	0xe000e010

08007338 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007338:	b580      	push	{r7, lr}
 800733a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800733c:	2100      	movs	r1, #0
 800733e:	f06f 0004 	mvn.w	r0, #4
 8007342:	f7ff ffbf 	bl	80072c4 <__NVIC_SetPriority>
#endif
}
 8007346:	bf00      	nop
 8007348:	bd80      	pop	{r7, pc}
	...

0800734c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007352:	f3ef 8305 	mrs	r3, IPSR
 8007356:	603b      	str	r3, [r7, #0]
  return(result);
 8007358:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800735e:	f06f 0305 	mvn.w	r3, #5
 8007362:	607b      	str	r3, [r7, #4]
 8007364:	e00c      	b.n	8007380 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007366:	4b0a      	ldr	r3, [pc, #40]	; (8007390 <osKernelInitialize+0x44>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d105      	bne.n	800737a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800736e:	4b08      	ldr	r3, [pc, #32]	; (8007390 <osKernelInitialize+0x44>)
 8007370:	2201      	movs	r2, #1
 8007372:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007374:	2300      	movs	r3, #0
 8007376:	607b      	str	r3, [r7, #4]
 8007378:	e002      	b.n	8007380 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800737a:	f04f 33ff 	mov.w	r3, #4294967295
 800737e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007380:	687b      	ldr	r3, [r7, #4]
}
 8007382:	4618      	mov	r0, r3
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	2000054c 	.word	0x2000054c

08007394 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800739a:	f3ef 8305 	mrs	r3, IPSR
 800739e:	603b      	str	r3, [r7, #0]
  return(result);
 80073a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80073a6:	f06f 0305 	mvn.w	r3, #5
 80073aa:	607b      	str	r3, [r7, #4]
 80073ac:	e010      	b.n	80073d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80073ae:	4b0b      	ldr	r3, [pc, #44]	; (80073dc <osKernelStart+0x48>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d109      	bne.n	80073ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80073b6:	f7ff ffbf 	bl	8007338 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80073ba:	4b08      	ldr	r3, [pc, #32]	; (80073dc <osKernelStart+0x48>)
 80073bc:	2202      	movs	r2, #2
 80073be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80073c0:	f001 fca6 	bl	8008d10 <vTaskStartScheduler>
      stat = osOK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	607b      	str	r3, [r7, #4]
 80073c8:	e002      	b.n	80073d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80073ca:	f04f 33ff 	mov.w	r3, #4294967295
 80073ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073d0:	687b      	ldr	r3, [r7, #4]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	2000054c 	.word	0x2000054c

080073e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08e      	sub	sp, #56	; 0x38
 80073e4:	af04      	add	r7, sp, #16
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80073ec:	2300      	movs	r3, #0
 80073ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073f0:	f3ef 8305 	mrs	r3, IPSR
 80073f4:	617b      	str	r3, [r7, #20]
  return(result);
 80073f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d17e      	bne.n	80074fa <osThreadNew+0x11a>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d07b      	beq.n	80074fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007402:	2380      	movs	r3, #128	; 0x80
 8007404:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007406:	2318      	movs	r3, #24
 8007408:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800740a:	2300      	movs	r3, #0
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800740e:	f04f 33ff 	mov.w	r3, #4294967295
 8007412:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d045      	beq.n	80074a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <osThreadNew+0x48>
        name = attr->name;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d008      	beq.n	800744e <osThreadNew+0x6e>
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	2b38      	cmp	r3, #56	; 0x38
 8007440:	d805      	bhi.n	800744e <osThreadNew+0x6e>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <osThreadNew+0x72>
        return (NULL);
 800744e:	2300      	movs	r3, #0
 8007450:	e054      	b.n	80074fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	089b      	lsrs	r3, r3, #2
 8007460:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00e      	beq.n	8007488 <osThreadNew+0xa8>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	2b5b      	cmp	r3, #91	; 0x5b
 8007470:	d90a      	bls.n	8007488 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007476:	2b00      	cmp	r3, #0
 8007478:	d006      	beq.n	8007488 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d002      	beq.n	8007488 <osThreadNew+0xa8>
        mem = 1;
 8007482:	2301      	movs	r3, #1
 8007484:	61bb      	str	r3, [r7, #24]
 8007486:	e010      	b.n	80074aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10c      	bne.n	80074aa <osThreadNew+0xca>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d108      	bne.n	80074aa <osThreadNew+0xca>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d104      	bne.n	80074aa <osThreadNew+0xca>
          mem = 0;
 80074a0:	2300      	movs	r3, #0
 80074a2:	61bb      	str	r3, [r7, #24]
 80074a4:	e001      	b.n	80074aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d110      	bne.n	80074d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074b8:	9202      	str	r2, [sp, #8]
 80074ba:	9301      	str	r3, [sp, #4]
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	6a3a      	ldr	r2, [r7, #32]
 80074c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f001 fa4c 	bl	8008964 <xTaskCreateStatic>
 80074cc:	4603      	mov	r3, r0
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	e013      	b.n	80074fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d110      	bne.n	80074fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80074d8:	6a3b      	ldr	r3, [r7, #32]
 80074da:	b29a      	uxth	r2, r3
 80074dc:	f107 0310 	add.w	r3, r7, #16
 80074e0:	9301      	str	r3, [sp, #4]
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f001 fa97 	bl	8008a1e <xTaskCreate>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d001      	beq.n	80074fa <osThreadNew+0x11a>
            hTask = NULL;
 80074f6:	2300      	movs	r3, #0
 80074f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074fa:	693b      	ldr	r3, [r7, #16]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3728      	adds	r7, #40	; 0x28
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800750c:	f3ef 8305 	mrs	r3, IPSR
 8007510:	60bb      	str	r3, [r7, #8]
  return(result);
 8007512:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <osDelay+0x1c>
    stat = osErrorISR;
 8007518:	f06f 0305 	mvn.w	r3, #5
 800751c:	60fb      	str	r3, [r7, #12]
 800751e:	e007      	b.n	8007530 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007520:	2300      	movs	r3, #0
 8007522:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d002      	beq.n	8007530 <osDelay+0x2c>
      vTaskDelay(ticks);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f001 fbbc 	bl	8008ca8 <vTaskDelay>
    }
  }

  return (stat);
 8007530:	68fb      	ldr	r3, [r7, #12]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800753a:	b580      	push	{r7, lr}
 800753c:	b08a      	sub	sp, #40	; 0x28
 800753e:	af02      	add	r7, sp, #8
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	60b9      	str	r1, [r7, #8]
 8007544:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007546:	2300      	movs	r3, #0
 8007548:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800754a:	f3ef 8305 	mrs	r3, IPSR
 800754e:	613b      	str	r3, [r7, #16]
  return(result);
 8007550:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007552:	2b00      	cmp	r3, #0
 8007554:	d175      	bne.n	8007642 <osSemaphoreNew+0x108>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d072      	beq.n	8007642 <osSemaphoreNew+0x108>
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	429a      	cmp	r2, r3
 8007562:	d86e      	bhi.n	8007642 <osSemaphoreNew+0x108>
    mem = -1;
 8007564:	f04f 33ff 	mov.w	r3, #4294967295
 8007568:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d015      	beq.n	800759c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d006      	beq.n	8007586 <osSemaphoreNew+0x4c>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	2b4f      	cmp	r3, #79	; 0x4f
 800757e:	d902      	bls.n	8007586 <osSemaphoreNew+0x4c>
        mem = 1;
 8007580:	2301      	movs	r3, #1
 8007582:	61bb      	str	r3, [r7, #24]
 8007584:	e00c      	b.n	80075a0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d108      	bne.n	80075a0 <osSemaphoreNew+0x66>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d104      	bne.n	80075a0 <osSemaphoreNew+0x66>
          mem = 0;
 8007596:	2300      	movs	r3, #0
 8007598:	61bb      	str	r3, [r7, #24]
 800759a:	e001      	b.n	80075a0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800759c:	2300      	movs	r3, #0
 800759e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a6:	d04c      	beq.n	8007642 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d128      	bne.n	8007600 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d10a      	bne.n	80075ca <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	2203      	movs	r2, #3
 80075ba:	9200      	str	r2, [sp, #0]
 80075bc:	2200      	movs	r2, #0
 80075be:	2100      	movs	r1, #0
 80075c0:	2001      	movs	r0, #1
 80075c2:	f000 fa29 	bl	8007a18 <xQueueGenericCreateStatic>
 80075c6:	61f8      	str	r0, [r7, #28]
 80075c8:	e005      	b.n	80075d6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80075ca:	2203      	movs	r2, #3
 80075cc:	2100      	movs	r1, #0
 80075ce:	2001      	movs	r0, #1
 80075d0:	f000 fa9a 	bl	8007b08 <xQueueGenericCreate>
 80075d4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d022      	beq.n	8007622 <osSemaphoreNew+0xe8>
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d01f      	beq.n	8007622 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80075e2:	2300      	movs	r3, #0
 80075e4:	2200      	movs	r2, #0
 80075e6:	2100      	movs	r1, #0
 80075e8:	69f8      	ldr	r0, [r7, #28]
 80075ea:	f000 fb55 	bl	8007c98 <xQueueGenericSend>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d016      	beq.n	8007622 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80075f4:	69f8      	ldr	r0, [r7, #28]
 80075f6:	f000 ffe1 	bl	80085bc <vQueueDelete>
            hSemaphore = NULL;
 80075fa:	2300      	movs	r3, #0
 80075fc:	61fb      	str	r3, [r7, #28]
 80075fe:	e010      	b.n	8007622 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d108      	bne.n	8007618 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	461a      	mov	r2, r3
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 fad7 	bl	8007bc2 <xQueueCreateCountingSemaphoreStatic>
 8007614:	61f8      	str	r0, [r7, #28]
 8007616:	e004      	b.n	8007622 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007618:	68b9      	ldr	r1, [r7, #8]
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 fb08 	bl	8007c30 <xQueueCreateCountingSemaphore>
 8007620:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00c      	beq.n	8007642 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <osSemaphoreNew+0xfc>
          name = attr->name;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	617b      	str	r3, [r7, #20]
 8007634:	e001      	b.n	800763a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007636:	2300      	movs	r3, #0
 8007638:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800763a:	6979      	ldr	r1, [r7, #20]
 800763c:	69f8      	ldr	r0, [r7, #28]
 800763e:	f001 f909 	bl	8008854 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007642:	69fb      	ldr	r3, [r7, #28]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3720      	adds	r7, #32
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800765a:	2300      	movs	r3, #0
 800765c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d103      	bne.n	800766c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007664:	f06f 0303 	mvn.w	r3, #3
 8007668:	617b      	str	r3, [r7, #20]
 800766a:	e039      	b.n	80076e0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800766c:	f3ef 8305 	mrs	r3, IPSR
 8007670:	60fb      	str	r3, [r7, #12]
  return(result);
 8007672:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007674:	2b00      	cmp	r3, #0
 8007676:	d022      	beq.n	80076be <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800767e:	f06f 0303 	mvn.w	r3, #3
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	e02c      	b.n	80076e0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007686:	2300      	movs	r3, #0
 8007688:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800768a:	f107 0308 	add.w	r3, r7, #8
 800768e:	461a      	mov	r2, r3
 8007690:	2100      	movs	r1, #0
 8007692:	6938      	ldr	r0, [r7, #16]
 8007694:	f000 ff12 	bl	80084bc <xQueueReceiveFromISR>
 8007698:	4603      	mov	r3, r0
 800769a:	2b01      	cmp	r3, #1
 800769c:	d003      	beq.n	80076a6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800769e:	f06f 0302 	mvn.w	r3, #2
 80076a2:	617b      	str	r3, [r7, #20]
 80076a4:	e01c      	b.n	80076e0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d019      	beq.n	80076e0 <osSemaphoreAcquire+0x94>
 80076ac:	4b0f      	ldr	r3, [pc, #60]	; (80076ec <osSemaphoreAcquire+0xa0>)
 80076ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	e010      	b.n	80076e0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6938      	ldr	r0, [r7, #16]
 80076c2:	f000 fdef 	bl	80082a4 <xQueueSemaphoreTake>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d009      	beq.n	80076e0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80076d2:	f06f 0301 	mvn.w	r3, #1
 80076d6:	617b      	str	r3, [r7, #20]
 80076d8:	e002      	b.n	80076e0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80076da:	f06f 0302 	mvn.w	r3, #2
 80076de:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80076e0:	697b      	ldr	r3, [r7, #20]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3718      	adds	r7, #24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	e000ed04 	.word	0xe000ed04

080076f0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d103      	bne.n	800770e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007706:	f06f 0303 	mvn.w	r3, #3
 800770a:	617b      	str	r3, [r7, #20]
 800770c:	e02c      	b.n	8007768 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800770e:	f3ef 8305 	mrs	r3, IPSR
 8007712:	60fb      	str	r3, [r7, #12]
  return(result);
 8007714:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007716:	2b00      	cmp	r3, #0
 8007718:	d01a      	beq.n	8007750 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800771a:	2300      	movs	r3, #0
 800771c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800771e:	f107 0308 	add.w	r3, r7, #8
 8007722:	4619      	mov	r1, r3
 8007724:	6938      	ldr	r0, [r7, #16]
 8007726:	f000 fc50 	bl	8007fca <xQueueGiveFromISR>
 800772a:	4603      	mov	r3, r0
 800772c:	2b01      	cmp	r3, #1
 800772e:	d003      	beq.n	8007738 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007730:	f06f 0302 	mvn.w	r3, #2
 8007734:	617b      	str	r3, [r7, #20]
 8007736:	e017      	b.n	8007768 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d014      	beq.n	8007768 <osSemaphoreRelease+0x78>
 800773e:	4b0d      	ldr	r3, [pc, #52]	; (8007774 <osSemaphoreRelease+0x84>)
 8007740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007744:	601a      	str	r2, [r3, #0]
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	e00b      	b.n	8007768 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007750:	2300      	movs	r3, #0
 8007752:	2200      	movs	r2, #0
 8007754:	2100      	movs	r1, #0
 8007756:	6938      	ldr	r0, [r7, #16]
 8007758:	f000 fa9e 	bl	8007c98 <xQueueGenericSend>
 800775c:	4603      	mov	r3, r0
 800775e:	2b01      	cmp	r3, #1
 8007760:	d002      	beq.n	8007768 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8007762:	f06f 0302 	mvn.w	r3, #2
 8007766:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007768:	697b      	ldr	r3, [r7, #20]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3718      	adds	r7, #24
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	e000ed04 	.word	0xe000ed04

08007778 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4a07      	ldr	r2, [pc, #28]	; (80077a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007788:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	4a06      	ldr	r2, [pc, #24]	; (80077a8 <vApplicationGetIdleTaskMemory+0x30>)
 800778e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2280      	movs	r2, #128	; 0x80
 8007794:	601a      	str	r2, [r3, #0]
}
 8007796:	bf00      	nop
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	20000550 	.word	0x20000550
 80077a8:	200005ac 	.word	0x200005ac

080077ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4a07      	ldr	r2, [pc, #28]	; (80077d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80077bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	4a06      	ldr	r2, [pc, #24]	; (80077dc <vApplicationGetTimerTaskMemory+0x30>)
 80077c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077ca:	601a      	str	r2, [r3, #0]
}
 80077cc:	bf00      	nop
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr
 80077d8:	200007ac 	.word	0x200007ac
 80077dc:	20000808 	.word	0x20000808

080077e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f103 0208 	add.w	r2, r3, #8
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f04f 32ff 	mov.w	r2, #4294967295
 80077f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f103 0208 	add.w	r2, r3, #8
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f103 0208 	add.w	r2, r3, #8
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800782e:	bf00      	nop
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800783a:	b480      	push	{r7}
 800783c:	b085      	sub	sp, #20
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	689a      	ldr	r2, [r3, #8]
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	601a      	str	r2, [r3, #0]
}
 8007876:	bf00      	nop
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007882:	b480      	push	{r7}
 8007884:	b085      	sub	sp, #20
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007898:	d103      	bne.n	80078a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	60fb      	str	r3, [r7, #12]
 80078a0:	e00c      	b.n	80078bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	3308      	adds	r3, #8
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	e002      	b.n	80078b0 <vListInsert+0x2e>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	60fb      	str	r3, [r7, #12]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d2f6      	bcs.n	80078aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	601a      	str	r2, [r3, #0]
}
 80078e8:	bf00      	nop
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6892      	ldr	r2, [r2, #8]
 800790a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	6852      	ldr	r2, [r2, #4]
 8007914:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	429a      	cmp	r2, r3
 800791e:	d103      	bne.n	8007928 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	1e5a      	subs	r2, r3, #1
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10a      	bne.n	8007972 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800795c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800796e:	bf00      	nop
 8007970:	e7fe      	b.n	8007970 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007972:	f002 fc6f 	bl	800a254 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797e:	68f9      	ldr	r1, [r7, #12]
 8007980:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007982:	fb01 f303 	mul.w	r3, r1, r3
 8007986:	441a      	add	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a2:	3b01      	subs	r3, #1
 80079a4:	68f9      	ldr	r1, [r7, #12]
 80079a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80079a8:	fb01 f303 	mul.w	r3, r1, r3
 80079ac:	441a      	add	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	22ff      	movs	r2, #255	; 0xff
 80079b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	22ff      	movs	r2, #255	; 0xff
 80079be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d114      	bne.n	80079f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d01a      	beq.n	8007a06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	3310      	adds	r3, #16
 80079d4:	4618      	mov	r0, r3
 80079d6:	f001 fc25 	bl	8009224 <xTaskRemoveFromEventList>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d012      	beq.n	8007a06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079e0:	4b0c      	ldr	r3, [pc, #48]	; (8007a14 <xQueueGenericReset+0xcc>)
 80079e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e6:	601a      	str	r2, [r3, #0]
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	e009      	b.n	8007a06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3310      	adds	r3, #16
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7ff fef2 	bl	80077e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3324      	adds	r3, #36	; 0x24
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7ff feed 	bl	80077e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a06:	f002 fc55 	bl	800a2b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007a0a:	2301      	movs	r3, #1
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	e000ed04 	.word	0xe000ed04

08007a18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b08e      	sub	sp, #56	; 0x38
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
 8007a24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d10a      	bne.n	8007a42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a3e:	bf00      	nop
 8007a40:	e7fe      	b.n	8007a40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10a      	bne.n	8007a5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a5a:	bf00      	nop
 8007a5c:	e7fe      	b.n	8007a5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <xQueueGenericCreateStatic+0x52>
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <xQueueGenericCreateStatic+0x56>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e000      	b.n	8007a70 <xQueueGenericCreateStatic+0x58>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10a      	bne.n	8007a8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a78:	f383 8811 	msr	BASEPRI, r3
 8007a7c:	f3bf 8f6f 	isb	sy
 8007a80:	f3bf 8f4f 	dsb	sy
 8007a84:	623b      	str	r3, [r7, #32]
}
 8007a86:	bf00      	nop
 8007a88:	e7fe      	b.n	8007a88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d102      	bne.n	8007a96 <xQueueGenericCreateStatic+0x7e>
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <xQueueGenericCreateStatic+0x82>
 8007a96:	2301      	movs	r3, #1
 8007a98:	e000      	b.n	8007a9c <xQueueGenericCreateStatic+0x84>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10a      	bne.n	8007ab6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	61fb      	str	r3, [r7, #28]
}
 8007ab2:	bf00      	nop
 8007ab4:	e7fe      	b.n	8007ab4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007ab6:	2350      	movs	r3, #80	; 0x50
 8007ab8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2b50      	cmp	r3, #80	; 0x50
 8007abe:	d00a      	beq.n	8007ad6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	61bb      	str	r3, [r7, #24]
}
 8007ad2:	bf00      	nop
 8007ad4:	e7fe      	b.n	8007ad4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ad6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00d      	beq.n	8007afe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007aea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	4613      	mov	r3, r2
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	68b9      	ldr	r1, [r7, #8]
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f000 f83f 	bl	8007b7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3730      	adds	r7, #48	; 0x30
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08a      	sub	sp, #40	; 0x28
 8007b0c:	af02      	add	r7, sp, #8
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	4613      	mov	r3, r2
 8007b14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10a      	bne.n	8007b32 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b20:	f383 8811 	msr	BASEPRI, r3
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	613b      	str	r3, [r7, #16]
}
 8007b2e:	bf00      	nop
 8007b30:	e7fe      	b.n	8007b30 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	fb02 f303 	mul.w	r3, r2, r3
 8007b3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	3350      	adds	r3, #80	; 0x50
 8007b40:	4618      	mov	r0, r3
 8007b42:	f002 fca9 	bl	800a498 <pvPortMalloc>
 8007b46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d011      	beq.n	8007b72 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	3350      	adds	r3, #80	; 0x50
 8007b56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b60:	79fa      	ldrb	r2, [r7, #7]
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	4613      	mov	r3, r2
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	68b9      	ldr	r1, [r7, #8]
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 f805 	bl	8007b7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b72:	69bb      	ldr	r3, [r7, #24]
	}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3720      	adds	r7, #32
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d103      	bne.n	8007b98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	e002      	b.n	8007b9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007baa:	2101      	movs	r1, #1
 8007bac:	69b8      	ldr	r0, [r7, #24]
 8007bae:	f7ff fecb 	bl	8007948 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	78fa      	ldrb	r2, [r7, #3]
 8007bb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007bba:	bf00      	nop
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b08a      	sub	sp, #40	; 0x28
 8007bc6:	af02      	add	r7, sp, #8
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10a      	bne.n	8007bea <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	61bb      	str	r3, [r7, #24]
}
 8007be6:	bf00      	nop
 8007be8:	e7fe      	b.n	8007be8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d90a      	bls.n	8007c08 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	617b      	str	r3, [r7, #20]
}
 8007c04:	bf00      	nop
 8007c06:	e7fe      	b.n	8007c06 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007c08:	2302      	movs	r3, #2
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2100      	movs	r1, #0
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f7ff ff00 	bl	8007a18 <xQueueGenericCreateStatic>
 8007c18:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007c26:	69fb      	ldr	r3, [r7, #28]
	}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3720      	adds	r7, #32
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10a      	bne.n	8007c56 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	613b      	str	r3, [r7, #16]
}
 8007c52:	bf00      	nop
 8007c54:	e7fe      	b.n	8007c54 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d90a      	bls.n	8007c74 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	60fb      	str	r3, [r7, #12]
}
 8007c70:	bf00      	nop
 8007c72:	e7fe      	b.n	8007c72 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007c74:	2202      	movs	r2, #2
 8007c76:	2100      	movs	r1, #0
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f7ff ff45 	bl	8007b08 <xQueueGenericCreate>
 8007c7e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d002      	beq.n	8007c8c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	683a      	ldr	r2, [r7, #0]
 8007c8a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007c8c:	697b      	ldr	r3, [r7, #20]
	}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b08e      	sub	sp, #56	; 0x38
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
 8007ca4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10a      	bne.n	8007cca <xQueueGenericSend+0x32>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007cc6:	bf00      	nop
 8007cc8:	e7fe      	b.n	8007cc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d103      	bne.n	8007cd8 <xQueueGenericSend+0x40>
 8007cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <xQueueGenericSend+0x44>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e000      	b.n	8007cde <xQueueGenericSend+0x46>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <xQueueGenericSend+0x60>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d103      	bne.n	8007d06 <xQueueGenericSend+0x6e>
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d101      	bne.n	8007d0a <xQueueGenericSend+0x72>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e000      	b.n	8007d0c <xQueueGenericSend+0x74>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10a      	bne.n	8007d26 <xQueueGenericSend+0x8e>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	623b      	str	r3, [r7, #32]
}
 8007d22:	bf00      	nop
 8007d24:	e7fe      	b.n	8007d24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d26:	f001 fc3b 	bl	80095a0 <xTaskGetSchedulerState>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d102      	bne.n	8007d36 <xQueueGenericSend+0x9e>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <xQueueGenericSend+0xa2>
 8007d36:	2301      	movs	r3, #1
 8007d38:	e000      	b.n	8007d3c <xQueueGenericSend+0xa4>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10a      	bne.n	8007d56 <xQueueGenericSend+0xbe>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	61fb      	str	r3, [r7, #28]
}
 8007d52:	bf00      	nop
 8007d54:	e7fe      	b.n	8007d54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d56:	f002 fa7d 	bl	800a254 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d302      	bcc.n	8007d6c <xQueueGenericSend+0xd4>
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d129      	bne.n	8007dc0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	68b9      	ldr	r1, [r7, #8]
 8007d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d72:	f000 fc5e 	bl	8008632 <prvCopyDataToQueue>
 8007d76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d010      	beq.n	8007da2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d82:	3324      	adds	r3, #36	; 0x24
 8007d84:	4618      	mov	r0, r3
 8007d86:	f001 fa4d 	bl	8009224 <xTaskRemoveFromEventList>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d013      	beq.n	8007db8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d90:	4b3f      	ldr	r3, [pc, #252]	; (8007e90 <xQueueGenericSend+0x1f8>)
 8007d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	e00a      	b.n	8007db8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d007      	beq.n	8007db8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007da8:	4b39      	ldr	r3, [pc, #228]	; (8007e90 <xQueueGenericSend+0x1f8>)
 8007daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dae:	601a      	str	r2, [r3, #0]
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007db8:	f002 fa7c 	bl	800a2b4 <vPortExitCritical>
				return pdPASS;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e063      	b.n	8007e88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d103      	bne.n	8007dce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dc6:	f002 fa75 	bl	800a2b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	e05c      	b.n	8007e88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d106      	bne.n	8007de2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dd4:	f107 0314 	add.w	r3, r7, #20
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f001 fa87 	bl	80092ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dde:	2301      	movs	r3, #1
 8007de0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007de2:	f002 fa67 	bl	800a2b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007de6:	f000 fff9 	bl	8008ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dea:	f002 fa33 	bl	800a254 <vPortEnterCritical>
 8007dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007df4:	b25b      	sxtb	r3, r3
 8007df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfa:	d103      	bne.n	8007e04 <xQueueGenericSend+0x16c>
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e0a:	b25b      	sxtb	r3, r3
 8007e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e10:	d103      	bne.n	8007e1a <xQueueGenericSend+0x182>
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e1a:	f002 fa4b 	bl	800a2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e1e:	1d3a      	adds	r2, r7, #4
 8007e20:	f107 0314 	add.w	r3, r7, #20
 8007e24:	4611      	mov	r1, r2
 8007e26:	4618      	mov	r0, r3
 8007e28:	f001 fa76 	bl	8009318 <xTaskCheckForTimeOut>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d124      	bne.n	8007e7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e34:	f000 fcf5 	bl	8008822 <prvIsQueueFull>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d018      	beq.n	8007e70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	3310      	adds	r3, #16
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	4611      	mov	r1, r2
 8007e46:	4618      	mov	r0, r3
 8007e48:	f001 f99c 	bl	8009184 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e4e:	f000 fc80 	bl	8008752 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e52:	f000 ffd1 	bl	8008df8 <xTaskResumeAll>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f47f af7c 	bne.w	8007d56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007e5e:	4b0c      	ldr	r3, [pc, #48]	; (8007e90 <xQueueGenericSend+0x1f8>)
 8007e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	e772      	b.n	8007d56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e72:	f000 fc6e 	bl	8008752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e76:	f000 ffbf 	bl	8008df8 <xTaskResumeAll>
 8007e7a:	e76c      	b.n	8007d56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e7e:	f000 fc68 	bl	8008752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e82:	f000 ffb9 	bl	8008df8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3738      	adds	r7, #56	; 0x38
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	e000ed04 	.word	0xe000ed04

08007e94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b090      	sub	sp, #64	; 0x40
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10a      	bne.n	8007ec2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ebe:	bf00      	nop
 8007ec0:	e7fe      	b.n	8007ec0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d103      	bne.n	8007ed0 <xQueueGenericSendFromISR+0x3c>
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d101      	bne.n	8007ed4 <xQueueGenericSendFromISR+0x40>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e000      	b.n	8007ed6 <xQueueGenericSendFromISR+0x42>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10a      	bne.n	8007ef0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007eec:	bf00      	nop
 8007eee:	e7fe      	b.n	8007eee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d103      	bne.n	8007efe <xQueueGenericSendFromISR+0x6a>
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d101      	bne.n	8007f02 <xQueueGenericSendFromISR+0x6e>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e000      	b.n	8007f04 <xQueueGenericSendFromISR+0x70>
 8007f02:	2300      	movs	r3, #0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10a      	bne.n	8007f1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	623b      	str	r3, [r7, #32]
}
 8007f1a:	bf00      	nop
 8007f1c:	e7fe      	b.n	8007f1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f1e:	f002 fa7b 	bl	800a418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f22:	f3ef 8211 	mrs	r2, BASEPRI
 8007f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	61fa      	str	r2, [r7, #28]
 8007f38:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d302      	bcc.n	8007f50 <xQueueGenericSendFromISR+0xbc>
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d12f      	bne.n	8007fb0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	68b9      	ldr	r1, [r7, #8]
 8007f64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f66:	f000 fb64 	bl	8008632 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f72:	d112      	bne.n	8007f9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d016      	beq.n	8007faa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7e:	3324      	adds	r3, #36	; 0x24
 8007f80:	4618      	mov	r0, r3
 8007f82:	f001 f94f 	bl	8009224 <xTaskRemoveFromEventList>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00e      	beq.n	8007faa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00b      	beq.n	8007faa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	e007      	b.n	8007faa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	b25a      	sxtb	r2, r3
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007faa:	2301      	movs	r3, #1
 8007fac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007fae:	e001      	b.n	8007fb4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007fbe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3740      	adds	r7, #64	; 0x40
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b08e      	sub	sp, #56	; 0x38
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10a      	bne.n	8007ff4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	623b      	str	r3, [r7, #32]
}
 8007ff0:	bf00      	nop
 8007ff2:	e7fe      	b.n	8007ff2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00a      	beq.n	8008012 <xQueueGiveFromISR+0x48>
	__asm volatile
 8007ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008000:	f383 8811 	msr	BASEPRI, r3
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	61fb      	str	r3, [r7, #28]
}
 800800e:	bf00      	nop
 8008010:	e7fe      	b.n	8008010 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d103      	bne.n	8008022 <xQueueGiveFromISR+0x58>
 800801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d101      	bne.n	8008026 <xQueueGiveFromISR+0x5c>
 8008022:	2301      	movs	r3, #1
 8008024:	e000      	b.n	8008028 <xQueueGiveFromISR+0x5e>
 8008026:	2300      	movs	r3, #0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10a      	bne.n	8008042 <xQueueGiveFromISR+0x78>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	61bb      	str	r3, [r7, #24]
}
 800803e:	bf00      	nop
 8008040:	e7fe      	b.n	8008040 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008042:	f002 f9e9 	bl	800a418 <vPortValidateInterruptPriority>
	__asm volatile
 8008046:	f3ef 8211 	mrs	r2, BASEPRI
 800804a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	617a      	str	r2, [r7, #20]
 800805c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800805e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008060:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008066:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800806c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800806e:	429a      	cmp	r2, r3
 8008070:	d22b      	bcs.n	80080ca <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800807c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807e:	1c5a      	adds	r2, r3, #1
 8008080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008082:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008084:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808c:	d112      	bne.n	80080b4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008092:	2b00      	cmp	r3, #0
 8008094:	d016      	beq.n	80080c4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	3324      	adds	r3, #36	; 0x24
 800809a:	4618      	mov	r0, r3
 800809c:	f001 f8c2 	bl	8009224 <xTaskRemoveFromEventList>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00e      	beq.n	80080c4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00b      	beq.n	80080c4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	2201      	movs	r2, #1
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	e007      	b.n	80080c4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080b8:	3301      	adds	r3, #1
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	b25a      	sxtb	r2, r3
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80080c4:	2301      	movs	r3, #1
 80080c6:	637b      	str	r3, [r7, #52]	; 0x34
 80080c8:	e001      	b.n	80080ce <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	637b      	str	r3, [r7, #52]	; 0x34
 80080ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f383 8811 	msr	BASEPRI, r3
}
 80080d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3738      	adds	r7, #56	; 0x38
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b08c      	sub	sp, #48	; 0x30
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80080f0:	2300      	movs	r3, #0
 80080f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80080f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10a      	bne.n	8008114 <xQueueReceive+0x30>
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	623b      	str	r3, [r7, #32]
}
 8008110:	bf00      	nop
 8008112:	e7fe      	b.n	8008112 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d103      	bne.n	8008122 <xQueueReceive+0x3e>
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <xQueueReceive+0x42>
 8008122:	2301      	movs	r3, #1
 8008124:	e000      	b.n	8008128 <xQueueReceive+0x44>
 8008126:	2300      	movs	r3, #0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10a      	bne.n	8008142 <xQueueReceive+0x5e>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	61fb      	str	r3, [r7, #28]
}
 800813e:	bf00      	nop
 8008140:	e7fe      	b.n	8008140 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008142:	f001 fa2d 	bl	80095a0 <xTaskGetSchedulerState>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d102      	bne.n	8008152 <xQueueReceive+0x6e>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <xQueueReceive+0x72>
 8008152:	2301      	movs	r3, #1
 8008154:	e000      	b.n	8008158 <xQueueReceive+0x74>
 8008156:	2300      	movs	r3, #0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10a      	bne.n	8008172 <xQueueReceive+0x8e>
	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	61bb      	str	r3, [r7, #24]
}
 800816e:	bf00      	nop
 8008170:	e7fe      	b.n	8008170 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008172:	f002 f86f 	bl	800a254 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	2b00      	cmp	r3, #0
 8008180:	d01f      	beq.n	80081c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008182:	68b9      	ldr	r1, [r7, #8]
 8008184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008186:	f000 fabe 	bl	8008706 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	1e5a      	subs	r2, r3, #1
 800818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008190:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00f      	beq.n	80081ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800819a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819c:	3310      	adds	r3, #16
 800819e:	4618      	mov	r0, r3
 80081a0:	f001 f840 	bl	8009224 <xTaskRemoveFromEventList>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d007      	beq.n	80081ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80081aa:	4b3d      	ldr	r3, [pc, #244]	; (80082a0 <xQueueReceive+0x1bc>)
 80081ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081ba:	f002 f87b 	bl	800a2b4 <vPortExitCritical>
				return pdPASS;
 80081be:	2301      	movs	r3, #1
 80081c0:	e069      	b.n	8008296 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d103      	bne.n	80081d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081c8:	f002 f874 	bl	800a2b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081cc:	2300      	movs	r3, #0
 80081ce:	e062      	b.n	8008296 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d106      	bne.n	80081e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081d6:	f107 0310 	add.w	r3, r7, #16
 80081da:	4618      	mov	r0, r3
 80081dc:	f001 f886 	bl	80092ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081e0:	2301      	movs	r3, #1
 80081e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081e4:	f002 f866 	bl	800a2b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081e8:	f000 fdf8 	bl	8008ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081ec:	f002 f832 	bl	800a254 <vPortEnterCritical>
 80081f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081f6:	b25b      	sxtb	r3, r3
 80081f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fc:	d103      	bne.n	8008206 <xQueueReceive+0x122>
 80081fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008200:	2200      	movs	r2, #0
 8008202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800820c:	b25b      	sxtb	r3, r3
 800820e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008212:	d103      	bne.n	800821c <xQueueReceive+0x138>
 8008214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008216:	2200      	movs	r2, #0
 8008218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800821c:	f002 f84a 	bl	800a2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008220:	1d3a      	adds	r2, r7, #4
 8008222:	f107 0310 	add.w	r3, r7, #16
 8008226:	4611      	mov	r1, r2
 8008228:	4618      	mov	r0, r3
 800822a:	f001 f875 	bl	8009318 <xTaskCheckForTimeOut>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d123      	bne.n	800827c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008236:	f000 fade 	bl	80087f6 <prvIsQueueEmpty>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d017      	beq.n	8008270 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008242:	3324      	adds	r3, #36	; 0x24
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	4611      	mov	r1, r2
 8008248:	4618      	mov	r0, r3
 800824a:	f000 ff9b 	bl	8009184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800824e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008250:	f000 fa7f 	bl	8008752 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008254:	f000 fdd0 	bl	8008df8 <xTaskResumeAll>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d189      	bne.n	8008172 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800825e:	4b10      	ldr	r3, [pc, #64]	; (80082a0 <xQueueReceive+0x1bc>)
 8008260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	e780      	b.n	8008172 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008272:	f000 fa6e 	bl	8008752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008276:	f000 fdbf 	bl	8008df8 <xTaskResumeAll>
 800827a:	e77a      	b.n	8008172 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800827c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800827e:	f000 fa68 	bl	8008752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008282:	f000 fdb9 	bl	8008df8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008288:	f000 fab5 	bl	80087f6 <prvIsQueueEmpty>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	f43f af6f 	beq.w	8008172 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008294:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008296:	4618      	mov	r0, r3
 8008298:	3730      	adds	r7, #48	; 0x30
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	e000ed04 	.word	0xe000ed04

080082a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08e      	sub	sp, #56	; 0x38
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80082ae:	2300      	movs	r3, #0
 80082b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80082b6:	2300      	movs	r3, #0
 80082b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10a      	bne.n	80082d6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	623b      	str	r3, [r7, #32]
}
 80082d2:	bf00      	nop
 80082d4:	e7fe      	b.n	80082d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80082d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	61fb      	str	r3, [r7, #28]
}
 80082f0:	bf00      	nop
 80082f2:	e7fe      	b.n	80082f2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082f4:	f001 f954 	bl	80095a0 <xTaskGetSchedulerState>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d102      	bne.n	8008304 <xQueueSemaphoreTake+0x60>
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <xQueueSemaphoreTake+0x64>
 8008304:	2301      	movs	r3, #1
 8008306:	e000      	b.n	800830a <xQueueSemaphoreTake+0x66>
 8008308:	2300      	movs	r3, #0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10a      	bne.n	8008324 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800830e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	61bb      	str	r3, [r7, #24]
}
 8008320:	bf00      	nop
 8008322:	e7fe      	b.n	8008322 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008324:	f001 ff96 	bl	800a254 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800832e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008330:	2b00      	cmp	r3, #0
 8008332:	d024      	beq.n	800837e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	1e5a      	subs	r2, r3, #1
 8008338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800833c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d104      	bne.n	800834e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008344:	f001 faa2 	bl	800988c <pvTaskIncrementMutexHeldCount>
 8008348:	4602      	mov	r2, r0
 800834a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00f      	beq.n	8008376 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008358:	3310      	adds	r3, #16
 800835a:	4618      	mov	r0, r3
 800835c:	f000 ff62 	bl	8009224 <xTaskRemoveFromEventList>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d007      	beq.n	8008376 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008366:	4b54      	ldr	r3, [pc, #336]	; (80084b8 <xQueueSemaphoreTake+0x214>)
 8008368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800836c:	601a      	str	r2, [r3, #0]
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008376:	f001 ff9d 	bl	800a2b4 <vPortExitCritical>
				return pdPASS;
 800837a:	2301      	movs	r3, #1
 800837c:	e097      	b.n	80084ae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d111      	bne.n	80083a8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	617b      	str	r3, [r7, #20]
}
 800839c:	bf00      	nop
 800839e:	e7fe      	b.n	800839e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80083a0:	f001 ff88 	bl	800a2b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083a4:	2300      	movs	r3, #0
 80083a6:	e082      	b.n	80084ae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d106      	bne.n	80083bc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083ae:	f107 030c 	add.w	r3, r7, #12
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 ff9a 	bl	80092ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083b8:	2301      	movs	r3, #1
 80083ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083bc:	f001 ff7a 	bl	800a2b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083c0:	f000 fd0c 	bl	8008ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083c4:	f001 ff46 	bl	800a254 <vPortEnterCritical>
 80083c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083ce:	b25b      	sxtb	r3, r3
 80083d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d4:	d103      	bne.n	80083de <xQueueSemaphoreTake+0x13a>
 80083d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083e4:	b25b      	sxtb	r3, r3
 80083e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ea:	d103      	bne.n	80083f4 <xQueueSemaphoreTake+0x150>
 80083ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083f4:	f001 ff5e 	bl	800a2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083f8:	463a      	mov	r2, r7
 80083fa:	f107 030c 	add.w	r3, r7, #12
 80083fe:	4611      	mov	r1, r2
 8008400:	4618      	mov	r0, r3
 8008402:	f000 ff89 	bl	8009318 <xTaskCheckForTimeOut>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d132      	bne.n	8008472 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800840c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800840e:	f000 f9f2 	bl	80087f6 <prvIsQueueEmpty>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d026      	beq.n	8008466 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d109      	bne.n	8008434 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008420:	f001 ff18 	bl	800a254 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	4618      	mov	r0, r3
 800842a:	f001 f8d7 	bl	80095dc <xTaskPriorityInherit>
 800842e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008430:	f001 ff40 	bl	800a2b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008436:	3324      	adds	r3, #36	; 0x24
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	4611      	mov	r1, r2
 800843c:	4618      	mov	r0, r3
 800843e:	f000 fea1 	bl	8009184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008442:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008444:	f000 f985 	bl	8008752 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008448:	f000 fcd6 	bl	8008df8 <xTaskResumeAll>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	f47f af68 	bne.w	8008324 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008454:	4b18      	ldr	r3, [pc, #96]	; (80084b8 <xQueueSemaphoreTake+0x214>)
 8008456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	e75e      	b.n	8008324 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008466:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008468:	f000 f973 	bl	8008752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800846c:	f000 fcc4 	bl	8008df8 <xTaskResumeAll>
 8008470:	e758      	b.n	8008324 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008472:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008474:	f000 f96d 	bl	8008752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008478:	f000 fcbe 	bl	8008df8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800847c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800847e:	f000 f9ba 	bl	80087f6 <prvIsQueueEmpty>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	f43f af4d 	beq.w	8008324 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800848a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00d      	beq.n	80084ac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008490:	f001 fee0 	bl	800a254 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008494:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008496:	f000 f8b4 	bl	8008602 <prvGetDisinheritPriorityAfterTimeout>
 800849a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800849c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084a2:	4618      	mov	r0, r3
 80084a4:	f001 f970 	bl	8009788 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80084a8:	f001 ff04 	bl	800a2b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3738      	adds	r7, #56	; 0x38
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	e000ed04 	.word	0xe000ed04

080084bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b08e      	sub	sp, #56	; 0x38
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10a      	bne.n	80084e8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80084d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	623b      	str	r3, [r7, #32]
}
 80084e4:	bf00      	nop
 80084e6:	e7fe      	b.n	80084e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d103      	bne.n	80084f6 <xQueueReceiveFromISR+0x3a>
 80084ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d101      	bne.n	80084fa <xQueueReceiveFromISR+0x3e>
 80084f6:	2301      	movs	r3, #1
 80084f8:	e000      	b.n	80084fc <xQueueReceiveFromISR+0x40>
 80084fa:	2300      	movs	r3, #0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10a      	bne.n	8008516 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	61fb      	str	r3, [r7, #28]
}
 8008512:	bf00      	nop
 8008514:	e7fe      	b.n	8008514 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008516:	f001 ff7f 	bl	800a418 <vPortValidateInterruptPriority>
	__asm volatile
 800851a:	f3ef 8211 	mrs	r2, BASEPRI
 800851e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	61ba      	str	r2, [r7, #24]
 8008530:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008532:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008534:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800853c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853e:	2b00      	cmp	r3, #0
 8008540:	d02f      	beq.n	80085a2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008544:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800854c:	68b9      	ldr	r1, [r7, #8]
 800854e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008550:	f000 f8d9 	bl	8008706 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008556:	1e5a      	subs	r2, r3, #1
 8008558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800855c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008564:	d112      	bne.n	800858c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d016      	beq.n	800859c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	3310      	adds	r3, #16
 8008572:	4618      	mov	r0, r3
 8008574:	f000 fe56 	bl	8009224 <xTaskRemoveFromEventList>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00e      	beq.n	800859c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00b      	beq.n	800859c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	e007      	b.n	800859c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800858c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008590:	3301      	adds	r3, #1
 8008592:	b2db      	uxtb	r3, r3
 8008594:	b25a      	sxtb	r2, r3
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800859c:	2301      	movs	r3, #1
 800859e:	637b      	str	r3, [r7, #52]	; 0x34
 80085a0:	e001      	b.n	80085a6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80085a2:	2300      	movs	r3, #0
 80085a4:	637b      	str	r3, [r7, #52]	; 0x34
 80085a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	f383 8811 	msr	BASEPRI, r3
}
 80085b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3738      	adds	r7, #56	; 0x38
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10a      	bne.n	80085e4 <vQueueDelete+0x28>
	__asm volatile
 80085ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	60bb      	str	r3, [r7, #8]
}
 80085e0:	bf00      	nop
 80085e2:	e7fe      	b.n	80085e2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 f95f 	bl	80088a8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d102      	bne.n	80085fa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f002 f81b 	bl	800a630 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80085fa:	bf00      	nop
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008602:	b480      	push	{r7}
 8008604:	b085      	sub	sp, #20
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860e:	2b00      	cmp	r3, #0
 8008610:	d006      	beq.n	8008620 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800861c:	60fb      	str	r3, [r7, #12]
 800861e:	e001      	b.n	8008624 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008620:	2300      	movs	r3, #0
 8008622:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008624:	68fb      	ldr	r3, [r7, #12]
	}
 8008626:	4618      	mov	r0, r3
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b086      	sub	sp, #24
 8008636:	af00      	add	r7, sp, #0
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	60b9      	str	r1, [r7, #8]
 800863c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800863e:	2300      	movs	r3, #0
 8008640:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008646:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10d      	bne.n	800866c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d14d      	bne.n	80086f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	4618      	mov	r0, r3
 800865e:	f001 f825 	bl	80096ac <xTaskPriorityDisinherit>
 8008662:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	609a      	str	r2, [r3, #8]
 800866a:	e043      	b.n	80086f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d119      	bne.n	80086a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6858      	ldr	r0, [r3, #4]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867a:	461a      	mov	r2, r3
 800867c:	68b9      	ldr	r1, [r7, #8]
 800867e:	f002 f91f 	bl	800a8c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868a:	441a      	add	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	685a      	ldr	r2, [r3, #4]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	429a      	cmp	r2, r3
 800869a:	d32b      	bcc.n	80086f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	605a      	str	r2, [r3, #4]
 80086a4:	e026      	b.n	80086f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	68d8      	ldr	r0, [r3, #12]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ae:	461a      	mov	r2, r3
 80086b0:	68b9      	ldr	r1, [r7, #8]
 80086b2:	f002 f905 	bl	800a8c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	68da      	ldr	r2, [r3, #12]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086be:	425b      	negs	r3, r3
 80086c0:	441a      	add	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	68da      	ldr	r2, [r3, #12]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d207      	bcs.n	80086e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	689a      	ldr	r2, [r3, #8]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086da:	425b      	negs	r3, r3
 80086dc:	441a      	add	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d105      	bne.n	80086f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d002      	beq.n	80086f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80086fc:	697b      	ldr	r3, [r7, #20]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3718      	adds	r7, #24
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008714:	2b00      	cmp	r3, #0
 8008716:	d018      	beq.n	800874a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68da      	ldr	r2, [r3, #12]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008720:	441a      	add	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68da      	ldr	r2, [r3, #12]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	429a      	cmp	r2, r3
 8008730:	d303      	bcc.n	800873a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68d9      	ldr	r1, [r3, #12]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	461a      	mov	r2, r3
 8008744:	6838      	ldr	r0, [r7, #0]
 8008746:	f002 f8bb 	bl	800a8c0 <memcpy>
	}
}
 800874a:	bf00      	nop
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b084      	sub	sp, #16
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800875a:	f001 fd7b 	bl	800a254 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008764:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008766:	e011      	b.n	800878c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	2b00      	cmp	r3, #0
 800876e:	d012      	beq.n	8008796 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	3324      	adds	r3, #36	; 0x24
 8008774:	4618      	mov	r0, r3
 8008776:	f000 fd55 	bl	8009224 <xTaskRemoveFromEventList>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008780:	f000 fe2c 	bl	80093dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008784:	7bfb      	ldrb	r3, [r7, #15]
 8008786:	3b01      	subs	r3, #1
 8008788:	b2db      	uxtb	r3, r3
 800878a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800878c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008790:	2b00      	cmp	r3, #0
 8008792:	dce9      	bgt.n	8008768 <prvUnlockQueue+0x16>
 8008794:	e000      	b.n	8008798 <prvUnlockQueue+0x46>
					break;
 8008796:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	22ff      	movs	r2, #255	; 0xff
 800879c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80087a0:	f001 fd88 	bl	800a2b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80087a4:	f001 fd56 	bl	800a254 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087b0:	e011      	b.n	80087d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d012      	beq.n	80087e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	3310      	adds	r3, #16
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 fd30 	bl	8009224 <xTaskRemoveFromEventList>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087ca:	f000 fe07 	bl	80093dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
 80087d0:	3b01      	subs	r3, #1
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	dce9      	bgt.n	80087b2 <prvUnlockQueue+0x60>
 80087de:	e000      	b.n	80087e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	22ff      	movs	r2, #255	; 0xff
 80087e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80087ea:	f001 fd63 	bl	800a2b4 <vPortExitCritical>
}
 80087ee:	bf00      	nop
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087fe:	f001 fd29 	bl	800a254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008806:	2b00      	cmp	r3, #0
 8008808:	d102      	bne.n	8008810 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800880a:	2301      	movs	r3, #1
 800880c:	60fb      	str	r3, [r7, #12]
 800880e:	e001      	b.n	8008814 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008810:	2300      	movs	r3, #0
 8008812:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008814:	f001 fd4e 	bl	800a2b4 <vPortExitCritical>

	return xReturn;
 8008818:	68fb      	ldr	r3, [r7, #12]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b084      	sub	sp, #16
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800882a:	f001 fd13 	bl	800a254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008836:	429a      	cmp	r2, r3
 8008838:	d102      	bne.n	8008840 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800883a:	2301      	movs	r3, #1
 800883c:	60fb      	str	r3, [r7, #12]
 800883e:	e001      	b.n	8008844 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008840:	2300      	movs	r3, #0
 8008842:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008844:	f001 fd36 	bl	800a2b4 <vPortExitCritical>

	return xReturn;
 8008848:	68fb      	ldr	r3, [r7, #12]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
	...

08008854 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800885e:	2300      	movs	r3, #0
 8008860:	60fb      	str	r3, [r7, #12]
 8008862:	e014      	b.n	800888e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008864:	4a0f      	ldr	r2, [pc, #60]	; (80088a4 <vQueueAddToRegistry+0x50>)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10b      	bne.n	8008888 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008870:	490c      	ldr	r1, [pc, #48]	; (80088a4 <vQueueAddToRegistry+0x50>)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800887a:	4a0a      	ldr	r2, [pc, #40]	; (80088a4 <vQueueAddToRegistry+0x50>)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	00db      	lsls	r3, r3, #3
 8008880:	4413      	add	r3, r2
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008886:	e006      	b.n	8008896 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	3301      	adds	r3, #1
 800888c:	60fb      	str	r3, [r7, #12]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2b07      	cmp	r3, #7
 8008892:	d9e7      	bls.n	8008864 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008894:	bf00      	nop
 8008896:	bf00      	nop
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	2000210c 	.word	0x2000210c

080088a8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088b0:	2300      	movs	r3, #0
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	e016      	b.n	80088e4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80088b6:	4a10      	ldr	r2, [pc, #64]	; (80088f8 <vQueueUnregisterQueue+0x50>)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	00db      	lsls	r3, r3, #3
 80088bc:	4413      	add	r3, r2
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d10b      	bne.n	80088de <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80088c6:	4a0c      	ldr	r2, [pc, #48]	; (80088f8 <vQueueUnregisterQueue+0x50>)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2100      	movs	r1, #0
 80088cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80088d0:	4a09      	ldr	r2, [pc, #36]	; (80088f8 <vQueueUnregisterQueue+0x50>)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	00db      	lsls	r3, r3, #3
 80088d6:	4413      	add	r3, r2
 80088d8:	2200      	movs	r2, #0
 80088da:	605a      	str	r2, [r3, #4]
				break;
 80088dc:	e006      	b.n	80088ec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3301      	adds	r3, #1
 80088e2:	60fb      	str	r3, [r7, #12]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b07      	cmp	r3, #7
 80088e8:	d9e5      	bls.n	80088b6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80088ea:	bf00      	nop
 80088ec:	bf00      	nop
 80088ee:	3714      	adds	r7, #20
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr
 80088f8:	2000210c 	.word	0x2000210c

080088fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800890c:	f001 fca2 	bl	800a254 <vPortEnterCritical>
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008916:	b25b      	sxtb	r3, r3
 8008918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800891c:	d103      	bne.n	8008926 <vQueueWaitForMessageRestricted+0x2a>
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800892c:	b25b      	sxtb	r3, r3
 800892e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008932:	d103      	bne.n	800893c <vQueueWaitForMessageRestricted+0x40>
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800893c:	f001 fcba 	bl	800a2b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008944:	2b00      	cmp	r3, #0
 8008946:	d106      	bne.n	8008956 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	3324      	adds	r3, #36	; 0x24
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	68b9      	ldr	r1, [r7, #8]
 8008950:	4618      	mov	r0, r3
 8008952:	f000 fc3b 	bl	80091cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008956:	6978      	ldr	r0, [r7, #20]
 8008958:	f7ff fefb 	bl	8008752 <prvUnlockQueue>
	}
 800895c:	bf00      	nop
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008964:	b580      	push	{r7, lr}
 8008966:	b08e      	sub	sp, #56	; 0x38
 8008968:	af04      	add	r7, sp, #16
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
 8008970:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10a      	bne.n	800898e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897c:	f383 8811 	msr	BASEPRI, r3
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	623b      	str	r3, [r7, #32]
}
 800898a:	bf00      	nop
 800898c:	e7fe      	b.n	800898c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800898e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10a      	bne.n	80089aa <xTaskCreateStatic+0x46>
	__asm volatile
 8008994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	61fb      	str	r3, [r7, #28]
}
 80089a6:	bf00      	nop
 80089a8:	e7fe      	b.n	80089a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80089aa:	235c      	movs	r3, #92	; 0x5c
 80089ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	2b5c      	cmp	r3, #92	; 0x5c
 80089b2:	d00a      	beq.n	80089ca <xTaskCreateStatic+0x66>
	__asm volatile
 80089b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	61bb      	str	r3, [r7, #24]
}
 80089c6:	bf00      	nop
 80089c8:	e7fe      	b.n	80089c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80089ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80089cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d01e      	beq.n	8008a10 <xTaskCreateStatic+0xac>
 80089d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d01b      	beq.n	8008a10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	2202      	movs	r2, #2
 80089e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089ea:	2300      	movs	r3, #0
 80089ec:	9303      	str	r3, [sp, #12]
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	9302      	str	r3, [sp, #8]
 80089f2:	f107 0314 	add.w	r3, r7, #20
 80089f6:	9301      	str	r3, [sp, #4]
 80089f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	68b9      	ldr	r1, [r7, #8]
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f000 f850 	bl	8008aa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a0a:	f000 f8dd 	bl	8008bc8 <prvAddNewTaskToReadyList>
 8008a0e:	e001      	b.n	8008a14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008a10:	2300      	movs	r3, #0
 8008a12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a14:	697b      	ldr	r3, [r7, #20]
	}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3728      	adds	r7, #40	; 0x28
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b08c      	sub	sp, #48	; 0x30
 8008a22:	af04      	add	r7, sp, #16
 8008a24:	60f8      	str	r0, [r7, #12]
 8008a26:	60b9      	str	r1, [r7, #8]
 8008a28:	603b      	str	r3, [r7, #0]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a2e:	88fb      	ldrh	r3, [r7, #6]
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4618      	mov	r0, r3
 8008a34:	f001 fd30 	bl	800a498 <pvPortMalloc>
 8008a38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00e      	beq.n	8008a5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a40:	205c      	movs	r0, #92	; 0x5c
 8008a42:	f001 fd29 	bl	800a498 <pvPortMalloc>
 8008a46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d003      	beq.n	8008a56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	631a      	str	r2, [r3, #48]	; 0x30
 8008a54:	e005      	b.n	8008a62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a56:	6978      	ldr	r0, [r7, #20]
 8008a58:	f001 fdea 	bl	800a630 <vPortFree>
 8008a5c:	e001      	b.n	8008a62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d017      	beq.n	8008a98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a70:	88fa      	ldrh	r2, [r7, #6]
 8008a72:	2300      	movs	r3, #0
 8008a74:	9303      	str	r3, [sp, #12]
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	9302      	str	r3, [sp, #8]
 8008a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7c:	9301      	str	r3, [sp, #4]
 8008a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	68b9      	ldr	r1, [r7, #8]
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f000 f80e 	bl	8008aa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a8c:	69f8      	ldr	r0, [r7, #28]
 8008a8e:	f000 f89b 	bl	8008bc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a92:	2301      	movs	r3, #1
 8008a94:	61bb      	str	r3, [r7, #24]
 8008a96:	e002      	b.n	8008a9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a98:	f04f 33ff 	mov.w	r3, #4294967295
 8008a9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a9e:	69bb      	ldr	r3, [r7, #24]
	}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3720      	adds	r7, #32
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b088      	sub	sp, #32
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
 8008ab4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	461a      	mov	r2, r3
 8008ac0:	21a5      	movs	r1, #165	; 0xa5
 8008ac2:	f001 ff25 	bl	800a910 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4413      	add	r3, r2
 8008ad6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	f023 0307 	bic.w	r3, r3, #7
 8008ade:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	f003 0307 	and.w	r3, r3, #7
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00a      	beq.n	8008b00 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	617b      	str	r3, [r7, #20]
}
 8008afc:	bf00      	nop
 8008afe:	e7fe      	b.n	8008afe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d01f      	beq.n	8008b46 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b06:	2300      	movs	r3, #0
 8008b08:	61fb      	str	r3, [r7, #28]
 8008b0a:	e012      	b.n	8008b32 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	4413      	add	r3, r2
 8008b12:	7819      	ldrb	r1, [r3, #0]
 8008b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	4413      	add	r3, r2
 8008b1a:	3334      	adds	r3, #52	; 0x34
 8008b1c:	460a      	mov	r2, r1
 8008b1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	4413      	add	r3, r2
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d006      	beq.n	8008b3a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	61fb      	str	r3, [r7, #28]
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	2b0f      	cmp	r3, #15
 8008b36:	d9e9      	bls.n	8008b0c <prvInitialiseNewTask+0x64>
 8008b38:	e000      	b.n	8008b3c <prvInitialiseNewTask+0x94>
			{
				break;
 8008b3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b44:	e003      	b.n	8008b4e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b50:	2b37      	cmp	r3, #55	; 0x37
 8008b52:	d901      	bls.n	8008b58 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b54:	2337      	movs	r3, #55	; 0x37
 8008b56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b66:	2200      	movs	r2, #0
 8008b68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fe fe56 	bl	8007820 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b76:	3318      	adds	r3, #24
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fe fe51 	bl	8007820 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b96:	2200      	movs	r2, #0
 8008b98:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ba2:	683a      	ldr	r2, [r7, #0]
 8008ba4:	68f9      	ldr	r1, [r7, #12]
 8008ba6:	69b8      	ldr	r0, [r7, #24]
 8008ba8:	f001 fa26 	bl	8009ff8 <pxPortInitialiseStack>
 8008bac:	4602      	mov	r2, r0
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d002      	beq.n	8008bbe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bbe:	bf00      	nop
 8008bc0:	3720      	adds	r7, #32
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
	...

08008bc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008bd0:	f001 fb40 	bl	800a254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008bd4:	4b2d      	ldr	r3, [pc, #180]	; (8008c8c <prvAddNewTaskToReadyList+0xc4>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	4a2c      	ldr	r2, [pc, #176]	; (8008c8c <prvAddNewTaskToReadyList+0xc4>)
 8008bdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008bde:	4b2c      	ldr	r3, [pc, #176]	; (8008c90 <prvAddNewTaskToReadyList+0xc8>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d109      	bne.n	8008bfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008be6:	4a2a      	ldr	r2, [pc, #168]	; (8008c90 <prvAddNewTaskToReadyList+0xc8>)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008bec:	4b27      	ldr	r3, [pc, #156]	; (8008c8c <prvAddNewTaskToReadyList+0xc4>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d110      	bne.n	8008c16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008bf4:	f000 fc16 	bl	8009424 <prvInitialiseTaskLists>
 8008bf8:	e00d      	b.n	8008c16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008bfa:	4b26      	ldr	r3, [pc, #152]	; (8008c94 <prvAddNewTaskToReadyList+0xcc>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d109      	bne.n	8008c16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c02:	4b23      	ldr	r3, [pc, #140]	; (8008c90 <prvAddNewTaskToReadyList+0xc8>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d802      	bhi.n	8008c16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c10:	4a1f      	ldr	r2, [pc, #124]	; (8008c90 <prvAddNewTaskToReadyList+0xc8>)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c16:	4b20      	ldr	r3, [pc, #128]	; (8008c98 <prvAddNewTaskToReadyList+0xd0>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	4a1e      	ldr	r2, [pc, #120]	; (8008c98 <prvAddNewTaskToReadyList+0xd0>)
 8008c1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c20:	4b1d      	ldr	r3, [pc, #116]	; (8008c98 <prvAddNewTaskToReadyList+0xd0>)
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c2c:	4b1b      	ldr	r3, [pc, #108]	; (8008c9c <prvAddNewTaskToReadyList+0xd4>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d903      	bls.n	8008c3c <prvAddNewTaskToReadyList+0x74>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c38:	4a18      	ldr	r2, [pc, #96]	; (8008c9c <prvAddNewTaskToReadyList+0xd4>)
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c40:	4613      	mov	r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	4413      	add	r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4a15      	ldr	r2, [pc, #84]	; (8008ca0 <prvAddNewTaskToReadyList+0xd8>)
 8008c4a:	441a      	add	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3304      	adds	r3, #4
 8008c50:	4619      	mov	r1, r3
 8008c52:	4610      	mov	r0, r2
 8008c54:	f7fe fdf1 	bl	800783a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c58:	f001 fb2c 	bl	800a2b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c5c:	4b0d      	ldr	r3, [pc, #52]	; (8008c94 <prvAddNewTaskToReadyList+0xcc>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00e      	beq.n	8008c82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c64:	4b0a      	ldr	r3, [pc, #40]	; (8008c90 <prvAddNewTaskToReadyList+0xc8>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d207      	bcs.n	8008c82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c72:	4b0c      	ldr	r3, [pc, #48]	; (8008ca4 <prvAddNewTaskToReadyList+0xdc>)
 8008c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c78:	601a      	str	r2, [r3, #0]
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c82:	bf00      	nop
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	200010dc 	.word	0x200010dc
 8008c90:	20000c08 	.word	0x20000c08
 8008c94:	200010e8 	.word	0x200010e8
 8008c98:	200010f8 	.word	0x200010f8
 8008c9c:	200010e4 	.word	0x200010e4
 8008ca0:	20000c0c 	.word	0x20000c0c
 8008ca4:	e000ed04 	.word	0xe000ed04

08008ca8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d017      	beq.n	8008cea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008cba:	4b13      	ldr	r3, [pc, #76]	; (8008d08 <vTaskDelay+0x60>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00a      	beq.n	8008cd8 <vTaskDelay+0x30>
	__asm volatile
 8008cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	60bb      	str	r3, [r7, #8]
}
 8008cd4:	bf00      	nop
 8008cd6:	e7fe      	b.n	8008cd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008cd8:	f000 f880 	bl	8008ddc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008cdc:	2100      	movs	r1, #0
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fde8 	bl	80098b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ce4:	f000 f888 	bl	8008df8 <xTaskResumeAll>
 8008ce8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d107      	bne.n	8008d00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008cf0:	4b06      	ldr	r3, [pc, #24]	; (8008d0c <vTaskDelay+0x64>)
 8008cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cf6:	601a      	str	r2, [r3, #0]
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d00:	bf00      	nop
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	20001104 	.word	0x20001104
 8008d0c:	e000ed04 	.word	0xe000ed04

08008d10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b08a      	sub	sp, #40	; 0x28
 8008d14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d16:	2300      	movs	r3, #0
 8008d18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d1e:	463a      	mov	r2, r7
 8008d20:	1d39      	adds	r1, r7, #4
 8008d22:	f107 0308 	add.w	r3, r7, #8
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fe fd26 	bl	8007778 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	9202      	str	r2, [sp, #8]
 8008d34:	9301      	str	r3, [sp, #4]
 8008d36:	2300      	movs	r3, #0
 8008d38:	9300      	str	r3, [sp, #0]
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	460a      	mov	r2, r1
 8008d3e:	4921      	ldr	r1, [pc, #132]	; (8008dc4 <vTaskStartScheduler+0xb4>)
 8008d40:	4821      	ldr	r0, [pc, #132]	; (8008dc8 <vTaskStartScheduler+0xb8>)
 8008d42:	f7ff fe0f 	bl	8008964 <xTaskCreateStatic>
 8008d46:	4603      	mov	r3, r0
 8008d48:	4a20      	ldr	r2, [pc, #128]	; (8008dcc <vTaskStartScheduler+0xbc>)
 8008d4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d4c:	4b1f      	ldr	r3, [pc, #124]	; (8008dcc <vTaskStartScheduler+0xbc>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d002      	beq.n	8008d5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d54:	2301      	movs	r3, #1
 8008d56:	617b      	str	r3, [r7, #20]
 8008d58:	e001      	b.n	8008d5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d102      	bne.n	8008d6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d64:	f000 fdfa 	bl	800995c <xTimerCreateTimerTask>
 8008d68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d116      	bne.n	8008d9e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	613b      	str	r3, [r7, #16]
}
 8008d82:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d84:	4b12      	ldr	r3, [pc, #72]	; (8008dd0 <vTaskStartScheduler+0xc0>)
 8008d86:	f04f 32ff 	mov.w	r2, #4294967295
 8008d8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d8c:	4b11      	ldr	r3, [pc, #68]	; (8008dd4 <vTaskStartScheduler+0xc4>)
 8008d8e:	2201      	movs	r2, #1
 8008d90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d92:	4b11      	ldr	r3, [pc, #68]	; (8008dd8 <vTaskStartScheduler+0xc8>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d98:	f001 f9ba 	bl	800a110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d9c:	e00e      	b.n	8008dbc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da4:	d10a      	bne.n	8008dbc <vTaskStartScheduler+0xac>
	__asm volatile
 8008da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008daa:	f383 8811 	msr	BASEPRI, r3
 8008dae:	f3bf 8f6f 	isb	sy
 8008db2:	f3bf 8f4f 	dsb	sy
 8008db6:	60fb      	str	r3, [r7, #12]
}
 8008db8:	bf00      	nop
 8008dba:	e7fe      	b.n	8008dba <vTaskStartScheduler+0xaa>
}
 8008dbc:	bf00      	nop
 8008dbe:	3718      	adds	r7, #24
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	0800b1dc 	.word	0x0800b1dc
 8008dc8:	080093f5 	.word	0x080093f5
 8008dcc:	20001100 	.word	0x20001100
 8008dd0:	200010fc 	.word	0x200010fc
 8008dd4:	200010e8 	.word	0x200010e8
 8008dd8:	200010e0 	.word	0x200010e0

08008ddc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008de0:	4b04      	ldr	r3, [pc, #16]	; (8008df4 <vTaskSuspendAll+0x18>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	3301      	adds	r3, #1
 8008de6:	4a03      	ldr	r2, [pc, #12]	; (8008df4 <vTaskSuspendAll+0x18>)
 8008de8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008dea:	bf00      	nop
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr
 8008df4:	20001104 	.word	0x20001104

08008df8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e06:	4b42      	ldr	r3, [pc, #264]	; (8008f10 <xTaskResumeAll+0x118>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10a      	bne.n	8008e24 <xTaskResumeAll+0x2c>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	603b      	str	r3, [r7, #0]
}
 8008e20:	bf00      	nop
 8008e22:	e7fe      	b.n	8008e22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e24:	f001 fa16 	bl	800a254 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e28:	4b39      	ldr	r3, [pc, #228]	; (8008f10 <xTaskResumeAll+0x118>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	4a38      	ldr	r2, [pc, #224]	; (8008f10 <xTaskResumeAll+0x118>)
 8008e30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e32:	4b37      	ldr	r3, [pc, #220]	; (8008f10 <xTaskResumeAll+0x118>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d162      	bne.n	8008f00 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e3a:	4b36      	ldr	r3, [pc, #216]	; (8008f14 <xTaskResumeAll+0x11c>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d05e      	beq.n	8008f00 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e42:	e02f      	b.n	8008ea4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e44:	4b34      	ldr	r3, [pc, #208]	; (8008f18 <xTaskResumeAll+0x120>)
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	3318      	adds	r3, #24
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7fe fd4f 	bl	80078f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3304      	adds	r3, #4
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fe fd4a 	bl	80078f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e64:	4b2d      	ldr	r3, [pc, #180]	; (8008f1c <xTaskResumeAll+0x124>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d903      	bls.n	8008e74 <xTaskResumeAll+0x7c>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e70:	4a2a      	ldr	r2, [pc, #168]	; (8008f1c <xTaskResumeAll+0x124>)
 8008e72:	6013      	str	r3, [r2, #0]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e78:	4613      	mov	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	4413      	add	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4a27      	ldr	r2, [pc, #156]	; (8008f20 <xTaskResumeAll+0x128>)
 8008e82:	441a      	add	r2, r3
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	3304      	adds	r3, #4
 8008e88:	4619      	mov	r1, r3
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	f7fe fcd5 	bl	800783a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e94:	4b23      	ldr	r3, [pc, #140]	; (8008f24 <xTaskResumeAll+0x12c>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d302      	bcc.n	8008ea4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008e9e:	4b22      	ldr	r3, [pc, #136]	; (8008f28 <xTaskResumeAll+0x130>)
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ea4:	4b1c      	ldr	r3, [pc, #112]	; (8008f18 <xTaskResumeAll+0x120>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1cb      	bne.n	8008e44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008eb2:	f000 fb55 	bl	8009560 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008eb6:	4b1d      	ldr	r3, [pc, #116]	; (8008f2c <xTaskResumeAll+0x134>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d010      	beq.n	8008ee4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ec2:	f000 f847 	bl	8008f54 <xTaskIncrementTick>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008ecc:	4b16      	ldr	r3, [pc, #88]	; (8008f28 <xTaskResumeAll+0x130>)
 8008ece:	2201      	movs	r2, #1
 8008ed0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1f1      	bne.n	8008ec2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008ede:	4b13      	ldr	r3, [pc, #76]	; (8008f2c <xTaskResumeAll+0x134>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ee4:	4b10      	ldr	r3, [pc, #64]	; (8008f28 <xTaskResumeAll+0x130>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d009      	beq.n	8008f00 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008eec:	2301      	movs	r3, #1
 8008eee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ef0:	4b0f      	ldr	r3, [pc, #60]	; (8008f30 <xTaskResumeAll+0x138>)
 8008ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f00:	f001 f9d8 	bl	800a2b4 <vPortExitCritical>

	return xAlreadyYielded;
 8008f04:	68bb      	ldr	r3, [r7, #8]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20001104 	.word	0x20001104
 8008f14:	200010dc 	.word	0x200010dc
 8008f18:	2000109c 	.word	0x2000109c
 8008f1c:	200010e4 	.word	0x200010e4
 8008f20:	20000c0c 	.word	0x20000c0c
 8008f24:	20000c08 	.word	0x20000c08
 8008f28:	200010f0 	.word	0x200010f0
 8008f2c:	200010ec 	.word	0x200010ec
 8008f30:	e000ed04 	.word	0xe000ed04

08008f34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f3a:	4b05      	ldr	r3, [pc, #20]	; (8008f50 <xTaskGetTickCount+0x1c>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f40:	687b      	ldr	r3, [r7, #4]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	200010e0 	.word	0x200010e0

08008f54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f5e:	4b4f      	ldr	r3, [pc, #316]	; (800909c <xTaskIncrementTick+0x148>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f040 808f 	bne.w	8009086 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f68:	4b4d      	ldr	r3, [pc, #308]	; (80090a0 <xTaskIncrementTick+0x14c>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f70:	4a4b      	ldr	r2, [pc, #300]	; (80090a0 <xTaskIncrementTick+0x14c>)
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d120      	bne.n	8008fbe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f7c:	4b49      	ldr	r3, [pc, #292]	; (80090a4 <xTaskIncrementTick+0x150>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00a      	beq.n	8008f9c <xTaskIncrementTick+0x48>
	__asm volatile
 8008f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8a:	f383 8811 	msr	BASEPRI, r3
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	603b      	str	r3, [r7, #0]
}
 8008f98:	bf00      	nop
 8008f9a:	e7fe      	b.n	8008f9a <xTaskIncrementTick+0x46>
 8008f9c:	4b41      	ldr	r3, [pc, #260]	; (80090a4 <xTaskIncrementTick+0x150>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	60fb      	str	r3, [r7, #12]
 8008fa2:	4b41      	ldr	r3, [pc, #260]	; (80090a8 <xTaskIncrementTick+0x154>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a3f      	ldr	r2, [pc, #252]	; (80090a4 <xTaskIncrementTick+0x150>)
 8008fa8:	6013      	str	r3, [r2, #0]
 8008faa:	4a3f      	ldr	r2, [pc, #252]	; (80090a8 <xTaskIncrementTick+0x154>)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6013      	str	r3, [r2, #0]
 8008fb0:	4b3e      	ldr	r3, [pc, #248]	; (80090ac <xTaskIncrementTick+0x158>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	4a3d      	ldr	r2, [pc, #244]	; (80090ac <xTaskIncrementTick+0x158>)
 8008fb8:	6013      	str	r3, [r2, #0]
 8008fba:	f000 fad1 	bl	8009560 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008fbe:	4b3c      	ldr	r3, [pc, #240]	; (80090b0 <xTaskIncrementTick+0x15c>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d349      	bcc.n	800905c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fc8:	4b36      	ldr	r3, [pc, #216]	; (80090a4 <xTaskIncrementTick+0x150>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d104      	bne.n	8008fdc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fd2:	4b37      	ldr	r3, [pc, #220]	; (80090b0 <xTaskIncrementTick+0x15c>)
 8008fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd8:	601a      	str	r2, [r3, #0]
					break;
 8008fda:	e03f      	b.n	800905c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fdc:	4b31      	ldr	r3, [pc, #196]	; (80090a4 <xTaskIncrementTick+0x150>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008fec:	693a      	ldr	r2, [r7, #16]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d203      	bcs.n	8008ffc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ff4:	4a2e      	ldr	r2, [pc, #184]	; (80090b0 <xTaskIncrementTick+0x15c>)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ffa:	e02f      	b.n	800905c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	3304      	adds	r3, #4
 8009000:	4618      	mov	r0, r3
 8009002:	f7fe fc77 	bl	80078f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900a:	2b00      	cmp	r3, #0
 800900c:	d004      	beq.n	8009018 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	3318      	adds	r3, #24
 8009012:	4618      	mov	r0, r3
 8009014:	f7fe fc6e 	bl	80078f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800901c:	4b25      	ldr	r3, [pc, #148]	; (80090b4 <xTaskIncrementTick+0x160>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	429a      	cmp	r2, r3
 8009022:	d903      	bls.n	800902c <xTaskIncrementTick+0xd8>
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009028:	4a22      	ldr	r2, [pc, #136]	; (80090b4 <xTaskIncrementTick+0x160>)
 800902a:	6013      	str	r3, [r2, #0]
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009030:	4613      	mov	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4a1f      	ldr	r2, [pc, #124]	; (80090b8 <xTaskIncrementTick+0x164>)
 800903a:	441a      	add	r2, r3
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	3304      	adds	r3, #4
 8009040:	4619      	mov	r1, r3
 8009042:	4610      	mov	r0, r2
 8009044:	f7fe fbf9 	bl	800783a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904c:	4b1b      	ldr	r3, [pc, #108]	; (80090bc <xTaskIncrementTick+0x168>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009052:	429a      	cmp	r2, r3
 8009054:	d3b8      	bcc.n	8008fc8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009056:	2301      	movs	r3, #1
 8009058:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800905a:	e7b5      	b.n	8008fc8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800905c:	4b17      	ldr	r3, [pc, #92]	; (80090bc <xTaskIncrementTick+0x168>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009062:	4915      	ldr	r1, [pc, #84]	; (80090b8 <xTaskIncrementTick+0x164>)
 8009064:	4613      	mov	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	4413      	add	r3, r2
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	440b      	add	r3, r1
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d901      	bls.n	8009078 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009074:	2301      	movs	r3, #1
 8009076:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009078:	4b11      	ldr	r3, [pc, #68]	; (80090c0 <xTaskIncrementTick+0x16c>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d007      	beq.n	8009090 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009080:	2301      	movs	r3, #1
 8009082:	617b      	str	r3, [r7, #20]
 8009084:	e004      	b.n	8009090 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009086:	4b0f      	ldr	r3, [pc, #60]	; (80090c4 <xTaskIncrementTick+0x170>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3301      	adds	r3, #1
 800908c:	4a0d      	ldr	r2, [pc, #52]	; (80090c4 <xTaskIncrementTick+0x170>)
 800908e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009090:	697b      	ldr	r3, [r7, #20]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	20001104 	.word	0x20001104
 80090a0:	200010e0 	.word	0x200010e0
 80090a4:	20001094 	.word	0x20001094
 80090a8:	20001098 	.word	0x20001098
 80090ac:	200010f4 	.word	0x200010f4
 80090b0:	200010fc 	.word	0x200010fc
 80090b4:	200010e4 	.word	0x200010e4
 80090b8:	20000c0c 	.word	0x20000c0c
 80090bc:	20000c08 	.word	0x20000c08
 80090c0:	200010f0 	.word	0x200010f0
 80090c4:	200010ec 	.word	0x200010ec

080090c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80090ce:	4b28      	ldr	r3, [pc, #160]	; (8009170 <vTaskSwitchContext+0xa8>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80090d6:	4b27      	ldr	r3, [pc, #156]	; (8009174 <vTaskSwitchContext+0xac>)
 80090d8:	2201      	movs	r2, #1
 80090da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80090dc:	e041      	b.n	8009162 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80090de:	4b25      	ldr	r3, [pc, #148]	; (8009174 <vTaskSwitchContext+0xac>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090e4:	4b24      	ldr	r3, [pc, #144]	; (8009178 <vTaskSwitchContext+0xb0>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	60fb      	str	r3, [r7, #12]
 80090ea:	e010      	b.n	800910e <vTaskSwitchContext+0x46>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10a      	bne.n	8009108 <vTaskSwitchContext+0x40>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	607b      	str	r3, [r7, #4]
}
 8009104:	bf00      	nop
 8009106:	e7fe      	b.n	8009106 <vTaskSwitchContext+0x3e>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	3b01      	subs	r3, #1
 800910c:	60fb      	str	r3, [r7, #12]
 800910e:	491b      	ldr	r1, [pc, #108]	; (800917c <vTaskSwitchContext+0xb4>)
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	4613      	mov	r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	4413      	add	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	440b      	add	r3, r1
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d0e4      	beq.n	80090ec <vTaskSwitchContext+0x24>
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	4613      	mov	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4413      	add	r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	4a13      	ldr	r2, [pc, #76]	; (800917c <vTaskSwitchContext+0xb4>)
 800912e:	4413      	add	r3, r2
 8009130:	60bb      	str	r3, [r7, #8]
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	605a      	str	r2, [r3, #4]
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	3308      	adds	r3, #8
 8009144:	429a      	cmp	r2, r3
 8009146:	d104      	bne.n	8009152 <vTaskSwitchContext+0x8a>
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	605a      	str	r2, [r3, #4]
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	4a09      	ldr	r2, [pc, #36]	; (8009180 <vTaskSwitchContext+0xb8>)
 800915a:	6013      	str	r3, [r2, #0]
 800915c:	4a06      	ldr	r2, [pc, #24]	; (8009178 <vTaskSwitchContext+0xb0>)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6013      	str	r3, [r2, #0]
}
 8009162:	bf00      	nop
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	20001104 	.word	0x20001104
 8009174:	200010f0 	.word	0x200010f0
 8009178:	200010e4 	.word	0x200010e4
 800917c:	20000c0c 	.word	0x20000c0c
 8009180:	20000c08 	.word	0x20000c08

08009184 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10a      	bne.n	80091aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009198:	f383 8811 	msr	BASEPRI, r3
 800919c:	f3bf 8f6f 	isb	sy
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	60fb      	str	r3, [r7, #12]
}
 80091a6:	bf00      	nop
 80091a8:	e7fe      	b.n	80091a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091aa:	4b07      	ldr	r3, [pc, #28]	; (80091c8 <vTaskPlaceOnEventList+0x44>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	3318      	adds	r3, #24
 80091b0:	4619      	mov	r1, r3
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f7fe fb65 	bl	8007882 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091b8:	2101      	movs	r1, #1
 80091ba:	6838      	ldr	r0, [r7, #0]
 80091bc:	f000 fb7a 	bl	80098b4 <prvAddCurrentTaskToDelayedList>
}
 80091c0:	bf00      	nop
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	20000c08 	.word	0x20000c08

080091cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b086      	sub	sp, #24
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10a      	bne.n	80091f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80091de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	617b      	str	r3, [r7, #20]
}
 80091f0:	bf00      	nop
 80091f2:	e7fe      	b.n	80091f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091f4:	4b0a      	ldr	r3, [pc, #40]	; (8009220 <vTaskPlaceOnEventListRestricted+0x54>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	3318      	adds	r3, #24
 80091fa:	4619      	mov	r1, r3
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f7fe fb1c 	bl	800783a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009208:	f04f 33ff 	mov.w	r3, #4294967295
 800920c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800920e:	6879      	ldr	r1, [r7, #4]
 8009210:	68b8      	ldr	r0, [r7, #8]
 8009212:	f000 fb4f 	bl	80098b4 <prvAddCurrentTaskToDelayedList>
	}
 8009216:	bf00      	nop
 8009218:	3718      	adds	r7, #24
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	20000c08 	.word	0x20000c08

08009224 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d10a      	bne.n	8009250 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800923a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923e:	f383 8811 	msr	BASEPRI, r3
 8009242:	f3bf 8f6f 	isb	sy
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	60fb      	str	r3, [r7, #12]
}
 800924c:	bf00      	nop
 800924e:	e7fe      	b.n	800924e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	3318      	adds	r3, #24
 8009254:	4618      	mov	r0, r3
 8009256:	f7fe fb4d 	bl	80078f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800925a:	4b1e      	ldr	r3, [pc, #120]	; (80092d4 <xTaskRemoveFromEventList+0xb0>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d11d      	bne.n	800929e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	3304      	adds	r3, #4
 8009266:	4618      	mov	r0, r3
 8009268:	f7fe fb44 	bl	80078f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009270:	4b19      	ldr	r3, [pc, #100]	; (80092d8 <xTaskRemoveFromEventList+0xb4>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	429a      	cmp	r2, r3
 8009276:	d903      	bls.n	8009280 <xTaskRemoveFromEventList+0x5c>
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927c:	4a16      	ldr	r2, [pc, #88]	; (80092d8 <xTaskRemoveFromEventList+0xb4>)
 800927e:	6013      	str	r3, [r2, #0]
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009284:	4613      	mov	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4413      	add	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4a13      	ldr	r2, [pc, #76]	; (80092dc <xTaskRemoveFromEventList+0xb8>)
 800928e:	441a      	add	r2, r3
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	3304      	adds	r3, #4
 8009294:	4619      	mov	r1, r3
 8009296:	4610      	mov	r0, r2
 8009298:	f7fe facf 	bl	800783a <vListInsertEnd>
 800929c:	e005      	b.n	80092aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	3318      	adds	r3, #24
 80092a2:	4619      	mov	r1, r3
 80092a4:	480e      	ldr	r0, [pc, #56]	; (80092e0 <xTaskRemoveFromEventList+0xbc>)
 80092a6:	f7fe fac8 	bl	800783a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ae:	4b0d      	ldr	r3, [pc, #52]	; (80092e4 <xTaskRemoveFromEventList+0xc0>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d905      	bls.n	80092c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80092b8:	2301      	movs	r3, #1
 80092ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80092bc:	4b0a      	ldr	r3, [pc, #40]	; (80092e8 <xTaskRemoveFromEventList+0xc4>)
 80092be:	2201      	movs	r2, #1
 80092c0:	601a      	str	r2, [r3, #0]
 80092c2:	e001      	b.n	80092c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80092c4:	2300      	movs	r3, #0
 80092c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80092c8:	697b      	ldr	r3, [r7, #20]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3718      	adds	r7, #24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	20001104 	.word	0x20001104
 80092d8:	200010e4 	.word	0x200010e4
 80092dc:	20000c0c 	.word	0x20000c0c
 80092e0:	2000109c 	.word	0x2000109c
 80092e4:	20000c08 	.word	0x20000c08
 80092e8:	200010f0 	.word	0x200010f0

080092ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092f4:	4b06      	ldr	r3, [pc, #24]	; (8009310 <vTaskInternalSetTimeOutState+0x24>)
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80092fc:	4b05      	ldr	r3, [pc, #20]	; (8009314 <vTaskInternalSetTimeOutState+0x28>)
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	605a      	str	r2, [r3, #4]
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr
 8009310:	200010f4 	.word	0x200010f4
 8009314:	200010e0 	.word	0x200010e0

08009318 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b088      	sub	sp, #32
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	613b      	str	r3, [r7, #16]
}
 800933a:	bf00      	nop
 800933c:	e7fe      	b.n	800933c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10a      	bne.n	800935a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	60fb      	str	r3, [r7, #12]
}
 8009356:	bf00      	nop
 8009358:	e7fe      	b.n	8009358 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800935a:	f000 ff7b 	bl	800a254 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800935e:	4b1d      	ldr	r3, [pc, #116]	; (80093d4 <xTaskCheckForTimeOut+0xbc>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	69ba      	ldr	r2, [r7, #24]
 800936a:	1ad3      	subs	r3, r2, r3
 800936c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009376:	d102      	bne.n	800937e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009378:	2300      	movs	r3, #0
 800937a:	61fb      	str	r3, [r7, #28]
 800937c:	e023      	b.n	80093c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	4b15      	ldr	r3, [pc, #84]	; (80093d8 <xTaskCheckForTimeOut+0xc0>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	429a      	cmp	r2, r3
 8009388:	d007      	beq.n	800939a <xTaskCheckForTimeOut+0x82>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	69ba      	ldr	r2, [r7, #24]
 8009390:	429a      	cmp	r2, r3
 8009392:	d302      	bcc.n	800939a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009394:	2301      	movs	r3, #1
 8009396:	61fb      	str	r3, [r7, #28]
 8009398:	e015      	b.n	80093c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d20b      	bcs.n	80093bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	1ad2      	subs	r2, r2, r3
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7ff ff9b 	bl	80092ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80093b6:	2300      	movs	r3, #0
 80093b8:	61fb      	str	r3, [r7, #28]
 80093ba:	e004      	b.n	80093c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	2200      	movs	r2, #0
 80093c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80093c2:	2301      	movs	r3, #1
 80093c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80093c6:	f000 ff75 	bl	800a2b4 <vPortExitCritical>

	return xReturn;
 80093ca:	69fb      	ldr	r3, [r7, #28]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3720      	adds	r7, #32
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	200010e0 	.word	0x200010e0
 80093d8:	200010f4 	.word	0x200010f4

080093dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093dc:	b480      	push	{r7}
 80093de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093e0:	4b03      	ldr	r3, [pc, #12]	; (80093f0 <vTaskMissedYield+0x14>)
 80093e2:	2201      	movs	r2, #1
 80093e4:	601a      	str	r2, [r3, #0]
}
 80093e6:	bf00      	nop
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	200010f0 	.word	0x200010f0

080093f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80093fc:	f000 f852 	bl	80094a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009400:	4b06      	ldr	r3, [pc, #24]	; (800941c <prvIdleTask+0x28>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d9f9      	bls.n	80093fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8009408:	4b05      	ldr	r3, [pc, #20]	; (8009420 <prvIdleTask+0x2c>)
 800940a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800940e:	601a      	str	r2, [r3, #0]
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009418:	e7f0      	b.n	80093fc <prvIdleTask+0x8>
 800941a:	bf00      	nop
 800941c:	20000c0c 	.word	0x20000c0c
 8009420:	e000ed04 	.word	0xe000ed04

08009424 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800942a:	2300      	movs	r3, #0
 800942c:	607b      	str	r3, [r7, #4]
 800942e:	e00c      	b.n	800944a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	4613      	mov	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4a12      	ldr	r2, [pc, #72]	; (8009484 <prvInitialiseTaskLists+0x60>)
 800943c:	4413      	add	r3, r2
 800943e:	4618      	mov	r0, r3
 8009440:	f7fe f9ce 	bl	80077e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	3301      	adds	r3, #1
 8009448:	607b      	str	r3, [r7, #4]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b37      	cmp	r3, #55	; 0x37
 800944e:	d9ef      	bls.n	8009430 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009450:	480d      	ldr	r0, [pc, #52]	; (8009488 <prvInitialiseTaskLists+0x64>)
 8009452:	f7fe f9c5 	bl	80077e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009456:	480d      	ldr	r0, [pc, #52]	; (800948c <prvInitialiseTaskLists+0x68>)
 8009458:	f7fe f9c2 	bl	80077e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800945c:	480c      	ldr	r0, [pc, #48]	; (8009490 <prvInitialiseTaskLists+0x6c>)
 800945e:	f7fe f9bf 	bl	80077e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009462:	480c      	ldr	r0, [pc, #48]	; (8009494 <prvInitialiseTaskLists+0x70>)
 8009464:	f7fe f9bc 	bl	80077e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009468:	480b      	ldr	r0, [pc, #44]	; (8009498 <prvInitialiseTaskLists+0x74>)
 800946a:	f7fe f9b9 	bl	80077e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800946e:	4b0b      	ldr	r3, [pc, #44]	; (800949c <prvInitialiseTaskLists+0x78>)
 8009470:	4a05      	ldr	r2, [pc, #20]	; (8009488 <prvInitialiseTaskLists+0x64>)
 8009472:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009474:	4b0a      	ldr	r3, [pc, #40]	; (80094a0 <prvInitialiseTaskLists+0x7c>)
 8009476:	4a05      	ldr	r2, [pc, #20]	; (800948c <prvInitialiseTaskLists+0x68>)
 8009478:	601a      	str	r2, [r3, #0]
}
 800947a:	bf00      	nop
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20000c0c 	.word	0x20000c0c
 8009488:	2000106c 	.word	0x2000106c
 800948c:	20001080 	.word	0x20001080
 8009490:	2000109c 	.word	0x2000109c
 8009494:	200010b0 	.word	0x200010b0
 8009498:	200010c8 	.word	0x200010c8
 800949c:	20001094 	.word	0x20001094
 80094a0:	20001098 	.word	0x20001098

080094a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094aa:	e019      	b.n	80094e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80094ac:	f000 fed2 	bl	800a254 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094b0:	4b10      	ldr	r3, [pc, #64]	; (80094f4 <prvCheckTasksWaitingTermination+0x50>)
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	3304      	adds	r3, #4
 80094bc:	4618      	mov	r0, r3
 80094be:	f7fe fa19 	bl	80078f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094c2:	4b0d      	ldr	r3, [pc, #52]	; (80094f8 <prvCheckTasksWaitingTermination+0x54>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3b01      	subs	r3, #1
 80094c8:	4a0b      	ldr	r2, [pc, #44]	; (80094f8 <prvCheckTasksWaitingTermination+0x54>)
 80094ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094cc:	4b0b      	ldr	r3, [pc, #44]	; (80094fc <prvCheckTasksWaitingTermination+0x58>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	3b01      	subs	r3, #1
 80094d2:	4a0a      	ldr	r2, [pc, #40]	; (80094fc <prvCheckTasksWaitingTermination+0x58>)
 80094d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094d6:	f000 feed 	bl	800a2b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f810 	bl	8009500 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094e0:	4b06      	ldr	r3, [pc, #24]	; (80094fc <prvCheckTasksWaitingTermination+0x58>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1e1      	bne.n	80094ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094e8:	bf00      	nop
 80094ea:	bf00      	nop
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	200010b0 	.word	0x200010b0
 80094f8:	200010dc 	.word	0x200010dc
 80094fc:	200010c4 	.word	0x200010c4

08009500 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800950e:	2b00      	cmp	r3, #0
 8009510:	d108      	bne.n	8009524 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009516:	4618      	mov	r0, r3
 8009518:	f001 f88a 	bl	800a630 <vPortFree>
				vPortFree( pxTCB );
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f001 f887 	bl	800a630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009522:	e018      	b.n	8009556 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800952a:	2b01      	cmp	r3, #1
 800952c:	d103      	bne.n	8009536 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f001 f87e 	bl	800a630 <vPortFree>
	}
 8009534:	e00f      	b.n	8009556 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800953c:	2b02      	cmp	r3, #2
 800953e:	d00a      	beq.n	8009556 <prvDeleteTCB+0x56>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	60fb      	str	r3, [r7, #12]
}
 8009552:	bf00      	nop
 8009554:	e7fe      	b.n	8009554 <prvDeleteTCB+0x54>
	}
 8009556:	bf00      	nop
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
	...

08009560 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009566:	4b0c      	ldr	r3, [pc, #48]	; (8009598 <prvResetNextTaskUnblockTime+0x38>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d104      	bne.n	800957a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009570:	4b0a      	ldr	r3, [pc, #40]	; (800959c <prvResetNextTaskUnblockTime+0x3c>)
 8009572:	f04f 32ff 	mov.w	r2, #4294967295
 8009576:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009578:	e008      	b.n	800958c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800957a:	4b07      	ldr	r3, [pc, #28]	; (8009598 <prvResetNextTaskUnblockTime+0x38>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	4a04      	ldr	r2, [pc, #16]	; (800959c <prvResetNextTaskUnblockTime+0x3c>)
 800958a:	6013      	str	r3, [r2, #0]
}
 800958c:	bf00      	nop
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	20001094 	.word	0x20001094
 800959c:	200010fc 	.word	0x200010fc

080095a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80095a6:	4b0b      	ldr	r3, [pc, #44]	; (80095d4 <xTaskGetSchedulerState+0x34>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d102      	bne.n	80095b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095ae:	2301      	movs	r3, #1
 80095b0:	607b      	str	r3, [r7, #4]
 80095b2:	e008      	b.n	80095c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095b4:	4b08      	ldr	r3, [pc, #32]	; (80095d8 <xTaskGetSchedulerState+0x38>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d102      	bne.n	80095c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095bc:	2302      	movs	r3, #2
 80095be:	607b      	str	r3, [r7, #4]
 80095c0:	e001      	b.n	80095c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095c2:	2300      	movs	r3, #0
 80095c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095c6:	687b      	ldr	r3, [r7, #4]
	}
 80095c8:	4618      	mov	r0, r3
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr
 80095d4:	200010e8 	.word	0x200010e8
 80095d8:	20001104 	.word	0x20001104

080095dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80095e8:	2300      	movs	r3, #0
 80095ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d051      	beq.n	8009696 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f6:	4b2a      	ldr	r3, [pc, #168]	; (80096a0 <xTaskPriorityInherit+0xc4>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d241      	bcs.n	8009684 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	2b00      	cmp	r3, #0
 8009606:	db06      	blt.n	8009616 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009608:	4b25      	ldr	r3, [pc, #148]	; (80096a0 <xTaskPriorityInherit+0xc4>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	6959      	ldr	r1, [r3, #20]
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800961e:	4613      	mov	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4a1f      	ldr	r2, [pc, #124]	; (80096a4 <xTaskPriorityInherit+0xc8>)
 8009628:	4413      	add	r3, r2
 800962a:	4299      	cmp	r1, r3
 800962c:	d122      	bne.n	8009674 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	3304      	adds	r3, #4
 8009632:	4618      	mov	r0, r3
 8009634:	f7fe f95e 	bl	80078f4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009638:	4b19      	ldr	r3, [pc, #100]	; (80096a0 <xTaskPriorityInherit+0xc4>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009646:	4b18      	ldr	r3, [pc, #96]	; (80096a8 <xTaskPriorityInherit+0xcc>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	429a      	cmp	r2, r3
 800964c:	d903      	bls.n	8009656 <xTaskPriorityInherit+0x7a>
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009652:	4a15      	ldr	r2, [pc, #84]	; (80096a8 <xTaskPriorityInherit+0xcc>)
 8009654:	6013      	str	r3, [r2, #0]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965a:	4613      	mov	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4413      	add	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	4a10      	ldr	r2, [pc, #64]	; (80096a4 <xTaskPriorityInherit+0xc8>)
 8009664:	441a      	add	r2, r3
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	3304      	adds	r3, #4
 800966a:	4619      	mov	r1, r3
 800966c:	4610      	mov	r0, r2
 800966e:	f7fe f8e4 	bl	800783a <vListInsertEnd>
 8009672:	e004      	b.n	800967e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009674:	4b0a      	ldr	r3, [pc, #40]	; (80096a0 <xTaskPriorityInherit+0xc4>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800967e:	2301      	movs	r3, #1
 8009680:	60fb      	str	r3, [r7, #12]
 8009682:	e008      	b.n	8009696 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009688:	4b05      	ldr	r3, [pc, #20]	; (80096a0 <xTaskPriorityInherit+0xc4>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968e:	429a      	cmp	r2, r3
 8009690:	d201      	bcs.n	8009696 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009692:	2301      	movs	r3, #1
 8009694:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009696:	68fb      	ldr	r3, [r7, #12]
	}
 8009698:	4618      	mov	r0, r3
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	20000c08 	.word	0x20000c08
 80096a4:	20000c0c 	.word	0x20000c0c
 80096a8:	200010e4 	.word	0x200010e4

080096ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80096b8:	2300      	movs	r3, #0
 80096ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d056      	beq.n	8009770 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80096c2:	4b2e      	ldr	r3, [pc, #184]	; (800977c <xTaskPriorityDisinherit+0xd0>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d00a      	beq.n	80096e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80096cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d0:	f383 8811 	msr	BASEPRI, r3
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	60fb      	str	r3, [r7, #12]
}
 80096de:	bf00      	nop
 80096e0:	e7fe      	b.n	80096e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d10a      	bne.n	8009700 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80096ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ee:	f383 8811 	msr	BASEPRI, r3
 80096f2:	f3bf 8f6f 	isb	sy
 80096f6:	f3bf 8f4f 	dsb	sy
 80096fa:	60bb      	str	r3, [r7, #8]
}
 80096fc:	bf00      	nop
 80096fe:	e7fe      	b.n	80096fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009704:	1e5a      	subs	r2, r3, #1
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009712:	429a      	cmp	r2, r3
 8009714:	d02c      	beq.n	8009770 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800971a:	2b00      	cmp	r3, #0
 800971c:	d128      	bne.n	8009770 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	3304      	adds	r3, #4
 8009722:	4618      	mov	r0, r3
 8009724:	f7fe f8e6 	bl	80078f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009734:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009740:	4b0f      	ldr	r3, [pc, #60]	; (8009780 <xTaskPriorityDisinherit+0xd4>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	429a      	cmp	r2, r3
 8009746:	d903      	bls.n	8009750 <xTaskPriorityDisinherit+0xa4>
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974c:	4a0c      	ldr	r2, [pc, #48]	; (8009780 <xTaskPriorityDisinherit+0xd4>)
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009754:	4613      	mov	r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	4413      	add	r3, r2
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4a09      	ldr	r2, [pc, #36]	; (8009784 <xTaskPriorityDisinherit+0xd8>)
 800975e:	441a      	add	r2, r3
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	3304      	adds	r3, #4
 8009764:	4619      	mov	r1, r3
 8009766:	4610      	mov	r0, r2
 8009768:	f7fe f867 	bl	800783a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800976c:	2301      	movs	r3, #1
 800976e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009770:	697b      	ldr	r3, [r7, #20]
	}
 8009772:	4618      	mov	r0, r3
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	20000c08 	.word	0x20000c08
 8009780:	200010e4 	.word	0x200010e4
 8009784:	20000c0c 	.word	0x20000c0c

08009788 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009788:	b580      	push	{r7, lr}
 800978a:	b088      	sub	sp, #32
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009796:	2301      	movs	r3, #1
 8009798:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d06a      	beq.n	8009876 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10a      	bne.n	80097be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80097a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ac:	f383 8811 	msr	BASEPRI, r3
 80097b0:	f3bf 8f6f 	isb	sy
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	60fb      	str	r3, [r7, #12]
}
 80097ba:	bf00      	nop
 80097bc:	e7fe      	b.n	80097bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d902      	bls.n	80097ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	61fb      	str	r3, [r7, #28]
 80097cc:	e002      	b.n	80097d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d8:	69fa      	ldr	r2, [r7, #28]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d04b      	beq.n	8009876 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097e2:	697a      	ldr	r2, [r7, #20]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d146      	bne.n	8009876 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80097e8:	4b25      	ldr	r3, [pc, #148]	; (8009880 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	69ba      	ldr	r2, [r7, #24]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d10a      	bne.n	8009808 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	60bb      	str	r3, [r7, #8]
}
 8009804:	bf00      	nop
 8009806:	e7fe      	b.n	8009806 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	69fa      	ldr	r2, [r7, #28]
 8009812:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	2b00      	cmp	r3, #0
 800981a:	db04      	blt.n	8009826 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	6959      	ldr	r1, [r3, #20]
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	4613      	mov	r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4a13      	ldr	r2, [pc, #76]	; (8009884 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009836:	4413      	add	r3, r2
 8009838:	4299      	cmp	r1, r3
 800983a:	d11c      	bne.n	8009876 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	3304      	adds	r3, #4
 8009840:	4618      	mov	r0, r3
 8009842:	f7fe f857 	bl	80078f4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984a:	4b0f      	ldr	r3, [pc, #60]	; (8009888 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	429a      	cmp	r2, r3
 8009850:	d903      	bls.n	800985a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009856:	4a0c      	ldr	r2, [pc, #48]	; (8009888 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009858:	6013      	str	r3, [r2, #0]
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800985e:	4613      	mov	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4413      	add	r3, r2
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	4a07      	ldr	r2, [pc, #28]	; (8009884 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009868:	441a      	add	r2, r3
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	3304      	adds	r3, #4
 800986e:	4619      	mov	r1, r3
 8009870:	4610      	mov	r0, r2
 8009872:	f7fd ffe2 	bl	800783a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009876:	bf00      	nop
 8009878:	3720      	adds	r7, #32
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	20000c08 	.word	0x20000c08
 8009884:	20000c0c 	.word	0x20000c0c
 8009888:	200010e4 	.word	0x200010e4

0800988c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800988c:	b480      	push	{r7}
 800988e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009890:	4b07      	ldr	r3, [pc, #28]	; (80098b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d004      	beq.n	80098a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009898:	4b05      	ldr	r3, [pc, #20]	; (80098b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800989e:	3201      	adds	r2, #1
 80098a0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80098a2:	4b03      	ldr	r3, [pc, #12]	; (80098b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80098a4:	681b      	ldr	r3, [r3, #0]
	}
 80098a6:	4618      	mov	r0, r3
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	20000c08 	.word	0x20000c08

080098b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80098be:	4b21      	ldr	r3, [pc, #132]	; (8009944 <prvAddCurrentTaskToDelayedList+0x90>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098c4:	4b20      	ldr	r3, [pc, #128]	; (8009948 <prvAddCurrentTaskToDelayedList+0x94>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	3304      	adds	r3, #4
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fe f812 	bl	80078f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d6:	d10a      	bne.n	80098ee <prvAddCurrentTaskToDelayedList+0x3a>
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d007      	beq.n	80098ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098de:	4b1a      	ldr	r3, [pc, #104]	; (8009948 <prvAddCurrentTaskToDelayedList+0x94>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3304      	adds	r3, #4
 80098e4:	4619      	mov	r1, r3
 80098e6:	4819      	ldr	r0, [pc, #100]	; (800994c <prvAddCurrentTaskToDelayedList+0x98>)
 80098e8:	f7fd ffa7 	bl	800783a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80098ec:	e026      	b.n	800993c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4413      	add	r3, r2
 80098f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098f6:	4b14      	ldr	r3, [pc, #80]	; (8009948 <prvAddCurrentTaskToDelayedList+0x94>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	429a      	cmp	r2, r3
 8009904:	d209      	bcs.n	800991a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009906:	4b12      	ldr	r3, [pc, #72]	; (8009950 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	4b0f      	ldr	r3, [pc, #60]	; (8009948 <prvAddCurrentTaskToDelayedList+0x94>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3304      	adds	r3, #4
 8009910:	4619      	mov	r1, r3
 8009912:	4610      	mov	r0, r2
 8009914:	f7fd ffb5 	bl	8007882 <vListInsert>
}
 8009918:	e010      	b.n	800993c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800991a:	4b0e      	ldr	r3, [pc, #56]	; (8009954 <prvAddCurrentTaskToDelayedList+0xa0>)
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	4b0a      	ldr	r3, [pc, #40]	; (8009948 <prvAddCurrentTaskToDelayedList+0x94>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3304      	adds	r3, #4
 8009924:	4619      	mov	r1, r3
 8009926:	4610      	mov	r0, r2
 8009928:	f7fd ffab 	bl	8007882 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800992c:	4b0a      	ldr	r3, [pc, #40]	; (8009958 <prvAddCurrentTaskToDelayedList+0xa4>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	429a      	cmp	r2, r3
 8009934:	d202      	bcs.n	800993c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009936:	4a08      	ldr	r2, [pc, #32]	; (8009958 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	6013      	str	r3, [r2, #0]
}
 800993c:	bf00      	nop
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	200010e0 	.word	0x200010e0
 8009948:	20000c08 	.word	0x20000c08
 800994c:	200010c8 	.word	0x200010c8
 8009950:	20001098 	.word	0x20001098
 8009954:	20001094 	.word	0x20001094
 8009958:	200010fc 	.word	0x200010fc

0800995c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b08a      	sub	sp, #40	; 0x28
 8009960:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009962:	2300      	movs	r3, #0
 8009964:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009966:	f000 fb07 	bl	8009f78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800996a:	4b1c      	ldr	r3, [pc, #112]	; (80099dc <xTimerCreateTimerTask+0x80>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d021      	beq.n	80099b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009972:	2300      	movs	r3, #0
 8009974:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009976:	2300      	movs	r3, #0
 8009978:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800997a:	1d3a      	adds	r2, r7, #4
 800997c:	f107 0108 	add.w	r1, r7, #8
 8009980:	f107 030c 	add.w	r3, r7, #12
 8009984:	4618      	mov	r0, r3
 8009986:	f7fd ff11 	bl	80077ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800998a:	6879      	ldr	r1, [r7, #4]
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	9202      	str	r2, [sp, #8]
 8009992:	9301      	str	r3, [sp, #4]
 8009994:	2302      	movs	r3, #2
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	2300      	movs	r3, #0
 800999a:	460a      	mov	r2, r1
 800999c:	4910      	ldr	r1, [pc, #64]	; (80099e0 <xTimerCreateTimerTask+0x84>)
 800999e:	4811      	ldr	r0, [pc, #68]	; (80099e4 <xTimerCreateTimerTask+0x88>)
 80099a0:	f7fe ffe0 	bl	8008964 <xTaskCreateStatic>
 80099a4:	4603      	mov	r3, r0
 80099a6:	4a10      	ldr	r2, [pc, #64]	; (80099e8 <xTimerCreateTimerTask+0x8c>)
 80099a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80099aa:	4b0f      	ldr	r3, [pc, #60]	; (80099e8 <xTimerCreateTimerTask+0x8c>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80099b2:	2301      	movs	r3, #1
 80099b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d10a      	bne.n	80099d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80099bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c0:	f383 8811 	msr	BASEPRI, r3
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	613b      	str	r3, [r7, #16]
}
 80099ce:	bf00      	nop
 80099d0:	e7fe      	b.n	80099d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80099d2:	697b      	ldr	r3, [r7, #20]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3718      	adds	r7, #24
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20001138 	.word	0x20001138
 80099e0:	0800b1e4 	.word	0x0800b1e4
 80099e4:	08009b21 	.word	0x08009b21
 80099e8:	2000113c 	.word	0x2000113c

080099ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b08a      	sub	sp, #40	; 0x28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
 80099f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80099fa:	2300      	movs	r3, #0
 80099fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d10a      	bne.n	8009a1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a08:	f383 8811 	msr	BASEPRI, r3
 8009a0c:	f3bf 8f6f 	isb	sy
 8009a10:	f3bf 8f4f 	dsb	sy
 8009a14:	623b      	str	r3, [r7, #32]
}
 8009a16:	bf00      	nop
 8009a18:	e7fe      	b.n	8009a18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a1a:	4b1a      	ldr	r3, [pc, #104]	; (8009a84 <xTimerGenericCommand+0x98>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d02a      	beq.n	8009a78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	2b05      	cmp	r3, #5
 8009a32:	dc18      	bgt.n	8009a66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a34:	f7ff fdb4 	bl	80095a0 <xTaskGetSchedulerState>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d109      	bne.n	8009a52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a3e:	4b11      	ldr	r3, [pc, #68]	; (8009a84 <xTimerGenericCommand+0x98>)
 8009a40:	6818      	ldr	r0, [r3, #0]
 8009a42:	f107 0110 	add.w	r1, r7, #16
 8009a46:	2300      	movs	r3, #0
 8009a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a4a:	f7fe f925 	bl	8007c98 <xQueueGenericSend>
 8009a4e:	6278      	str	r0, [r7, #36]	; 0x24
 8009a50:	e012      	b.n	8009a78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a52:	4b0c      	ldr	r3, [pc, #48]	; (8009a84 <xTimerGenericCommand+0x98>)
 8009a54:	6818      	ldr	r0, [r3, #0]
 8009a56:	f107 0110 	add.w	r1, r7, #16
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f7fe f91b 	bl	8007c98 <xQueueGenericSend>
 8009a62:	6278      	str	r0, [r7, #36]	; 0x24
 8009a64:	e008      	b.n	8009a78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a66:	4b07      	ldr	r3, [pc, #28]	; (8009a84 <xTimerGenericCommand+0x98>)
 8009a68:	6818      	ldr	r0, [r3, #0]
 8009a6a:	f107 0110 	add.w	r1, r7, #16
 8009a6e:	2300      	movs	r3, #0
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	f7fe fa0f 	bl	8007e94 <xQueueGenericSendFromISR>
 8009a76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3728      	adds	r7, #40	; 0x28
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	20001138 	.word	0x20001138

08009a88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b088      	sub	sp, #32
 8009a8c:	af02      	add	r7, sp, #8
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a92:	4b22      	ldr	r3, [pc, #136]	; (8009b1c <prvProcessExpiredTimer+0x94>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fd ff27 	bl	80078f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aac:	f003 0304 	and.w	r3, r3, #4
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d022      	beq.n	8009afa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	699a      	ldr	r2, [r3, #24]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	18d1      	adds	r1, r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	683a      	ldr	r2, [r7, #0]
 8009ac0:	6978      	ldr	r0, [r7, #20]
 8009ac2:	f000 f8d1 	bl	8009c68 <prvInsertTimerInActiveList>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d01f      	beq.n	8009b0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009acc:	2300      	movs	r3, #0
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	6978      	ldr	r0, [r7, #20]
 8009ad8:	f7ff ff88 	bl	80099ec <xTimerGenericCommand>
 8009adc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d113      	bne.n	8009b0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae8:	f383 8811 	msr	BASEPRI, r3
 8009aec:	f3bf 8f6f 	isb	sy
 8009af0:	f3bf 8f4f 	dsb	sy
 8009af4:	60fb      	str	r3, [r7, #12]
}
 8009af6:	bf00      	nop
 8009af8:	e7fe      	b.n	8009af8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b00:	f023 0301 	bic.w	r3, r3, #1
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	6a1b      	ldr	r3, [r3, #32]
 8009b10:	6978      	ldr	r0, [r7, #20]
 8009b12:	4798      	blx	r3
}
 8009b14:	bf00      	nop
 8009b16:	3718      	adds	r7, #24
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	20001130 	.word	0x20001130

08009b20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b28:	f107 0308 	add.w	r3, r7, #8
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f000 f857 	bl	8009be0 <prvGetNextExpireTime>
 8009b32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	4619      	mov	r1, r3
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	f000 f803 	bl	8009b44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b3e:	f000 f8d5 	bl	8009cec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b42:	e7f1      	b.n	8009b28 <prvTimerTask+0x8>

08009b44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009b4e:	f7ff f945 	bl	8008ddc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b52:	f107 0308 	add.w	r3, r7, #8
 8009b56:	4618      	mov	r0, r3
 8009b58:	f000 f866 	bl	8009c28 <prvSampleTimeNow>
 8009b5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d130      	bne.n	8009bc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d10a      	bne.n	8009b80 <prvProcessTimerOrBlockTask+0x3c>
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d806      	bhi.n	8009b80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009b72:	f7ff f941 	bl	8008df8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009b76:	68f9      	ldr	r1, [r7, #12]
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7ff ff85 	bl	8009a88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009b7e:	e024      	b.n	8009bca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d008      	beq.n	8009b98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b86:	4b13      	ldr	r3, [pc, #76]	; (8009bd4 <prvProcessTimerOrBlockTask+0x90>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d101      	bne.n	8009b94 <prvProcessTimerOrBlockTask+0x50>
 8009b90:	2301      	movs	r3, #1
 8009b92:	e000      	b.n	8009b96 <prvProcessTimerOrBlockTask+0x52>
 8009b94:	2300      	movs	r3, #0
 8009b96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b98:	4b0f      	ldr	r3, [pc, #60]	; (8009bd8 <prvProcessTimerOrBlockTask+0x94>)
 8009b9a:	6818      	ldr	r0, [r3, #0]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	683a      	ldr	r2, [r7, #0]
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	f7fe fea9 	bl	80088fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009baa:	f7ff f925 	bl	8008df8 <xTaskResumeAll>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10a      	bne.n	8009bca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009bb4:	4b09      	ldr	r3, [pc, #36]	; (8009bdc <prvProcessTimerOrBlockTask+0x98>)
 8009bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bba:	601a      	str	r2, [r3, #0]
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	f3bf 8f6f 	isb	sy
}
 8009bc4:	e001      	b.n	8009bca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009bc6:	f7ff f917 	bl	8008df8 <xTaskResumeAll>
}
 8009bca:	bf00      	nop
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	20001134 	.word	0x20001134
 8009bd8:	20001138 	.word	0x20001138
 8009bdc:	e000ed04 	.word	0xe000ed04

08009be0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009be8:	4b0e      	ldr	r3, [pc, #56]	; (8009c24 <prvGetNextExpireTime+0x44>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d101      	bne.n	8009bf6 <prvGetNextExpireTime+0x16>
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	e000      	b.n	8009bf8 <prvGetNextExpireTime+0x18>
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d105      	bne.n	8009c10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c04:	4b07      	ldr	r3, [pc, #28]	; (8009c24 <prvGetNextExpireTime+0x44>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	60fb      	str	r3, [r7, #12]
 8009c0e:	e001      	b.n	8009c14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009c10:	2300      	movs	r3, #0
 8009c12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c14:	68fb      	ldr	r3, [r7, #12]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3714      	adds	r7, #20
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	20001130 	.word	0x20001130

08009c28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c30:	f7ff f980 	bl	8008f34 <xTaskGetTickCount>
 8009c34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c36:	4b0b      	ldr	r3, [pc, #44]	; (8009c64 <prvSampleTimeNow+0x3c>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d205      	bcs.n	8009c4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009c40:	f000 f936 	bl	8009eb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	601a      	str	r2, [r3, #0]
 8009c4a:	e002      	b.n	8009c52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009c52:	4a04      	ldr	r2, [pc, #16]	; (8009c64 <prvSampleTimeNow+0x3c>)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009c58:	68fb      	ldr	r3, [r7, #12]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	20001140 	.word	0x20001140

08009c68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
 8009c74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009c76:	2300      	movs	r3, #0
 8009c78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d812      	bhi.n	8009cb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	1ad2      	subs	r2, r2, r3
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d302      	bcc.n	8009ca2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	617b      	str	r3, [r7, #20]
 8009ca0:	e01b      	b.n	8009cda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ca2:	4b10      	ldr	r3, [pc, #64]	; (8009ce4 <prvInsertTimerInActiveList+0x7c>)
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	3304      	adds	r3, #4
 8009caa:	4619      	mov	r1, r3
 8009cac:	4610      	mov	r0, r2
 8009cae:	f7fd fde8 	bl	8007882 <vListInsert>
 8009cb2:	e012      	b.n	8009cda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d206      	bcs.n	8009cca <prvInsertTimerInActiveList+0x62>
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d302      	bcc.n	8009cca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	617b      	str	r3, [r7, #20]
 8009cc8:	e007      	b.n	8009cda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cca:	4b07      	ldr	r3, [pc, #28]	; (8009ce8 <prvInsertTimerInActiveList+0x80>)
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	3304      	adds	r3, #4
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	4610      	mov	r0, r2
 8009cd6:	f7fd fdd4 	bl	8007882 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009cda:	697b      	ldr	r3, [r7, #20]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3718      	adds	r7, #24
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	20001134 	.word	0x20001134
 8009ce8:	20001130 	.word	0x20001130

08009cec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b08e      	sub	sp, #56	; 0x38
 8009cf0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cf2:	e0ca      	b.n	8009e8a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	da18      	bge.n	8009d2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009cfa:	1d3b      	adds	r3, r7, #4
 8009cfc:	3304      	adds	r3, #4
 8009cfe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d10a      	bne.n	8009d1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0a:	f383 8811 	msr	BASEPRI, r3
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f3bf 8f4f 	dsb	sy
 8009d16:	61fb      	str	r3, [r7, #28]
}
 8009d18:	bf00      	nop
 8009d1a:	e7fe      	b.n	8009d1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d22:	6850      	ldr	r0, [r2, #4]
 8009d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d26:	6892      	ldr	r2, [r2, #8]
 8009d28:	4611      	mov	r1, r2
 8009d2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f2c0 80aa 	blt.w	8009e88 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3a:	695b      	ldr	r3, [r3, #20]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d004      	beq.n	8009d4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d42:	3304      	adds	r3, #4
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7fd fdd5 	bl	80078f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d4a:	463b      	mov	r3, r7
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7ff ff6b 	bl	8009c28 <prvSampleTimeNow>
 8009d52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b09      	cmp	r3, #9
 8009d58:	f200 8097 	bhi.w	8009e8a <prvProcessReceivedCommands+0x19e>
 8009d5c:	a201      	add	r2, pc, #4	; (adr r2, 8009d64 <prvProcessReceivedCommands+0x78>)
 8009d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d62:	bf00      	nop
 8009d64:	08009d8d 	.word	0x08009d8d
 8009d68:	08009d8d 	.word	0x08009d8d
 8009d6c:	08009d8d 	.word	0x08009d8d
 8009d70:	08009e01 	.word	0x08009e01
 8009d74:	08009e15 	.word	0x08009e15
 8009d78:	08009e5f 	.word	0x08009e5f
 8009d7c:	08009d8d 	.word	0x08009d8d
 8009d80:	08009d8d 	.word	0x08009d8d
 8009d84:	08009e01 	.word	0x08009e01
 8009d88:	08009e15 	.word	0x08009e15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d92:	f043 0301 	orr.w	r3, r3, #1
 8009d96:	b2da      	uxtb	r2, r3
 8009d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da2:	699b      	ldr	r3, [r3, #24]
 8009da4:	18d1      	adds	r1, r2, r3
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dac:	f7ff ff5c 	bl	8009c68 <prvInsertTimerInActiveList>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d069      	beq.n	8009e8a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dc4:	f003 0304 	and.w	r3, r3, #4
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d05e      	beq.n	8009e8a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009dcc:	68ba      	ldr	r2, [r7, #8]
 8009dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	441a      	add	r2, r3
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	2300      	movs	r3, #0
 8009dda:	2100      	movs	r1, #0
 8009ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dde:	f7ff fe05 	bl	80099ec <xTimerGenericCommand>
 8009de2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d14f      	bne.n	8009e8a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	61bb      	str	r3, [r7, #24]
}
 8009dfc:	bf00      	nop
 8009dfe:	e7fe      	b.n	8009dfe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e06:	f023 0301 	bic.w	r3, r3, #1
 8009e0a:	b2da      	uxtb	r2, r3
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009e12:	e03a      	b.n	8009e8a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e1a:	f043 0301 	orr.w	r3, r3, #1
 8009e1e:	b2da      	uxtb	r2, r3
 8009e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e26:	68ba      	ldr	r2, [r7, #8]
 8009e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10a      	bne.n	8009e4a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e38:	f383 8811 	msr	BASEPRI, r3
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	617b      	str	r3, [r7, #20]
}
 8009e46:	bf00      	nop
 8009e48:	e7fe      	b.n	8009e48 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4c:	699a      	ldr	r2, [r3, #24]
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e50:	18d1      	adds	r1, r2, r3
 8009e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e58:	f7ff ff06 	bl	8009c68 <prvInsertTimerInActiveList>
					break;
 8009e5c:	e015      	b.n	8009e8a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e64:	f003 0302 	and.w	r3, r3, #2
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d103      	bne.n	8009e74 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e6e:	f000 fbdf 	bl	800a630 <vPortFree>
 8009e72:	e00a      	b.n	8009e8a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e7a:	f023 0301 	bic.w	r3, r3, #1
 8009e7e:	b2da      	uxtb	r2, r3
 8009e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e86:	e000      	b.n	8009e8a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009e88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e8a:	4b08      	ldr	r3, [pc, #32]	; (8009eac <prvProcessReceivedCommands+0x1c0>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	1d39      	adds	r1, r7, #4
 8009e90:	2200      	movs	r2, #0
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fe f926 	bl	80080e4 <xQueueReceive>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f47f af2a 	bne.w	8009cf4 <prvProcessReceivedCommands+0x8>
	}
}
 8009ea0:	bf00      	nop
 8009ea2:	bf00      	nop
 8009ea4:	3730      	adds	r7, #48	; 0x30
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	20001138 	.word	0x20001138

08009eb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b088      	sub	sp, #32
 8009eb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009eb6:	e048      	b.n	8009f4a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009eb8:	4b2d      	ldr	r3, [pc, #180]	; (8009f70 <prvSwitchTimerLists+0xc0>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ec2:	4b2b      	ldr	r3, [pc, #172]	; (8009f70 <prvSwitchTimerLists+0xc0>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	3304      	adds	r3, #4
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7fd fd0f 	bl	80078f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ee4:	f003 0304 	and.w	r3, r3, #4
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d02e      	beq.n	8009f4a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d90e      	bls.n	8009f1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f0a:	4b19      	ldr	r3, [pc, #100]	; (8009f70 <prvSwitchTimerLists+0xc0>)
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	3304      	adds	r3, #4
 8009f12:	4619      	mov	r1, r3
 8009f14:	4610      	mov	r0, r2
 8009f16:	f7fd fcb4 	bl	8007882 <vListInsert>
 8009f1a:	e016      	b.n	8009f4a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	2300      	movs	r3, #0
 8009f22:	693a      	ldr	r2, [r7, #16]
 8009f24:	2100      	movs	r1, #0
 8009f26:	68f8      	ldr	r0, [r7, #12]
 8009f28:	f7ff fd60 	bl	80099ec <xTimerGenericCommand>
 8009f2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d10a      	bne.n	8009f4a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f38:	f383 8811 	msr	BASEPRI, r3
 8009f3c:	f3bf 8f6f 	isb	sy
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	603b      	str	r3, [r7, #0]
}
 8009f46:	bf00      	nop
 8009f48:	e7fe      	b.n	8009f48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f4a:	4b09      	ldr	r3, [pc, #36]	; (8009f70 <prvSwitchTimerLists+0xc0>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1b1      	bne.n	8009eb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f54:	4b06      	ldr	r3, [pc, #24]	; (8009f70 <prvSwitchTimerLists+0xc0>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f5a:	4b06      	ldr	r3, [pc, #24]	; (8009f74 <prvSwitchTimerLists+0xc4>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a04      	ldr	r2, [pc, #16]	; (8009f70 <prvSwitchTimerLists+0xc0>)
 8009f60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f62:	4a04      	ldr	r2, [pc, #16]	; (8009f74 <prvSwitchTimerLists+0xc4>)
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	6013      	str	r3, [r2, #0]
}
 8009f68:	bf00      	nop
 8009f6a:	3718      	adds	r7, #24
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	20001130 	.word	0x20001130
 8009f74:	20001134 	.word	0x20001134

08009f78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009f7e:	f000 f969 	bl	800a254 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f82:	4b15      	ldr	r3, [pc, #84]	; (8009fd8 <prvCheckForValidListAndQueue+0x60>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d120      	bne.n	8009fcc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f8a:	4814      	ldr	r0, [pc, #80]	; (8009fdc <prvCheckForValidListAndQueue+0x64>)
 8009f8c:	f7fd fc28 	bl	80077e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f90:	4813      	ldr	r0, [pc, #76]	; (8009fe0 <prvCheckForValidListAndQueue+0x68>)
 8009f92:	f7fd fc25 	bl	80077e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f96:	4b13      	ldr	r3, [pc, #76]	; (8009fe4 <prvCheckForValidListAndQueue+0x6c>)
 8009f98:	4a10      	ldr	r2, [pc, #64]	; (8009fdc <prvCheckForValidListAndQueue+0x64>)
 8009f9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009f9c:	4b12      	ldr	r3, [pc, #72]	; (8009fe8 <prvCheckForValidListAndQueue+0x70>)
 8009f9e:	4a10      	ldr	r2, [pc, #64]	; (8009fe0 <prvCheckForValidListAndQueue+0x68>)
 8009fa0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	4b11      	ldr	r3, [pc, #68]	; (8009fec <prvCheckForValidListAndQueue+0x74>)
 8009fa8:	4a11      	ldr	r2, [pc, #68]	; (8009ff0 <prvCheckForValidListAndQueue+0x78>)
 8009faa:	2110      	movs	r1, #16
 8009fac:	200a      	movs	r0, #10
 8009fae:	f7fd fd33 	bl	8007a18 <xQueueGenericCreateStatic>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	4a08      	ldr	r2, [pc, #32]	; (8009fd8 <prvCheckForValidListAndQueue+0x60>)
 8009fb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009fb8:	4b07      	ldr	r3, [pc, #28]	; (8009fd8 <prvCheckForValidListAndQueue+0x60>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d005      	beq.n	8009fcc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009fc0:	4b05      	ldr	r3, [pc, #20]	; (8009fd8 <prvCheckForValidListAndQueue+0x60>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	490b      	ldr	r1, [pc, #44]	; (8009ff4 <prvCheckForValidListAndQueue+0x7c>)
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7fe fc44 	bl	8008854 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fcc:	f000 f972 	bl	800a2b4 <vPortExitCritical>
}
 8009fd0:	bf00      	nop
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	20001138 	.word	0x20001138
 8009fdc:	20001108 	.word	0x20001108
 8009fe0:	2000111c 	.word	0x2000111c
 8009fe4:	20001130 	.word	0x20001130
 8009fe8:	20001134 	.word	0x20001134
 8009fec:	200011e4 	.word	0x200011e4
 8009ff0:	20001144 	.word	0x20001144
 8009ff4:	0800b1ec 	.word	0x0800b1ec

08009ff8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	3b04      	subs	r3, #4
 800a008:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a010:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	3b04      	subs	r3, #4
 800a016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	f023 0201 	bic.w	r2, r3, #1
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	3b04      	subs	r3, #4
 800a026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a028:	4a0c      	ldr	r2, [pc, #48]	; (800a05c <pxPortInitialiseStack+0x64>)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	3b14      	subs	r3, #20
 800a032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	3b04      	subs	r3, #4
 800a03e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f06f 0202 	mvn.w	r2, #2
 800a046:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	3b20      	subs	r3, #32
 800a04c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a04e:	68fb      	ldr	r3, [r7, #12]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3714      	adds	r7, #20
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr
 800a05c:	0800a061 	.word	0x0800a061

0800a060 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a066:	2300      	movs	r3, #0
 800a068:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a06a:	4b12      	ldr	r3, [pc, #72]	; (800a0b4 <prvTaskExitError+0x54>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a072:	d00a      	beq.n	800a08a <prvTaskExitError+0x2a>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	60fb      	str	r3, [r7, #12]
}
 800a086:	bf00      	nop
 800a088:	e7fe      	b.n	800a088 <prvTaskExitError+0x28>
	__asm volatile
 800a08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08e:	f383 8811 	msr	BASEPRI, r3
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	f3bf 8f4f 	dsb	sy
 800a09a:	60bb      	str	r3, [r7, #8]
}
 800a09c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a09e:	bf00      	nop
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d0fc      	beq.n	800a0a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a0a6:	bf00      	nop
 800a0a8:	bf00      	nop
 800a0aa:	3714      	adds	r7, #20
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	20000034 	.word	0x20000034
	...

0800a0c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a0c0:	4b07      	ldr	r3, [pc, #28]	; (800a0e0 <pxCurrentTCBConst2>)
 800a0c2:	6819      	ldr	r1, [r3, #0]
 800a0c4:	6808      	ldr	r0, [r1, #0]
 800a0c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ca:	f380 8809 	msr	PSP, r0
 800a0ce:	f3bf 8f6f 	isb	sy
 800a0d2:	f04f 0000 	mov.w	r0, #0
 800a0d6:	f380 8811 	msr	BASEPRI, r0
 800a0da:	4770      	bx	lr
 800a0dc:	f3af 8000 	nop.w

0800a0e0 <pxCurrentTCBConst2>:
 800a0e0:	20000c08 	.word	0x20000c08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0e4:	bf00      	nop
 800a0e6:	bf00      	nop

0800a0e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a0e8:	4808      	ldr	r0, [pc, #32]	; (800a10c <prvPortStartFirstTask+0x24>)
 800a0ea:	6800      	ldr	r0, [r0, #0]
 800a0ec:	6800      	ldr	r0, [r0, #0]
 800a0ee:	f380 8808 	msr	MSP, r0
 800a0f2:	f04f 0000 	mov.w	r0, #0
 800a0f6:	f380 8814 	msr	CONTROL, r0
 800a0fa:	b662      	cpsie	i
 800a0fc:	b661      	cpsie	f
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	df00      	svc	0
 800a108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a10a:	bf00      	nop
 800a10c:	e000ed08 	.word	0xe000ed08

0800a110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b086      	sub	sp, #24
 800a114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a116:	4b46      	ldr	r3, [pc, #280]	; (800a230 <xPortStartScheduler+0x120>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a46      	ldr	r2, [pc, #280]	; (800a234 <xPortStartScheduler+0x124>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d10a      	bne.n	800a136 <xPortStartScheduler+0x26>
	__asm volatile
 800a120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	613b      	str	r3, [r7, #16]
}
 800a132:	bf00      	nop
 800a134:	e7fe      	b.n	800a134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a136:	4b3e      	ldr	r3, [pc, #248]	; (800a230 <xPortStartScheduler+0x120>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a3f      	ldr	r2, [pc, #252]	; (800a238 <xPortStartScheduler+0x128>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d10a      	bne.n	800a156 <xPortStartScheduler+0x46>
	__asm volatile
 800a140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a144:	f383 8811 	msr	BASEPRI, r3
 800a148:	f3bf 8f6f 	isb	sy
 800a14c:	f3bf 8f4f 	dsb	sy
 800a150:	60fb      	str	r3, [r7, #12]
}
 800a152:	bf00      	nop
 800a154:	e7fe      	b.n	800a154 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a156:	4b39      	ldr	r3, [pc, #228]	; (800a23c <xPortStartScheduler+0x12c>)
 800a158:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	22ff      	movs	r2, #255	; 0xff
 800a166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a170:	78fb      	ldrb	r3, [r7, #3]
 800a172:	b2db      	uxtb	r3, r3
 800a174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a178:	b2da      	uxtb	r2, r3
 800a17a:	4b31      	ldr	r3, [pc, #196]	; (800a240 <xPortStartScheduler+0x130>)
 800a17c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a17e:	4b31      	ldr	r3, [pc, #196]	; (800a244 <xPortStartScheduler+0x134>)
 800a180:	2207      	movs	r2, #7
 800a182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a184:	e009      	b.n	800a19a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a186:	4b2f      	ldr	r3, [pc, #188]	; (800a244 <xPortStartScheduler+0x134>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	3b01      	subs	r3, #1
 800a18c:	4a2d      	ldr	r2, [pc, #180]	; (800a244 <xPortStartScheduler+0x134>)
 800a18e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a190:	78fb      	ldrb	r3, [r7, #3]
 800a192:	b2db      	uxtb	r3, r3
 800a194:	005b      	lsls	r3, r3, #1
 800a196:	b2db      	uxtb	r3, r3
 800a198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a19a:	78fb      	ldrb	r3, [r7, #3]
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1a2:	2b80      	cmp	r3, #128	; 0x80
 800a1a4:	d0ef      	beq.n	800a186 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a1a6:	4b27      	ldr	r3, [pc, #156]	; (800a244 <xPortStartScheduler+0x134>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f1c3 0307 	rsb	r3, r3, #7
 800a1ae:	2b04      	cmp	r3, #4
 800a1b0:	d00a      	beq.n	800a1c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	60bb      	str	r3, [r7, #8]
}
 800a1c4:	bf00      	nop
 800a1c6:	e7fe      	b.n	800a1c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a1c8:	4b1e      	ldr	r3, [pc, #120]	; (800a244 <xPortStartScheduler+0x134>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	021b      	lsls	r3, r3, #8
 800a1ce:	4a1d      	ldr	r2, [pc, #116]	; (800a244 <xPortStartScheduler+0x134>)
 800a1d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a1d2:	4b1c      	ldr	r3, [pc, #112]	; (800a244 <xPortStartScheduler+0x134>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1da:	4a1a      	ldr	r2, [pc, #104]	; (800a244 <xPortStartScheduler+0x134>)
 800a1dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a1e6:	4b18      	ldr	r3, [pc, #96]	; (800a248 <xPortStartScheduler+0x138>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a17      	ldr	r2, [pc, #92]	; (800a248 <xPortStartScheduler+0x138>)
 800a1ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a1f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1f2:	4b15      	ldr	r3, [pc, #84]	; (800a248 <xPortStartScheduler+0x138>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a14      	ldr	r2, [pc, #80]	; (800a248 <xPortStartScheduler+0x138>)
 800a1f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a1fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a1fe:	f000 f8dd 	bl	800a3bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a202:	4b12      	ldr	r3, [pc, #72]	; (800a24c <xPortStartScheduler+0x13c>)
 800a204:	2200      	movs	r2, #0
 800a206:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a208:	f000 f8fc 	bl	800a404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a20c:	4b10      	ldr	r3, [pc, #64]	; (800a250 <xPortStartScheduler+0x140>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a0f      	ldr	r2, [pc, #60]	; (800a250 <xPortStartScheduler+0x140>)
 800a212:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a216:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a218:	f7ff ff66 	bl	800a0e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a21c:	f7fe ff54 	bl	80090c8 <vTaskSwitchContext>
	prvTaskExitError();
 800a220:	f7ff ff1e 	bl	800a060 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3718      	adds	r7, #24
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	e000ed00 	.word	0xe000ed00
 800a234:	410fc271 	.word	0x410fc271
 800a238:	410fc270 	.word	0x410fc270
 800a23c:	e000e400 	.word	0xe000e400
 800a240:	20001234 	.word	0x20001234
 800a244:	20001238 	.word	0x20001238
 800a248:	e000ed20 	.word	0xe000ed20
 800a24c:	20000034 	.word	0x20000034
 800a250:	e000ef34 	.word	0xe000ef34

0800a254 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
	__asm volatile
 800a25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25e:	f383 8811 	msr	BASEPRI, r3
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	f3bf 8f4f 	dsb	sy
 800a26a:	607b      	str	r3, [r7, #4]
}
 800a26c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a26e:	4b0f      	ldr	r3, [pc, #60]	; (800a2ac <vPortEnterCritical+0x58>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	3301      	adds	r3, #1
 800a274:	4a0d      	ldr	r2, [pc, #52]	; (800a2ac <vPortEnterCritical+0x58>)
 800a276:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a278:	4b0c      	ldr	r3, [pc, #48]	; (800a2ac <vPortEnterCritical+0x58>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d10f      	bne.n	800a2a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a280:	4b0b      	ldr	r3, [pc, #44]	; (800a2b0 <vPortEnterCritical+0x5c>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	b2db      	uxtb	r3, r3
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00a      	beq.n	800a2a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28e:	f383 8811 	msr	BASEPRI, r3
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	603b      	str	r3, [r7, #0]
}
 800a29c:	bf00      	nop
 800a29e:	e7fe      	b.n	800a29e <vPortEnterCritical+0x4a>
	}
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr
 800a2ac:	20000034 	.word	0x20000034
 800a2b0:	e000ed04 	.word	0xe000ed04

0800a2b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a2ba:	4b12      	ldr	r3, [pc, #72]	; (800a304 <vPortExitCritical+0x50>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10a      	bne.n	800a2d8 <vPortExitCritical+0x24>
	__asm volatile
 800a2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	607b      	str	r3, [r7, #4]
}
 800a2d4:	bf00      	nop
 800a2d6:	e7fe      	b.n	800a2d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a2d8:	4b0a      	ldr	r3, [pc, #40]	; (800a304 <vPortExitCritical+0x50>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	4a09      	ldr	r2, [pc, #36]	; (800a304 <vPortExitCritical+0x50>)
 800a2e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a2e2:	4b08      	ldr	r3, [pc, #32]	; (800a304 <vPortExitCritical+0x50>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d105      	bne.n	800a2f6 <vPortExitCritical+0x42>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	f383 8811 	msr	BASEPRI, r3
}
 800a2f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a2f6:	bf00      	nop
 800a2f8:	370c      	adds	r7, #12
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	20000034 	.word	0x20000034
	...

0800a310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a310:	f3ef 8009 	mrs	r0, PSP
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	4b15      	ldr	r3, [pc, #84]	; (800a370 <pxCurrentTCBConst>)
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	f01e 0f10 	tst.w	lr, #16
 800a320:	bf08      	it	eq
 800a322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32a:	6010      	str	r0, [r2, #0]
 800a32c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a330:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a334:	f380 8811 	msr	BASEPRI, r0
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	f3bf 8f6f 	isb	sy
 800a340:	f7fe fec2 	bl	80090c8 <vTaskSwitchContext>
 800a344:	f04f 0000 	mov.w	r0, #0
 800a348:	f380 8811 	msr	BASEPRI, r0
 800a34c:	bc09      	pop	{r0, r3}
 800a34e:	6819      	ldr	r1, [r3, #0]
 800a350:	6808      	ldr	r0, [r1, #0]
 800a352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a356:	f01e 0f10 	tst.w	lr, #16
 800a35a:	bf08      	it	eq
 800a35c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a360:	f380 8809 	msr	PSP, r0
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	f3af 8000 	nop.w

0800a370 <pxCurrentTCBConst>:
 800a370:	20000c08 	.word	0x20000c08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a374:	bf00      	nop
 800a376:	bf00      	nop

0800a378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
	__asm volatile
 800a37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a382:	f383 8811 	msr	BASEPRI, r3
 800a386:	f3bf 8f6f 	isb	sy
 800a38a:	f3bf 8f4f 	dsb	sy
 800a38e:	607b      	str	r3, [r7, #4]
}
 800a390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a392:	f7fe fddf 	bl	8008f54 <xTaskIncrementTick>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d003      	beq.n	800a3a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a39c:	4b06      	ldr	r3, [pc, #24]	; (800a3b8 <xPortSysTickHandler+0x40>)
 800a39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3a2:	601a      	str	r2, [r3, #0]
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	f383 8811 	msr	BASEPRI, r3
}
 800a3ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a3b0:	bf00      	nop
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	e000ed04 	.word	0xe000ed04

0800a3bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a3bc:	b480      	push	{r7}
 800a3be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a3c0:	4b0b      	ldr	r3, [pc, #44]	; (800a3f0 <vPortSetupTimerInterrupt+0x34>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a3c6:	4b0b      	ldr	r3, [pc, #44]	; (800a3f4 <vPortSetupTimerInterrupt+0x38>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a3cc:	4b0a      	ldr	r3, [pc, #40]	; (800a3f8 <vPortSetupTimerInterrupt+0x3c>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a0a      	ldr	r2, [pc, #40]	; (800a3fc <vPortSetupTimerInterrupt+0x40>)
 800a3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3d6:	099b      	lsrs	r3, r3, #6
 800a3d8:	4a09      	ldr	r2, [pc, #36]	; (800a400 <vPortSetupTimerInterrupt+0x44>)
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a3de:	4b04      	ldr	r3, [pc, #16]	; (800a3f0 <vPortSetupTimerInterrupt+0x34>)
 800a3e0:	2207      	movs	r2, #7
 800a3e2:	601a      	str	r2, [r3, #0]
}
 800a3e4:	bf00      	nop
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	e000e010 	.word	0xe000e010
 800a3f4:	e000e018 	.word	0xe000e018
 800a3f8:	20000010 	.word	0x20000010
 800a3fc:	10624dd3 	.word	0x10624dd3
 800a400:	e000e014 	.word	0xe000e014

0800a404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a414 <vPortEnableVFP+0x10>
 800a408:	6801      	ldr	r1, [r0, #0]
 800a40a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a40e:	6001      	str	r1, [r0, #0]
 800a410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a412:	bf00      	nop
 800a414:	e000ed88 	.word	0xe000ed88

0800a418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a418:	b480      	push	{r7}
 800a41a:	b085      	sub	sp, #20
 800a41c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a41e:	f3ef 8305 	mrs	r3, IPSR
 800a422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2b0f      	cmp	r3, #15
 800a428:	d914      	bls.n	800a454 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a42a:	4a17      	ldr	r2, [pc, #92]	; (800a488 <vPortValidateInterruptPriority+0x70>)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	4413      	add	r3, r2
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a434:	4b15      	ldr	r3, [pc, #84]	; (800a48c <vPortValidateInterruptPriority+0x74>)
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	7afa      	ldrb	r2, [r7, #11]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d20a      	bcs.n	800a454 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	607b      	str	r3, [r7, #4]
}
 800a450:	bf00      	nop
 800a452:	e7fe      	b.n	800a452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a454:	4b0e      	ldr	r3, [pc, #56]	; (800a490 <vPortValidateInterruptPriority+0x78>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a45c:	4b0d      	ldr	r3, [pc, #52]	; (800a494 <vPortValidateInterruptPriority+0x7c>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	429a      	cmp	r2, r3
 800a462:	d90a      	bls.n	800a47a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a468:	f383 8811 	msr	BASEPRI, r3
 800a46c:	f3bf 8f6f 	isb	sy
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	603b      	str	r3, [r7, #0]
}
 800a476:	bf00      	nop
 800a478:	e7fe      	b.n	800a478 <vPortValidateInterruptPriority+0x60>
	}
 800a47a:	bf00      	nop
 800a47c:	3714      	adds	r7, #20
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	e000e3f0 	.word	0xe000e3f0
 800a48c:	20001234 	.word	0x20001234
 800a490:	e000ed0c 	.word	0xe000ed0c
 800a494:	20001238 	.word	0x20001238

0800a498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b08a      	sub	sp, #40	; 0x28
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a4a4:	f7fe fc9a 	bl	8008ddc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a4a8:	4b5b      	ldr	r3, [pc, #364]	; (800a618 <pvPortMalloc+0x180>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d101      	bne.n	800a4b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a4b0:	f000 f920 	bl	800a6f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a4b4:	4b59      	ldr	r3, [pc, #356]	; (800a61c <pvPortMalloc+0x184>)
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	f040 8093 	bne.w	800a5e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d01d      	beq.n	800a504 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a4c8:	2208      	movs	r2, #8
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f003 0307 	and.w	r3, r3, #7
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d014      	beq.n	800a504 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f023 0307 	bic.w	r3, r3, #7
 800a4e0:	3308      	adds	r3, #8
 800a4e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f003 0307 	and.w	r3, r3, #7
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00a      	beq.n	800a504 <pvPortMalloc+0x6c>
	__asm volatile
 800a4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f2:	f383 8811 	msr	BASEPRI, r3
 800a4f6:	f3bf 8f6f 	isb	sy
 800a4fa:	f3bf 8f4f 	dsb	sy
 800a4fe:	617b      	str	r3, [r7, #20]
}
 800a500:	bf00      	nop
 800a502:	e7fe      	b.n	800a502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d06e      	beq.n	800a5e8 <pvPortMalloc+0x150>
 800a50a:	4b45      	ldr	r3, [pc, #276]	; (800a620 <pvPortMalloc+0x188>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	429a      	cmp	r2, r3
 800a512:	d869      	bhi.n	800a5e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a514:	4b43      	ldr	r3, [pc, #268]	; (800a624 <pvPortMalloc+0x18c>)
 800a516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a518:	4b42      	ldr	r3, [pc, #264]	; (800a624 <pvPortMalloc+0x18c>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a51e:	e004      	b.n	800a52a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	429a      	cmp	r2, r3
 800a532:	d903      	bls.n	800a53c <pvPortMalloc+0xa4>
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1f1      	bne.n	800a520 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a53c:	4b36      	ldr	r3, [pc, #216]	; (800a618 <pvPortMalloc+0x180>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a542:	429a      	cmp	r2, r3
 800a544:	d050      	beq.n	800a5e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a546:	6a3b      	ldr	r3, [r7, #32]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2208      	movs	r2, #8
 800a54c:	4413      	add	r3, r2
 800a54e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	6a3b      	ldr	r3, [r7, #32]
 800a556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	1ad2      	subs	r2, r2, r3
 800a560:	2308      	movs	r3, #8
 800a562:	005b      	lsls	r3, r3, #1
 800a564:	429a      	cmp	r2, r3
 800a566:	d91f      	bls.n	800a5a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4413      	add	r3, r2
 800a56e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	f003 0307 	and.w	r3, r3, #7
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00a      	beq.n	800a590 <pvPortMalloc+0xf8>
	__asm volatile
 800a57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57e:	f383 8811 	msr	BASEPRI, r3
 800a582:	f3bf 8f6f 	isb	sy
 800a586:	f3bf 8f4f 	dsb	sy
 800a58a:	613b      	str	r3, [r7, #16]
}
 800a58c:	bf00      	nop
 800a58e:	e7fe      	b.n	800a58e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a592:	685a      	ldr	r2, [r3, #4]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	1ad2      	subs	r2, r2, r3
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a5a2:	69b8      	ldr	r0, [r7, #24]
 800a5a4:	f000 f908 	bl	800a7b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a5a8:	4b1d      	ldr	r3, [pc, #116]	; (800a620 <pvPortMalloc+0x188>)
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	1ad3      	subs	r3, r2, r3
 800a5b2:	4a1b      	ldr	r2, [pc, #108]	; (800a620 <pvPortMalloc+0x188>)
 800a5b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a5b6:	4b1a      	ldr	r3, [pc, #104]	; (800a620 <pvPortMalloc+0x188>)
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	4b1b      	ldr	r3, [pc, #108]	; (800a628 <pvPortMalloc+0x190>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d203      	bcs.n	800a5ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a5c2:	4b17      	ldr	r3, [pc, #92]	; (800a620 <pvPortMalloc+0x188>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a18      	ldr	r2, [pc, #96]	; (800a628 <pvPortMalloc+0x190>)
 800a5c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	685a      	ldr	r2, [r3, #4]
 800a5ce:	4b13      	ldr	r3, [pc, #76]	; (800a61c <pvPortMalloc+0x184>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	431a      	orrs	r2, r3
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5da:	2200      	movs	r2, #0
 800a5dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a5de:	4b13      	ldr	r3, [pc, #76]	; (800a62c <pvPortMalloc+0x194>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	4a11      	ldr	r2, [pc, #68]	; (800a62c <pvPortMalloc+0x194>)
 800a5e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5e8:	f7fe fc06 	bl	8008df8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	f003 0307 	and.w	r3, r3, #7
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00a      	beq.n	800a60c <pvPortMalloc+0x174>
	__asm volatile
 800a5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fa:	f383 8811 	msr	BASEPRI, r3
 800a5fe:	f3bf 8f6f 	isb	sy
 800a602:	f3bf 8f4f 	dsb	sy
 800a606:	60fb      	str	r3, [r7, #12]
}
 800a608:	bf00      	nop
 800a60a:	e7fe      	b.n	800a60a <pvPortMalloc+0x172>
	return pvReturn;
 800a60c:	69fb      	ldr	r3, [r7, #28]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3728      	adds	r7, #40	; 0x28
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	20001e44 	.word	0x20001e44
 800a61c:	20001e58 	.word	0x20001e58
 800a620:	20001e48 	.word	0x20001e48
 800a624:	20001e3c 	.word	0x20001e3c
 800a628:	20001e4c 	.word	0x20001e4c
 800a62c:	20001e50 	.word	0x20001e50

0800a630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d04d      	beq.n	800a6de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a642:	2308      	movs	r3, #8
 800a644:	425b      	negs	r3, r3
 800a646:	697a      	ldr	r2, [r7, #20]
 800a648:	4413      	add	r3, r2
 800a64a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	685a      	ldr	r2, [r3, #4]
 800a654:	4b24      	ldr	r3, [pc, #144]	; (800a6e8 <vPortFree+0xb8>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4013      	ands	r3, r2
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d10a      	bne.n	800a674 <vPortFree+0x44>
	__asm volatile
 800a65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a662:	f383 8811 	msr	BASEPRI, r3
 800a666:	f3bf 8f6f 	isb	sy
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	60fb      	str	r3, [r7, #12]
}
 800a670:	bf00      	nop
 800a672:	e7fe      	b.n	800a672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00a      	beq.n	800a692 <vPortFree+0x62>
	__asm volatile
 800a67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a680:	f383 8811 	msr	BASEPRI, r3
 800a684:	f3bf 8f6f 	isb	sy
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	60bb      	str	r3, [r7, #8]
}
 800a68e:	bf00      	nop
 800a690:	e7fe      	b.n	800a690 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	685a      	ldr	r2, [r3, #4]
 800a696:	4b14      	ldr	r3, [pc, #80]	; (800a6e8 <vPortFree+0xb8>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4013      	ands	r3, r2
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d01e      	beq.n	800a6de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d11a      	bne.n	800a6de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	4b0e      	ldr	r3, [pc, #56]	; (800a6e8 <vPortFree+0xb8>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	43db      	mvns	r3, r3
 800a6b2:	401a      	ands	r2, r3
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a6b8:	f7fe fb90 	bl	8008ddc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	685a      	ldr	r2, [r3, #4]
 800a6c0:	4b0a      	ldr	r3, [pc, #40]	; (800a6ec <vPortFree+0xbc>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	4a09      	ldr	r2, [pc, #36]	; (800a6ec <vPortFree+0xbc>)
 800a6c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a6ca:	6938      	ldr	r0, [r7, #16]
 800a6cc:	f000 f874 	bl	800a7b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a6d0:	4b07      	ldr	r3, [pc, #28]	; (800a6f0 <vPortFree+0xc0>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	4a06      	ldr	r2, [pc, #24]	; (800a6f0 <vPortFree+0xc0>)
 800a6d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a6da:	f7fe fb8d 	bl	8008df8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a6de:	bf00      	nop
 800a6e0:	3718      	adds	r7, #24
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	20001e58 	.word	0x20001e58
 800a6ec:	20001e48 	.word	0x20001e48
 800a6f0:	20001e54 	.word	0x20001e54

0800a6f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a6fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a700:	4b27      	ldr	r3, [pc, #156]	; (800a7a0 <prvHeapInit+0xac>)
 800a702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f003 0307 	and.w	r3, r3, #7
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00c      	beq.n	800a728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	3307      	adds	r3, #7
 800a712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f023 0307 	bic.w	r3, r3, #7
 800a71a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a71c:	68ba      	ldr	r2, [r7, #8]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	4a1f      	ldr	r2, [pc, #124]	; (800a7a0 <prvHeapInit+0xac>)
 800a724:	4413      	add	r3, r2
 800a726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a72c:	4a1d      	ldr	r2, [pc, #116]	; (800a7a4 <prvHeapInit+0xb0>)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a732:	4b1c      	ldr	r3, [pc, #112]	; (800a7a4 <prvHeapInit+0xb0>)
 800a734:	2200      	movs	r2, #0
 800a736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	4413      	add	r3, r2
 800a73e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a740:	2208      	movs	r2, #8
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	1a9b      	subs	r3, r3, r2
 800a746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f023 0307 	bic.w	r3, r3, #7
 800a74e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	4a15      	ldr	r2, [pc, #84]	; (800a7a8 <prvHeapInit+0xb4>)
 800a754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a756:	4b14      	ldr	r3, [pc, #80]	; (800a7a8 <prvHeapInit+0xb4>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2200      	movs	r2, #0
 800a75c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a75e:	4b12      	ldr	r3, [pc, #72]	; (800a7a8 <prvHeapInit+0xb4>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2200      	movs	r2, #0
 800a764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	1ad2      	subs	r2, r2, r3
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a774:	4b0c      	ldr	r3, [pc, #48]	; (800a7a8 <prvHeapInit+0xb4>)
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	4a0a      	ldr	r2, [pc, #40]	; (800a7ac <prvHeapInit+0xb8>)
 800a782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	4a09      	ldr	r2, [pc, #36]	; (800a7b0 <prvHeapInit+0xbc>)
 800a78a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a78c:	4b09      	ldr	r3, [pc, #36]	; (800a7b4 <prvHeapInit+0xc0>)
 800a78e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a792:	601a      	str	r2, [r3, #0]
}
 800a794:	bf00      	nop
 800a796:	3714      	adds	r7, #20
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr
 800a7a0:	2000123c 	.word	0x2000123c
 800a7a4:	20001e3c 	.word	0x20001e3c
 800a7a8:	20001e44 	.word	0x20001e44
 800a7ac:	20001e4c 	.word	0x20001e4c
 800a7b0:	20001e48 	.word	0x20001e48
 800a7b4:	20001e58 	.word	0x20001e58

0800a7b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a7c0:	4b28      	ldr	r3, [pc, #160]	; (800a864 <prvInsertBlockIntoFreeList+0xac>)
 800a7c2:	60fb      	str	r3, [r7, #12]
 800a7c4:	e002      	b.n	800a7cc <prvInsertBlockIntoFreeList+0x14>
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	60fb      	str	r3, [r7, #12]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d8f7      	bhi.n	800a7c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	68ba      	ldr	r2, [r7, #8]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d108      	bne.n	800a7fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	685a      	ldr	r2, [r3, #4]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	441a      	add	r2, r3
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	441a      	add	r2, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d118      	bne.n	800a840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	4b15      	ldr	r3, [pc, #84]	; (800a868 <prvInsertBlockIntoFreeList+0xb0>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	429a      	cmp	r2, r3
 800a818:	d00d      	beq.n	800a836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	685a      	ldr	r2, [r3, #4]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	441a      	add	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	601a      	str	r2, [r3, #0]
 800a834:	e008      	b.n	800a848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a836:	4b0c      	ldr	r3, [pc, #48]	; (800a868 <prvInsertBlockIntoFreeList+0xb0>)
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	601a      	str	r2, [r3, #0]
 800a83e:	e003      	b.n	800a848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d002      	beq.n	800a856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a856:	bf00      	nop
 800a858:	3714      	adds	r7, #20
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	20001e3c 	.word	0x20001e3c
 800a868:	20001e44 	.word	0x20001e44

0800a86c <__errno>:
 800a86c:	4b01      	ldr	r3, [pc, #4]	; (800a874 <__errno+0x8>)
 800a86e:	6818      	ldr	r0, [r3, #0]
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	20000038 	.word	0x20000038

0800a878 <__libc_init_array>:
 800a878:	b570      	push	{r4, r5, r6, lr}
 800a87a:	4d0d      	ldr	r5, [pc, #52]	; (800a8b0 <__libc_init_array+0x38>)
 800a87c:	4c0d      	ldr	r4, [pc, #52]	; (800a8b4 <__libc_init_array+0x3c>)
 800a87e:	1b64      	subs	r4, r4, r5
 800a880:	10a4      	asrs	r4, r4, #2
 800a882:	2600      	movs	r6, #0
 800a884:	42a6      	cmp	r6, r4
 800a886:	d109      	bne.n	800a89c <__libc_init_array+0x24>
 800a888:	4d0b      	ldr	r5, [pc, #44]	; (800a8b8 <__libc_init_array+0x40>)
 800a88a:	4c0c      	ldr	r4, [pc, #48]	; (800a8bc <__libc_init_array+0x44>)
 800a88c:	f000 fc56 	bl	800b13c <_init>
 800a890:	1b64      	subs	r4, r4, r5
 800a892:	10a4      	asrs	r4, r4, #2
 800a894:	2600      	movs	r6, #0
 800a896:	42a6      	cmp	r6, r4
 800a898:	d105      	bne.n	800a8a6 <__libc_init_array+0x2e>
 800a89a:	bd70      	pop	{r4, r5, r6, pc}
 800a89c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8a0:	4798      	blx	r3
 800a8a2:	3601      	adds	r6, #1
 800a8a4:	e7ee      	b.n	800a884 <__libc_init_array+0xc>
 800a8a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8aa:	4798      	blx	r3
 800a8ac:	3601      	adds	r6, #1
 800a8ae:	e7f2      	b.n	800a896 <__libc_init_array+0x1e>
 800a8b0:	0800c7c4 	.word	0x0800c7c4
 800a8b4:	0800c7c4 	.word	0x0800c7c4
 800a8b8:	0800c7c4 	.word	0x0800c7c4
 800a8bc:	0800c7c8 	.word	0x0800c7c8

0800a8c0 <memcpy>:
 800a8c0:	440a      	add	r2, r1
 800a8c2:	4291      	cmp	r1, r2
 800a8c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8c8:	d100      	bne.n	800a8cc <memcpy+0xc>
 800a8ca:	4770      	bx	lr
 800a8cc:	b510      	push	{r4, lr}
 800a8ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8d6:	4291      	cmp	r1, r2
 800a8d8:	d1f9      	bne.n	800a8ce <memcpy+0xe>
 800a8da:	bd10      	pop	{r4, pc}

0800a8dc <memmove>:
 800a8dc:	4288      	cmp	r0, r1
 800a8de:	b510      	push	{r4, lr}
 800a8e0:	eb01 0402 	add.w	r4, r1, r2
 800a8e4:	d902      	bls.n	800a8ec <memmove+0x10>
 800a8e6:	4284      	cmp	r4, r0
 800a8e8:	4623      	mov	r3, r4
 800a8ea:	d807      	bhi.n	800a8fc <memmove+0x20>
 800a8ec:	1e43      	subs	r3, r0, #1
 800a8ee:	42a1      	cmp	r1, r4
 800a8f0:	d008      	beq.n	800a904 <memmove+0x28>
 800a8f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8fa:	e7f8      	b.n	800a8ee <memmove+0x12>
 800a8fc:	4402      	add	r2, r0
 800a8fe:	4601      	mov	r1, r0
 800a900:	428a      	cmp	r2, r1
 800a902:	d100      	bne.n	800a906 <memmove+0x2a>
 800a904:	bd10      	pop	{r4, pc}
 800a906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a90a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a90e:	e7f7      	b.n	800a900 <memmove+0x24>

0800a910 <memset>:
 800a910:	4402      	add	r2, r0
 800a912:	4603      	mov	r3, r0
 800a914:	4293      	cmp	r3, r2
 800a916:	d100      	bne.n	800a91a <memset+0xa>
 800a918:	4770      	bx	lr
 800a91a:	f803 1b01 	strb.w	r1, [r3], #1
 800a91e:	e7f9      	b.n	800a914 <memset+0x4>

0800a920 <siprintf>:
 800a920:	b40e      	push	{r1, r2, r3}
 800a922:	b500      	push	{lr}
 800a924:	b09c      	sub	sp, #112	; 0x70
 800a926:	ab1d      	add	r3, sp, #116	; 0x74
 800a928:	9002      	str	r0, [sp, #8]
 800a92a:	9006      	str	r0, [sp, #24]
 800a92c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a930:	4809      	ldr	r0, [pc, #36]	; (800a958 <siprintf+0x38>)
 800a932:	9107      	str	r1, [sp, #28]
 800a934:	9104      	str	r1, [sp, #16]
 800a936:	4909      	ldr	r1, [pc, #36]	; (800a95c <siprintf+0x3c>)
 800a938:	f853 2b04 	ldr.w	r2, [r3], #4
 800a93c:	9105      	str	r1, [sp, #20]
 800a93e:	6800      	ldr	r0, [r0, #0]
 800a940:	9301      	str	r3, [sp, #4]
 800a942:	a902      	add	r1, sp, #8
 800a944:	f000 f870 	bl	800aa28 <_svfiprintf_r>
 800a948:	9b02      	ldr	r3, [sp, #8]
 800a94a:	2200      	movs	r2, #0
 800a94c:	701a      	strb	r2, [r3, #0]
 800a94e:	b01c      	add	sp, #112	; 0x70
 800a950:	f85d eb04 	ldr.w	lr, [sp], #4
 800a954:	b003      	add	sp, #12
 800a956:	4770      	bx	lr
 800a958:	20000038 	.word	0x20000038
 800a95c:	ffff0208 	.word	0xffff0208

0800a960 <strcpy>:
 800a960:	4603      	mov	r3, r0
 800a962:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a966:	f803 2b01 	strb.w	r2, [r3], #1
 800a96a:	2a00      	cmp	r2, #0
 800a96c:	d1f9      	bne.n	800a962 <strcpy+0x2>
 800a96e:	4770      	bx	lr

0800a970 <__ssputs_r>:
 800a970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a974:	688e      	ldr	r6, [r1, #8]
 800a976:	429e      	cmp	r6, r3
 800a978:	4682      	mov	sl, r0
 800a97a:	460c      	mov	r4, r1
 800a97c:	4690      	mov	r8, r2
 800a97e:	461f      	mov	r7, r3
 800a980:	d838      	bhi.n	800a9f4 <__ssputs_r+0x84>
 800a982:	898a      	ldrh	r2, [r1, #12]
 800a984:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a988:	d032      	beq.n	800a9f0 <__ssputs_r+0x80>
 800a98a:	6825      	ldr	r5, [r4, #0]
 800a98c:	6909      	ldr	r1, [r1, #16]
 800a98e:	eba5 0901 	sub.w	r9, r5, r1
 800a992:	6965      	ldr	r5, [r4, #20]
 800a994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a998:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a99c:	3301      	adds	r3, #1
 800a99e:	444b      	add	r3, r9
 800a9a0:	106d      	asrs	r5, r5, #1
 800a9a2:	429d      	cmp	r5, r3
 800a9a4:	bf38      	it	cc
 800a9a6:	461d      	movcc	r5, r3
 800a9a8:	0553      	lsls	r3, r2, #21
 800a9aa:	d531      	bpl.n	800aa10 <__ssputs_r+0xa0>
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	f000 fb1f 	bl	800aff0 <_malloc_r>
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	b950      	cbnz	r0, 800a9cc <__ssputs_r+0x5c>
 800a9b6:	230c      	movs	r3, #12
 800a9b8:	f8ca 3000 	str.w	r3, [sl]
 800a9bc:	89a3      	ldrh	r3, [r4, #12]
 800a9be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9c2:	81a3      	strh	r3, [r4, #12]
 800a9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9cc:	6921      	ldr	r1, [r4, #16]
 800a9ce:	464a      	mov	r2, r9
 800a9d0:	f7ff ff76 	bl	800a8c0 <memcpy>
 800a9d4:	89a3      	ldrh	r3, [r4, #12]
 800a9d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9de:	81a3      	strh	r3, [r4, #12]
 800a9e0:	6126      	str	r6, [r4, #16]
 800a9e2:	6165      	str	r5, [r4, #20]
 800a9e4:	444e      	add	r6, r9
 800a9e6:	eba5 0509 	sub.w	r5, r5, r9
 800a9ea:	6026      	str	r6, [r4, #0]
 800a9ec:	60a5      	str	r5, [r4, #8]
 800a9ee:	463e      	mov	r6, r7
 800a9f0:	42be      	cmp	r6, r7
 800a9f2:	d900      	bls.n	800a9f6 <__ssputs_r+0x86>
 800a9f4:	463e      	mov	r6, r7
 800a9f6:	4632      	mov	r2, r6
 800a9f8:	6820      	ldr	r0, [r4, #0]
 800a9fa:	4641      	mov	r1, r8
 800a9fc:	f7ff ff6e 	bl	800a8dc <memmove>
 800aa00:	68a3      	ldr	r3, [r4, #8]
 800aa02:	6822      	ldr	r2, [r4, #0]
 800aa04:	1b9b      	subs	r3, r3, r6
 800aa06:	4432      	add	r2, r6
 800aa08:	60a3      	str	r3, [r4, #8]
 800aa0a:	6022      	str	r2, [r4, #0]
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	e7db      	b.n	800a9c8 <__ssputs_r+0x58>
 800aa10:	462a      	mov	r2, r5
 800aa12:	f000 fb47 	bl	800b0a4 <_realloc_r>
 800aa16:	4606      	mov	r6, r0
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	d1e1      	bne.n	800a9e0 <__ssputs_r+0x70>
 800aa1c:	6921      	ldr	r1, [r4, #16]
 800aa1e:	4650      	mov	r0, sl
 800aa20:	f000 fa96 	bl	800af50 <_free_r>
 800aa24:	e7c7      	b.n	800a9b6 <__ssputs_r+0x46>
	...

0800aa28 <_svfiprintf_r>:
 800aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	4698      	mov	r8, r3
 800aa2e:	898b      	ldrh	r3, [r1, #12]
 800aa30:	061b      	lsls	r3, r3, #24
 800aa32:	b09d      	sub	sp, #116	; 0x74
 800aa34:	4607      	mov	r7, r0
 800aa36:	460d      	mov	r5, r1
 800aa38:	4614      	mov	r4, r2
 800aa3a:	d50e      	bpl.n	800aa5a <_svfiprintf_r+0x32>
 800aa3c:	690b      	ldr	r3, [r1, #16]
 800aa3e:	b963      	cbnz	r3, 800aa5a <_svfiprintf_r+0x32>
 800aa40:	2140      	movs	r1, #64	; 0x40
 800aa42:	f000 fad5 	bl	800aff0 <_malloc_r>
 800aa46:	6028      	str	r0, [r5, #0]
 800aa48:	6128      	str	r0, [r5, #16]
 800aa4a:	b920      	cbnz	r0, 800aa56 <_svfiprintf_r+0x2e>
 800aa4c:	230c      	movs	r3, #12
 800aa4e:	603b      	str	r3, [r7, #0]
 800aa50:	f04f 30ff 	mov.w	r0, #4294967295
 800aa54:	e0d1      	b.n	800abfa <_svfiprintf_r+0x1d2>
 800aa56:	2340      	movs	r3, #64	; 0x40
 800aa58:	616b      	str	r3, [r5, #20]
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa5e:	2320      	movs	r3, #32
 800aa60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa64:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa68:	2330      	movs	r3, #48	; 0x30
 800aa6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ac14 <_svfiprintf_r+0x1ec>
 800aa6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa72:	f04f 0901 	mov.w	r9, #1
 800aa76:	4623      	mov	r3, r4
 800aa78:	469a      	mov	sl, r3
 800aa7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa7e:	b10a      	cbz	r2, 800aa84 <_svfiprintf_r+0x5c>
 800aa80:	2a25      	cmp	r2, #37	; 0x25
 800aa82:	d1f9      	bne.n	800aa78 <_svfiprintf_r+0x50>
 800aa84:	ebba 0b04 	subs.w	fp, sl, r4
 800aa88:	d00b      	beq.n	800aaa2 <_svfiprintf_r+0x7a>
 800aa8a:	465b      	mov	r3, fp
 800aa8c:	4622      	mov	r2, r4
 800aa8e:	4629      	mov	r1, r5
 800aa90:	4638      	mov	r0, r7
 800aa92:	f7ff ff6d 	bl	800a970 <__ssputs_r>
 800aa96:	3001      	adds	r0, #1
 800aa98:	f000 80aa 	beq.w	800abf0 <_svfiprintf_r+0x1c8>
 800aa9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa9e:	445a      	add	r2, fp
 800aaa0:	9209      	str	r2, [sp, #36]	; 0x24
 800aaa2:	f89a 3000 	ldrb.w	r3, [sl]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	f000 80a2 	beq.w	800abf0 <_svfiprintf_r+0x1c8>
 800aaac:	2300      	movs	r3, #0
 800aaae:	f04f 32ff 	mov.w	r2, #4294967295
 800aab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aab6:	f10a 0a01 	add.w	sl, sl, #1
 800aaba:	9304      	str	r3, [sp, #16]
 800aabc:	9307      	str	r3, [sp, #28]
 800aabe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aac2:	931a      	str	r3, [sp, #104]	; 0x68
 800aac4:	4654      	mov	r4, sl
 800aac6:	2205      	movs	r2, #5
 800aac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aacc:	4851      	ldr	r0, [pc, #324]	; (800ac14 <_svfiprintf_r+0x1ec>)
 800aace:	f7f5 fba7 	bl	8000220 <memchr>
 800aad2:	9a04      	ldr	r2, [sp, #16]
 800aad4:	b9d8      	cbnz	r0, 800ab0e <_svfiprintf_r+0xe6>
 800aad6:	06d0      	lsls	r0, r2, #27
 800aad8:	bf44      	itt	mi
 800aada:	2320      	movmi	r3, #32
 800aadc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aae0:	0711      	lsls	r1, r2, #28
 800aae2:	bf44      	itt	mi
 800aae4:	232b      	movmi	r3, #43	; 0x2b
 800aae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaea:	f89a 3000 	ldrb.w	r3, [sl]
 800aaee:	2b2a      	cmp	r3, #42	; 0x2a
 800aaf0:	d015      	beq.n	800ab1e <_svfiprintf_r+0xf6>
 800aaf2:	9a07      	ldr	r2, [sp, #28]
 800aaf4:	4654      	mov	r4, sl
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	f04f 0c0a 	mov.w	ip, #10
 800aafc:	4621      	mov	r1, r4
 800aafe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab02:	3b30      	subs	r3, #48	; 0x30
 800ab04:	2b09      	cmp	r3, #9
 800ab06:	d94e      	bls.n	800aba6 <_svfiprintf_r+0x17e>
 800ab08:	b1b0      	cbz	r0, 800ab38 <_svfiprintf_r+0x110>
 800ab0a:	9207      	str	r2, [sp, #28]
 800ab0c:	e014      	b.n	800ab38 <_svfiprintf_r+0x110>
 800ab0e:	eba0 0308 	sub.w	r3, r0, r8
 800ab12:	fa09 f303 	lsl.w	r3, r9, r3
 800ab16:	4313      	orrs	r3, r2
 800ab18:	9304      	str	r3, [sp, #16]
 800ab1a:	46a2      	mov	sl, r4
 800ab1c:	e7d2      	b.n	800aac4 <_svfiprintf_r+0x9c>
 800ab1e:	9b03      	ldr	r3, [sp, #12]
 800ab20:	1d19      	adds	r1, r3, #4
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	9103      	str	r1, [sp, #12]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	bfbb      	ittet	lt
 800ab2a:	425b      	neglt	r3, r3
 800ab2c:	f042 0202 	orrlt.w	r2, r2, #2
 800ab30:	9307      	strge	r3, [sp, #28]
 800ab32:	9307      	strlt	r3, [sp, #28]
 800ab34:	bfb8      	it	lt
 800ab36:	9204      	strlt	r2, [sp, #16]
 800ab38:	7823      	ldrb	r3, [r4, #0]
 800ab3a:	2b2e      	cmp	r3, #46	; 0x2e
 800ab3c:	d10c      	bne.n	800ab58 <_svfiprintf_r+0x130>
 800ab3e:	7863      	ldrb	r3, [r4, #1]
 800ab40:	2b2a      	cmp	r3, #42	; 0x2a
 800ab42:	d135      	bne.n	800abb0 <_svfiprintf_r+0x188>
 800ab44:	9b03      	ldr	r3, [sp, #12]
 800ab46:	1d1a      	adds	r2, r3, #4
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	9203      	str	r2, [sp, #12]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	bfb8      	it	lt
 800ab50:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab54:	3402      	adds	r4, #2
 800ab56:	9305      	str	r3, [sp, #20]
 800ab58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac24 <_svfiprintf_r+0x1fc>
 800ab5c:	7821      	ldrb	r1, [r4, #0]
 800ab5e:	2203      	movs	r2, #3
 800ab60:	4650      	mov	r0, sl
 800ab62:	f7f5 fb5d 	bl	8000220 <memchr>
 800ab66:	b140      	cbz	r0, 800ab7a <_svfiprintf_r+0x152>
 800ab68:	2340      	movs	r3, #64	; 0x40
 800ab6a:	eba0 000a 	sub.w	r0, r0, sl
 800ab6e:	fa03 f000 	lsl.w	r0, r3, r0
 800ab72:	9b04      	ldr	r3, [sp, #16]
 800ab74:	4303      	orrs	r3, r0
 800ab76:	3401      	adds	r4, #1
 800ab78:	9304      	str	r3, [sp, #16]
 800ab7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab7e:	4826      	ldr	r0, [pc, #152]	; (800ac18 <_svfiprintf_r+0x1f0>)
 800ab80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab84:	2206      	movs	r2, #6
 800ab86:	f7f5 fb4b 	bl	8000220 <memchr>
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	d038      	beq.n	800ac00 <_svfiprintf_r+0x1d8>
 800ab8e:	4b23      	ldr	r3, [pc, #140]	; (800ac1c <_svfiprintf_r+0x1f4>)
 800ab90:	bb1b      	cbnz	r3, 800abda <_svfiprintf_r+0x1b2>
 800ab92:	9b03      	ldr	r3, [sp, #12]
 800ab94:	3307      	adds	r3, #7
 800ab96:	f023 0307 	bic.w	r3, r3, #7
 800ab9a:	3308      	adds	r3, #8
 800ab9c:	9303      	str	r3, [sp, #12]
 800ab9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aba0:	4433      	add	r3, r6
 800aba2:	9309      	str	r3, [sp, #36]	; 0x24
 800aba4:	e767      	b.n	800aa76 <_svfiprintf_r+0x4e>
 800aba6:	fb0c 3202 	mla	r2, ip, r2, r3
 800abaa:	460c      	mov	r4, r1
 800abac:	2001      	movs	r0, #1
 800abae:	e7a5      	b.n	800aafc <_svfiprintf_r+0xd4>
 800abb0:	2300      	movs	r3, #0
 800abb2:	3401      	adds	r4, #1
 800abb4:	9305      	str	r3, [sp, #20]
 800abb6:	4619      	mov	r1, r3
 800abb8:	f04f 0c0a 	mov.w	ip, #10
 800abbc:	4620      	mov	r0, r4
 800abbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abc2:	3a30      	subs	r2, #48	; 0x30
 800abc4:	2a09      	cmp	r2, #9
 800abc6:	d903      	bls.n	800abd0 <_svfiprintf_r+0x1a8>
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d0c5      	beq.n	800ab58 <_svfiprintf_r+0x130>
 800abcc:	9105      	str	r1, [sp, #20]
 800abce:	e7c3      	b.n	800ab58 <_svfiprintf_r+0x130>
 800abd0:	fb0c 2101 	mla	r1, ip, r1, r2
 800abd4:	4604      	mov	r4, r0
 800abd6:	2301      	movs	r3, #1
 800abd8:	e7f0      	b.n	800abbc <_svfiprintf_r+0x194>
 800abda:	ab03      	add	r3, sp, #12
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	462a      	mov	r2, r5
 800abe0:	4b0f      	ldr	r3, [pc, #60]	; (800ac20 <_svfiprintf_r+0x1f8>)
 800abe2:	a904      	add	r1, sp, #16
 800abe4:	4638      	mov	r0, r7
 800abe6:	f3af 8000 	nop.w
 800abea:	1c42      	adds	r2, r0, #1
 800abec:	4606      	mov	r6, r0
 800abee:	d1d6      	bne.n	800ab9e <_svfiprintf_r+0x176>
 800abf0:	89ab      	ldrh	r3, [r5, #12]
 800abf2:	065b      	lsls	r3, r3, #25
 800abf4:	f53f af2c 	bmi.w	800aa50 <_svfiprintf_r+0x28>
 800abf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abfa:	b01d      	add	sp, #116	; 0x74
 800abfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac00:	ab03      	add	r3, sp, #12
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	462a      	mov	r2, r5
 800ac06:	4b06      	ldr	r3, [pc, #24]	; (800ac20 <_svfiprintf_r+0x1f8>)
 800ac08:	a904      	add	r1, sp, #16
 800ac0a:	4638      	mov	r0, r7
 800ac0c:	f000 f87a 	bl	800ad04 <_printf_i>
 800ac10:	e7eb      	b.n	800abea <_svfiprintf_r+0x1c2>
 800ac12:	bf00      	nop
 800ac14:	0800c788 	.word	0x0800c788
 800ac18:	0800c792 	.word	0x0800c792
 800ac1c:	00000000 	.word	0x00000000
 800ac20:	0800a971 	.word	0x0800a971
 800ac24:	0800c78e 	.word	0x0800c78e

0800ac28 <_printf_common>:
 800ac28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac2c:	4616      	mov	r6, r2
 800ac2e:	4699      	mov	r9, r3
 800ac30:	688a      	ldr	r2, [r1, #8]
 800ac32:	690b      	ldr	r3, [r1, #16]
 800ac34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	bfb8      	it	lt
 800ac3c:	4613      	movlt	r3, r2
 800ac3e:	6033      	str	r3, [r6, #0]
 800ac40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac44:	4607      	mov	r7, r0
 800ac46:	460c      	mov	r4, r1
 800ac48:	b10a      	cbz	r2, 800ac4e <_printf_common+0x26>
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	6033      	str	r3, [r6, #0]
 800ac4e:	6823      	ldr	r3, [r4, #0]
 800ac50:	0699      	lsls	r1, r3, #26
 800ac52:	bf42      	ittt	mi
 800ac54:	6833      	ldrmi	r3, [r6, #0]
 800ac56:	3302      	addmi	r3, #2
 800ac58:	6033      	strmi	r3, [r6, #0]
 800ac5a:	6825      	ldr	r5, [r4, #0]
 800ac5c:	f015 0506 	ands.w	r5, r5, #6
 800ac60:	d106      	bne.n	800ac70 <_printf_common+0x48>
 800ac62:	f104 0a19 	add.w	sl, r4, #25
 800ac66:	68e3      	ldr	r3, [r4, #12]
 800ac68:	6832      	ldr	r2, [r6, #0]
 800ac6a:	1a9b      	subs	r3, r3, r2
 800ac6c:	42ab      	cmp	r3, r5
 800ac6e:	dc26      	bgt.n	800acbe <_printf_common+0x96>
 800ac70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac74:	1e13      	subs	r3, r2, #0
 800ac76:	6822      	ldr	r2, [r4, #0]
 800ac78:	bf18      	it	ne
 800ac7a:	2301      	movne	r3, #1
 800ac7c:	0692      	lsls	r2, r2, #26
 800ac7e:	d42b      	bmi.n	800acd8 <_printf_common+0xb0>
 800ac80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac84:	4649      	mov	r1, r9
 800ac86:	4638      	mov	r0, r7
 800ac88:	47c0      	blx	r8
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	d01e      	beq.n	800accc <_printf_common+0xa4>
 800ac8e:	6823      	ldr	r3, [r4, #0]
 800ac90:	68e5      	ldr	r5, [r4, #12]
 800ac92:	6832      	ldr	r2, [r6, #0]
 800ac94:	f003 0306 	and.w	r3, r3, #6
 800ac98:	2b04      	cmp	r3, #4
 800ac9a:	bf08      	it	eq
 800ac9c:	1aad      	subeq	r5, r5, r2
 800ac9e:	68a3      	ldr	r3, [r4, #8]
 800aca0:	6922      	ldr	r2, [r4, #16]
 800aca2:	bf0c      	ite	eq
 800aca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aca8:	2500      	movne	r5, #0
 800acaa:	4293      	cmp	r3, r2
 800acac:	bfc4      	itt	gt
 800acae:	1a9b      	subgt	r3, r3, r2
 800acb0:	18ed      	addgt	r5, r5, r3
 800acb2:	2600      	movs	r6, #0
 800acb4:	341a      	adds	r4, #26
 800acb6:	42b5      	cmp	r5, r6
 800acb8:	d11a      	bne.n	800acf0 <_printf_common+0xc8>
 800acba:	2000      	movs	r0, #0
 800acbc:	e008      	b.n	800acd0 <_printf_common+0xa8>
 800acbe:	2301      	movs	r3, #1
 800acc0:	4652      	mov	r2, sl
 800acc2:	4649      	mov	r1, r9
 800acc4:	4638      	mov	r0, r7
 800acc6:	47c0      	blx	r8
 800acc8:	3001      	adds	r0, #1
 800acca:	d103      	bne.n	800acd4 <_printf_common+0xac>
 800accc:	f04f 30ff 	mov.w	r0, #4294967295
 800acd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acd4:	3501      	adds	r5, #1
 800acd6:	e7c6      	b.n	800ac66 <_printf_common+0x3e>
 800acd8:	18e1      	adds	r1, r4, r3
 800acda:	1c5a      	adds	r2, r3, #1
 800acdc:	2030      	movs	r0, #48	; 0x30
 800acde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ace2:	4422      	add	r2, r4
 800ace4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ace8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acec:	3302      	adds	r3, #2
 800acee:	e7c7      	b.n	800ac80 <_printf_common+0x58>
 800acf0:	2301      	movs	r3, #1
 800acf2:	4622      	mov	r2, r4
 800acf4:	4649      	mov	r1, r9
 800acf6:	4638      	mov	r0, r7
 800acf8:	47c0      	blx	r8
 800acfa:	3001      	adds	r0, #1
 800acfc:	d0e6      	beq.n	800accc <_printf_common+0xa4>
 800acfe:	3601      	adds	r6, #1
 800ad00:	e7d9      	b.n	800acb6 <_printf_common+0x8e>
	...

0800ad04 <_printf_i>:
 800ad04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad08:	460c      	mov	r4, r1
 800ad0a:	4691      	mov	r9, r2
 800ad0c:	7e27      	ldrb	r7, [r4, #24]
 800ad0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ad10:	2f78      	cmp	r7, #120	; 0x78
 800ad12:	4680      	mov	r8, r0
 800ad14:	469a      	mov	sl, r3
 800ad16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad1a:	d807      	bhi.n	800ad2c <_printf_i+0x28>
 800ad1c:	2f62      	cmp	r7, #98	; 0x62
 800ad1e:	d80a      	bhi.n	800ad36 <_printf_i+0x32>
 800ad20:	2f00      	cmp	r7, #0
 800ad22:	f000 80d8 	beq.w	800aed6 <_printf_i+0x1d2>
 800ad26:	2f58      	cmp	r7, #88	; 0x58
 800ad28:	f000 80a3 	beq.w	800ae72 <_printf_i+0x16e>
 800ad2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ad30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad34:	e03a      	b.n	800adac <_printf_i+0xa8>
 800ad36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad3a:	2b15      	cmp	r3, #21
 800ad3c:	d8f6      	bhi.n	800ad2c <_printf_i+0x28>
 800ad3e:	a001      	add	r0, pc, #4	; (adr r0, 800ad44 <_printf_i+0x40>)
 800ad40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ad44:	0800ad9d 	.word	0x0800ad9d
 800ad48:	0800adb1 	.word	0x0800adb1
 800ad4c:	0800ad2d 	.word	0x0800ad2d
 800ad50:	0800ad2d 	.word	0x0800ad2d
 800ad54:	0800ad2d 	.word	0x0800ad2d
 800ad58:	0800ad2d 	.word	0x0800ad2d
 800ad5c:	0800adb1 	.word	0x0800adb1
 800ad60:	0800ad2d 	.word	0x0800ad2d
 800ad64:	0800ad2d 	.word	0x0800ad2d
 800ad68:	0800ad2d 	.word	0x0800ad2d
 800ad6c:	0800ad2d 	.word	0x0800ad2d
 800ad70:	0800aebd 	.word	0x0800aebd
 800ad74:	0800ade1 	.word	0x0800ade1
 800ad78:	0800ae9f 	.word	0x0800ae9f
 800ad7c:	0800ad2d 	.word	0x0800ad2d
 800ad80:	0800ad2d 	.word	0x0800ad2d
 800ad84:	0800aedf 	.word	0x0800aedf
 800ad88:	0800ad2d 	.word	0x0800ad2d
 800ad8c:	0800ade1 	.word	0x0800ade1
 800ad90:	0800ad2d 	.word	0x0800ad2d
 800ad94:	0800ad2d 	.word	0x0800ad2d
 800ad98:	0800aea7 	.word	0x0800aea7
 800ad9c:	680b      	ldr	r3, [r1, #0]
 800ad9e:	1d1a      	adds	r2, r3, #4
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	600a      	str	r2, [r1, #0]
 800ada4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ada8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adac:	2301      	movs	r3, #1
 800adae:	e0a3      	b.n	800aef8 <_printf_i+0x1f4>
 800adb0:	6825      	ldr	r5, [r4, #0]
 800adb2:	6808      	ldr	r0, [r1, #0]
 800adb4:	062e      	lsls	r6, r5, #24
 800adb6:	f100 0304 	add.w	r3, r0, #4
 800adba:	d50a      	bpl.n	800add2 <_printf_i+0xce>
 800adbc:	6805      	ldr	r5, [r0, #0]
 800adbe:	600b      	str	r3, [r1, #0]
 800adc0:	2d00      	cmp	r5, #0
 800adc2:	da03      	bge.n	800adcc <_printf_i+0xc8>
 800adc4:	232d      	movs	r3, #45	; 0x2d
 800adc6:	426d      	negs	r5, r5
 800adc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adcc:	485e      	ldr	r0, [pc, #376]	; (800af48 <_printf_i+0x244>)
 800adce:	230a      	movs	r3, #10
 800add0:	e019      	b.n	800ae06 <_printf_i+0x102>
 800add2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800add6:	6805      	ldr	r5, [r0, #0]
 800add8:	600b      	str	r3, [r1, #0]
 800adda:	bf18      	it	ne
 800addc:	b22d      	sxthne	r5, r5
 800adde:	e7ef      	b.n	800adc0 <_printf_i+0xbc>
 800ade0:	680b      	ldr	r3, [r1, #0]
 800ade2:	6825      	ldr	r5, [r4, #0]
 800ade4:	1d18      	adds	r0, r3, #4
 800ade6:	6008      	str	r0, [r1, #0]
 800ade8:	0628      	lsls	r0, r5, #24
 800adea:	d501      	bpl.n	800adf0 <_printf_i+0xec>
 800adec:	681d      	ldr	r5, [r3, #0]
 800adee:	e002      	b.n	800adf6 <_printf_i+0xf2>
 800adf0:	0669      	lsls	r1, r5, #25
 800adf2:	d5fb      	bpl.n	800adec <_printf_i+0xe8>
 800adf4:	881d      	ldrh	r5, [r3, #0]
 800adf6:	4854      	ldr	r0, [pc, #336]	; (800af48 <_printf_i+0x244>)
 800adf8:	2f6f      	cmp	r7, #111	; 0x6f
 800adfa:	bf0c      	ite	eq
 800adfc:	2308      	moveq	r3, #8
 800adfe:	230a      	movne	r3, #10
 800ae00:	2100      	movs	r1, #0
 800ae02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae06:	6866      	ldr	r6, [r4, #4]
 800ae08:	60a6      	str	r6, [r4, #8]
 800ae0a:	2e00      	cmp	r6, #0
 800ae0c:	bfa2      	ittt	ge
 800ae0e:	6821      	ldrge	r1, [r4, #0]
 800ae10:	f021 0104 	bicge.w	r1, r1, #4
 800ae14:	6021      	strge	r1, [r4, #0]
 800ae16:	b90d      	cbnz	r5, 800ae1c <_printf_i+0x118>
 800ae18:	2e00      	cmp	r6, #0
 800ae1a:	d04d      	beq.n	800aeb8 <_printf_i+0x1b4>
 800ae1c:	4616      	mov	r6, r2
 800ae1e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae22:	fb03 5711 	mls	r7, r3, r1, r5
 800ae26:	5dc7      	ldrb	r7, [r0, r7]
 800ae28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae2c:	462f      	mov	r7, r5
 800ae2e:	42bb      	cmp	r3, r7
 800ae30:	460d      	mov	r5, r1
 800ae32:	d9f4      	bls.n	800ae1e <_printf_i+0x11a>
 800ae34:	2b08      	cmp	r3, #8
 800ae36:	d10b      	bne.n	800ae50 <_printf_i+0x14c>
 800ae38:	6823      	ldr	r3, [r4, #0]
 800ae3a:	07df      	lsls	r7, r3, #31
 800ae3c:	d508      	bpl.n	800ae50 <_printf_i+0x14c>
 800ae3e:	6923      	ldr	r3, [r4, #16]
 800ae40:	6861      	ldr	r1, [r4, #4]
 800ae42:	4299      	cmp	r1, r3
 800ae44:	bfde      	ittt	le
 800ae46:	2330      	movle	r3, #48	; 0x30
 800ae48:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae50:	1b92      	subs	r2, r2, r6
 800ae52:	6122      	str	r2, [r4, #16]
 800ae54:	f8cd a000 	str.w	sl, [sp]
 800ae58:	464b      	mov	r3, r9
 800ae5a:	aa03      	add	r2, sp, #12
 800ae5c:	4621      	mov	r1, r4
 800ae5e:	4640      	mov	r0, r8
 800ae60:	f7ff fee2 	bl	800ac28 <_printf_common>
 800ae64:	3001      	adds	r0, #1
 800ae66:	d14c      	bne.n	800af02 <_printf_i+0x1fe>
 800ae68:	f04f 30ff 	mov.w	r0, #4294967295
 800ae6c:	b004      	add	sp, #16
 800ae6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae72:	4835      	ldr	r0, [pc, #212]	; (800af48 <_printf_i+0x244>)
 800ae74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ae78:	6823      	ldr	r3, [r4, #0]
 800ae7a:	680e      	ldr	r6, [r1, #0]
 800ae7c:	061f      	lsls	r7, r3, #24
 800ae7e:	f856 5b04 	ldr.w	r5, [r6], #4
 800ae82:	600e      	str	r6, [r1, #0]
 800ae84:	d514      	bpl.n	800aeb0 <_printf_i+0x1ac>
 800ae86:	07d9      	lsls	r1, r3, #31
 800ae88:	bf44      	itt	mi
 800ae8a:	f043 0320 	orrmi.w	r3, r3, #32
 800ae8e:	6023      	strmi	r3, [r4, #0]
 800ae90:	b91d      	cbnz	r5, 800ae9a <_printf_i+0x196>
 800ae92:	6823      	ldr	r3, [r4, #0]
 800ae94:	f023 0320 	bic.w	r3, r3, #32
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	2310      	movs	r3, #16
 800ae9c:	e7b0      	b.n	800ae00 <_printf_i+0xfc>
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	f043 0320 	orr.w	r3, r3, #32
 800aea4:	6023      	str	r3, [r4, #0]
 800aea6:	2378      	movs	r3, #120	; 0x78
 800aea8:	4828      	ldr	r0, [pc, #160]	; (800af4c <_printf_i+0x248>)
 800aeaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aeae:	e7e3      	b.n	800ae78 <_printf_i+0x174>
 800aeb0:	065e      	lsls	r6, r3, #25
 800aeb2:	bf48      	it	mi
 800aeb4:	b2ad      	uxthmi	r5, r5
 800aeb6:	e7e6      	b.n	800ae86 <_printf_i+0x182>
 800aeb8:	4616      	mov	r6, r2
 800aeba:	e7bb      	b.n	800ae34 <_printf_i+0x130>
 800aebc:	680b      	ldr	r3, [r1, #0]
 800aebe:	6826      	ldr	r6, [r4, #0]
 800aec0:	6960      	ldr	r0, [r4, #20]
 800aec2:	1d1d      	adds	r5, r3, #4
 800aec4:	600d      	str	r5, [r1, #0]
 800aec6:	0635      	lsls	r5, r6, #24
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	d501      	bpl.n	800aed0 <_printf_i+0x1cc>
 800aecc:	6018      	str	r0, [r3, #0]
 800aece:	e002      	b.n	800aed6 <_printf_i+0x1d2>
 800aed0:	0671      	lsls	r1, r6, #25
 800aed2:	d5fb      	bpl.n	800aecc <_printf_i+0x1c8>
 800aed4:	8018      	strh	r0, [r3, #0]
 800aed6:	2300      	movs	r3, #0
 800aed8:	6123      	str	r3, [r4, #16]
 800aeda:	4616      	mov	r6, r2
 800aedc:	e7ba      	b.n	800ae54 <_printf_i+0x150>
 800aede:	680b      	ldr	r3, [r1, #0]
 800aee0:	1d1a      	adds	r2, r3, #4
 800aee2:	600a      	str	r2, [r1, #0]
 800aee4:	681e      	ldr	r6, [r3, #0]
 800aee6:	6862      	ldr	r2, [r4, #4]
 800aee8:	2100      	movs	r1, #0
 800aeea:	4630      	mov	r0, r6
 800aeec:	f7f5 f998 	bl	8000220 <memchr>
 800aef0:	b108      	cbz	r0, 800aef6 <_printf_i+0x1f2>
 800aef2:	1b80      	subs	r0, r0, r6
 800aef4:	6060      	str	r0, [r4, #4]
 800aef6:	6863      	ldr	r3, [r4, #4]
 800aef8:	6123      	str	r3, [r4, #16]
 800aefa:	2300      	movs	r3, #0
 800aefc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af00:	e7a8      	b.n	800ae54 <_printf_i+0x150>
 800af02:	6923      	ldr	r3, [r4, #16]
 800af04:	4632      	mov	r2, r6
 800af06:	4649      	mov	r1, r9
 800af08:	4640      	mov	r0, r8
 800af0a:	47d0      	blx	sl
 800af0c:	3001      	adds	r0, #1
 800af0e:	d0ab      	beq.n	800ae68 <_printf_i+0x164>
 800af10:	6823      	ldr	r3, [r4, #0]
 800af12:	079b      	lsls	r3, r3, #30
 800af14:	d413      	bmi.n	800af3e <_printf_i+0x23a>
 800af16:	68e0      	ldr	r0, [r4, #12]
 800af18:	9b03      	ldr	r3, [sp, #12]
 800af1a:	4298      	cmp	r0, r3
 800af1c:	bfb8      	it	lt
 800af1e:	4618      	movlt	r0, r3
 800af20:	e7a4      	b.n	800ae6c <_printf_i+0x168>
 800af22:	2301      	movs	r3, #1
 800af24:	4632      	mov	r2, r6
 800af26:	4649      	mov	r1, r9
 800af28:	4640      	mov	r0, r8
 800af2a:	47d0      	blx	sl
 800af2c:	3001      	adds	r0, #1
 800af2e:	d09b      	beq.n	800ae68 <_printf_i+0x164>
 800af30:	3501      	adds	r5, #1
 800af32:	68e3      	ldr	r3, [r4, #12]
 800af34:	9903      	ldr	r1, [sp, #12]
 800af36:	1a5b      	subs	r3, r3, r1
 800af38:	42ab      	cmp	r3, r5
 800af3a:	dcf2      	bgt.n	800af22 <_printf_i+0x21e>
 800af3c:	e7eb      	b.n	800af16 <_printf_i+0x212>
 800af3e:	2500      	movs	r5, #0
 800af40:	f104 0619 	add.w	r6, r4, #25
 800af44:	e7f5      	b.n	800af32 <_printf_i+0x22e>
 800af46:	bf00      	nop
 800af48:	0800c799 	.word	0x0800c799
 800af4c:	0800c7aa 	.word	0x0800c7aa

0800af50 <_free_r>:
 800af50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af52:	2900      	cmp	r1, #0
 800af54:	d048      	beq.n	800afe8 <_free_r+0x98>
 800af56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af5a:	9001      	str	r0, [sp, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	f1a1 0404 	sub.w	r4, r1, #4
 800af62:	bfb8      	it	lt
 800af64:	18e4      	addlt	r4, r4, r3
 800af66:	f000 f8d3 	bl	800b110 <__malloc_lock>
 800af6a:	4a20      	ldr	r2, [pc, #128]	; (800afec <_free_r+0x9c>)
 800af6c:	9801      	ldr	r0, [sp, #4]
 800af6e:	6813      	ldr	r3, [r2, #0]
 800af70:	4615      	mov	r5, r2
 800af72:	b933      	cbnz	r3, 800af82 <_free_r+0x32>
 800af74:	6063      	str	r3, [r4, #4]
 800af76:	6014      	str	r4, [r2, #0]
 800af78:	b003      	add	sp, #12
 800af7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af7e:	f000 b8cd 	b.w	800b11c <__malloc_unlock>
 800af82:	42a3      	cmp	r3, r4
 800af84:	d90b      	bls.n	800af9e <_free_r+0x4e>
 800af86:	6821      	ldr	r1, [r4, #0]
 800af88:	1862      	adds	r2, r4, r1
 800af8a:	4293      	cmp	r3, r2
 800af8c:	bf04      	itt	eq
 800af8e:	681a      	ldreq	r2, [r3, #0]
 800af90:	685b      	ldreq	r3, [r3, #4]
 800af92:	6063      	str	r3, [r4, #4]
 800af94:	bf04      	itt	eq
 800af96:	1852      	addeq	r2, r2, r1
 800af98:	6022      	streq	r2, [r4, #0]
 800af9a:	602c      	str	r4, [r5, #0]
 800af9c:	e7ec      	b.n	800af78 <_free_r+0x28>
 800af9e:	461a      	mov	r2, r3
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	b10b      	cbz	r3, 800afa8 <_free_r+0x58>
 800afa4:	42a3      	cmp	r3, r4
 800afa6:	d9fa      	bls.n	800af9e <_free_r+0x4e>
 800afa8:	6811      	ldr	r1, [r2, #0]
 800afaa:	1855      	adds	r5, r2, r1
 800afac:	42a5      	cmp	r5, r4
 800afae:	d10b      	bne.n	800afc8 <_free_r+0x78>
 800afb0:	6824      	ldr	r4, [r4, #0]
 800afb2:	4421      	add	r1, r4
 800afb4:	1854      	adds	r4, r2, r1
 800afb6:	42a3      	cmp	r3, r4
 800afb8:	6011      	str	r1, [r2, #0]
 800afba:	d1dd      	bne.n	800af78 <_free_r+0x28>
 800afbc:	681c      	ldr	r4, [r3, #0]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	6053      	str	r3, [r2, #4]
 800afc2:	4421      	add	r1, r4
 800afc4:	6011      	str	r1, [r2, #0]
 800afc6:	e7d7      	b.n	800af78 <_free_r+0x28>
 800afc8:	d902      	bls.n	800afd0 <_free_r+0x80>
 800afca:	230c      	movs	r3, #12
 800afcc:	6003      	str	r3, [r0, #0]
 800afce:	e7d3      	b.n	800af78 <_free_r+0x28>
 800afd0:	6825      	ldr	r5, [r4, #0]
 800afd2:	1961      	adds	r1, r4, r5
 800afd4:	428b      	cmp	r3, r1
 800afd6:	bf04      	itt	eq
 800afd8:	6819      	ldreq	r1, [r3, #0]
 800afda:	685b      	ldreq	r3, [r3, #4]
 800afdc:	6063      	str	r3, [r4, #4]
 800afde:	bf04      	itt	eq
 800afe0:	1949      	addeq	r1, r1, r5
 800afe2:	6021      	streq	r1, [r4, #0]
 800afe4:	6054      	str	r4, [r2, #4]
 800afe6:	e7c7      	b.n	800af78 <_free_r+0x28>
 800afe8:	b003      	add	sp, #12
 800afea:	bd30      	pop	{r4, r5, pc}
 800afec:	20001e5c 	.word	0x20001e5c

0800aff0 <_malloc_r>:
 800aff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff2:	1ccd      	adds	r5, r1, #3
 800aff4:	f025 0503 	bic.w	r5, r5, #3
 800aff8:	3508      	adds	r5, #8
 800affa:	2d0c      	cmp	r5, #12
 800affc:	bf38      	it	cc
 800affe:	250c      	movcc	r5, #12
 800b000:	2d00      	cmp	r5, #0
 800b002:	4606      	mov	r6, r0
 800b004:	db01      	blt.n	800b00a <_malloc_r+0x1a>
 800b006:	42a9      	cmp	r1, r5
 800b008:	d903      	bls.n	800b012 <_malloc_r+0x22>
 800b00a:	230c      	movs	r3, #12
 800b00c:	6033      	str	r3, [r6, #0]
 800b00e:	2000      	movs	r0, #0
 800b010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b012:	f000 f87d 	bl	800b110 <__malloc_lock>
 800b016:	4921      	ldr	r1, [pc, #132]	; (800b09c <_malloc_r+0xac>)
 800b018:	680a      	ldr	r2, [r1, #0]
 800b01a:	4614      	mov	r4, r2
 800b01c:	b99c      	cbnz	r4, 800b046 <_malloc_r+0x56>
 800b01e:	4f20      	ldr	r7, [pc, #128]	; (800b0a0 <_malloc_r+0xb0>)
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	b923      	cbnz	r3, 800b02e <_malloc_r+0x3e>
 800b024:	4621      	mov	r1, r4
 800b026:	4630      	mov	r0, r6
 800b028:	f000 f862 	bl	800b0f0 <_sbrk_r>
 800b02c:	6038      	str	r0, [r7, #0]
 800b02e:	4629      	mov	r1, r5
 800b030:	4630      	mov	r0, r6
 800b032:	f000 f85d 	bl	800b0f0 <_sbrk_r>
 800b036:	1c43      	adds	r3, r0, #1
 800b038:	d123      	bne.n	800b082 <_malloc_r+0x92>
 800b03a:	230c      	movs	r3, #12
 800b03c:	6033      	str	r3, [r6, #0]
 800b03e:	4630      	mov	r0, r6
 800b040:	f000 f86c 	bl	800b11c <__malloc_unlock>
 800b044:	e7e3      	b.n	800b00e <_malloc_r+0x1e>
 800b046:	6823      	ldr	r3, [r4, #0]
 800b048:	1b5b      	subs	r3, r3, r5
 800b04a:	d417      	bmi.n	800b07c <_malloc_r+0x8c>
 800b04c:	2b0b      	cmp	r3, #11
 800b04e:	d903      	bls.n	800b058 <_malloc_r+0x68>
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	441c      	add	r4, r3
 800b054:	6025      	str	r5, [r4, #0]
 800b056:	e004      	b.n	800b062 <_malloc_r+0x72>
 800b058:	6863      	ldr	r3, [r4, #4]
 800b05a:	42a2      	cmp	r2, r4
 800b05c:	bf0c      	ite	eq
 800b05e:	600b      	streq	r3, [r1, #0]
 800b060:	6053      	strne	r3, [r2, #4]
 800b062:	4630      	mov	r0, r6
 800b064:	f000 f85a 	bl	800b11c <__malloc_unlock>
 800b068:	f104 000b 	add.w	r0, r4, #11
 800b06c:	1d23      	adds	r3, r4, #4
 800b06e:	f020 0007 	bic.w	r0, r0, #7
 800b072:	1ac2      	subs	r2, r0, r3
 800b074:	d0cc      	beq.n	800b010 <_malloc_r+0x20>
 800b076:	1a1b      	subs	r3, r3, r0
 800b078:	50a3      	str	r3, [r4, r2]
 800b07a:	e7c9      	b.n	800b010 <_malloc_r+0x20>
 800b07c:	4622      	mov	r2, r4
 800b07e:	6864      	ldr	r4, [r4, #4]
 800b080:	e7cc      	b.n	800b01c <_malloc_r+0x2c>
 800b082:	1cc4      	adds	r4, r0, #3
 800b084:	f024 0403 	bic.w	r4, r4, #3
 800b088:	42a0      	cmp	r0, r4
 800b08a:	d0e3      	beq.n	800b054 <_malloc_r+0x64>
 800b08c:	1a21      	subs	r1, r4, r0
 800b08e:	4630      	mov	r0, r6
 800b090:	f000 f82e 	bl	800b0f0 <_sbrk_r>
 800b094:	3001      	adds	r0, #1
 800b096:	d1dd      	bne.n	800b054 <_malloc_r+0x64>
 800b098:	e7cf      	b.n	800b03a <_malloc_r+0x4a>
 800b09a:	bf00      	nop
 800b09c:	20001e5c 	.word	0x20001e5c
 800b0a0:	20001e60 	.word	0x20001e60

0800b0a4 <_realloc_r>:
 800b0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a6:	4607      	mov	r7, r0
 800b0a8:	4614      	mov	r4, r2
 800b0aa:	460e      	mov	r6, r1
 800b0ac:	b921      	cbnz	r1, 800b0b8 <_realloc_r+0x14>
 800b0ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b0b2:	4611      	mov	r1, r2
 800b0b4:	f7ff bf9c 	b.w	800aff0 <_malloc_r>
 800b0b8:	b922      	cbnz	r2, 800b0c4 <_realloc_r+0x20>
 800b0ba:	f7ff ff49 	bl	800af50 <_free_r>
 800b0be:	4625      	mov	r5, r4
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0c4:	f000 f830 	bl	800b128 <_malloc_usable_size_r>
 800b0c8:	42a0      	cmp	r0, r4
 800b0ca:	d20f      	bcs.n	800b0ec <_realloc_r+0x48>
 800b0cc:	4621      	mov	r1, r4
 800b0ce:	4638      	mov	r0, r7
 800b0d0:	f7ff ff8e 	bl	800aff0 <_malloc_r>
 800b0d4:	4605      	mov	r5, r0
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	d0f2      	beq.n	800b0c0 <_realloc_r+0x1c>
 800b0da:	4631      	mov	r1, r6
 800b0dc:	4622      	mov	r2, r4
 800b0de:	f7ff fbef 	bl	800a8c0 <memcpy>
 800b0e2:	4631      	mov	r1, r6
 800b0e4:	4638      	mov	r0, r7
 800b0e6:	f7ff ff33 	bl	800af50 <_free_r>
 800b0ea:	e7e9      	b.n	800b0c0 <_realloc_r+0x1c>
 800b0ec:	4635      	mov	r5, r6
 800b0ee:	e7e7      	b.n	800b0c0 <_realloc_r+0x1c>

0800b0f0 <_sbrk_r>:
 800b0f0:	b538      	push	{r3, r4, r5, lr}
 800b0f2:	4d06      	ldr	r5, [pc, #24]	; (800b10c <_sbrk_r+0x1c>)
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	4608      	mov	r0, r1
 800b0fa:	602b      	str	r3, [r5, #0]
 800b0fc:	f7f6 f8b0 	bl	8001260 <_sbrk>
 800b100:	1c43      	adds	r3, r0, #1
 800b102:	d102      	bne.n	800b10a <_sbrk_r+0x1a>
 800b104:	682b      	ldr	r3, [r5, #0]
 800b106:	b103      	cbz	r3, 800b10a <_sbrk_r+0x1a>
 800b108:	6023      	str	r3, [r4, #0]
 800b10a:	bd38      	pop	{r3, r4, r5, pc}
 800b10c:	2000214c 	.word	0x2000214c

0800b110 <__malloc_lock>:
 800b110:	4801      	ldr	r0, [pc, #4]	; (800b118 <__malloc_lock+0x8>)
 800b112:	f000 b811 	b.w	800b138 <__retarget_lock_acquire_recursive>
 800b116:	bf00      	nop
 800b118:	20002154 	.word	0x20002154

0800b11c <__malloc_unlock>:
 800b11c:	4801      	ldr	r0, [pc, #4]	; (800b124 <__malloc_unlock+0x8>)
 800b11e:	f000 b80c 	b.w	800b13a <__retarget_lock_release_recursive>
 800b122:	bf00      	nop
 800b124:	20002154 	.word	0x20002154

0800b128 <_malloc_usable_size_r>:
 800b128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b12c:	1f18      	subs	r0, r3, #4
 800b12e:	2b00      	cmp	r3, #0
 800b130:	bfbc      	itt	lt
 800b132:	580b      	ldrlt	r3, [r1, r0]
 800b134:	18c0      	addlt	r0, r0, r3
 800b136:	4770      	bx	lr

0800b138 <__retarget_lock_acquire_recursive>:
 800b138:	4770      	bx	lr

0800b13a <__retarget_lock_release_recursive>:
 800b13a:	4770      	bx	lr

0800b13c <_init>:
 800b13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13e:	bf00      	nop
 800b140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b142:	bc08      	pop	{r3}
 800b144:	469e      	mov	lr, r3
 800b146:	4770      	bx	lr

0800b148 <_fini>:
 800b148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b14a:	bf00      	nop
 800b14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b14e:	bc08      	pop	{r3}
 800b150:	469e      	mov	lr, r3
 800b152:	4770      	bx	lr
