
projectEV-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afe4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001668  0800b1c4  0800b1c4  0001b1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c82c  0800c82c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c82c  0800c82c  0001c82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c834  0800c834  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c834  0800c834  0001c834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c838  0800c838  0001c838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800c83c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002134  200000a4  0800c8e0  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021d8  0800c8e0  000221d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036bd2  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b0a  00000000  00000000  00056ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002170  00000000  00000000  0005c7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f30  00000000  00000000  0005e920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fee4  00000000  00000000  00060850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029104  00000000  00000000  00090734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ebd8  00000000  00000000  000b9838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d8410  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009124  00000000  00000000  001d8464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000a4 	.word	0x200000a4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b1ac 	.word	0x0800b1ac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000a8 	.word	0x200000a8
 800021c:	0800b1ac 	.word	0x0800b1ac

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <ssd1306_Reset>:

#define SSD1306_MAX_DELAY 100

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af04      	add	r7, sp, #16
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, SSD1306_MAX_DELAY);
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	9302      	str	r3, [sp, #8]
 80005d6:	2301      	movs	r3, #1
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	1dfb      	adds	r3, r7, #7
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2301      	movs	r3, #1
 80005e0:	2200      	movs	r2, #0
 80005e2:	2178      	movs	r1, #120	; 0x78
 80005e4:	4803      	ldr	r0, [pc, #12]	; (80005f4 <ssd1306_WriteCommand+0x2c>)
 80005e6:	f003 fd59 	bl	800409c <HAL_I2C_Mem_Write>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20001fb0 	.word	0x20001fb0

080005f8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af04      	add	r7, sp, #16
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, SSD1306_MAX_DELAY);
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	b29b      	uxth	r3, r3
 8000606:	2264      	movs	r2, #100	; 0x64
 8000608:	9202      	str	r2, [sp, #8]
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	2240      	movs	r2, #64	; 0x40
 8000614:	2178      	movs	r1, #120	; 0x78
 8000616:	4803      	ldr	r0, [pc, #12]	; (8000624 <ssd1306_WriteData+0x2c>)
 8000618:	f003 fd40 	bl	800409c <HAL_I2C_Mem_Write>
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20001fb0 	.word	0x20001fb0

08000628 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800062c:	f7ff ffc4 	bl	80005b8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000630:	2064      	movs	r0, #100	; 0x64
 8000632:	f001 f9b9 	bl	80019a8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000636:	2000      	movs	r0, #0
 8000638:	f000 f9e6 	bl	8000a08 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800063c:	2020      	movs	r0, #32
 800063e:	f7ff ffc3 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff ffc0 	bl	80005c8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000648:	20b0      	movs	r0, #176	; 0xb0
 800064a:	f7ff ffbd 	bl	80005c8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800064e:	20c8      	movs	r0, #200	; 0xc8
 8000650:	f7ff ffba 	bl	80005c8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff ffb7 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800065a:	2010      	movs	r0, #16
 800065c:	f7ff ffb4 	bl	80005c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000660:	2040      	movs	r0, #64	; 0x40
 8000662:	f7ff ffb1 	bl	80005c8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000666:	20ff      	movs	r0, #255	; 0xff
 8000668:	f000 f9ba 	bl	80009e0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800066c:	20a1      	movs	r0, #161	; 0xa1
 800066e:	f7ff ffab 	bl	80005c8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000672:	20a6      	movs	r0, #166	; 0xa6
 8000674:	f7ff ffa8 	bl	80005c8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000678:	20a8      	movs	r0, #168	; 0xa8
 800067a:	f7ff ffa5 	bl	80005c8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800067e:	203f      	movs	r0, #63	; 0x3f
 8000680:	f7ff ffa2 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000684:	20a4      	movs	r0, #164	; 0xa4
 8000686:	f7ff ff9f 	bl	80005c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800068a:	20d3      	movs	r0, #211	; 0xd3
 800068c:	f7ff ff9c 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff ff99 	bl	80005c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000696:	20d5      	movs	r0, #213	; 0xd5
 8000698:	f7ff ff96 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800069c:	20f0      	movs	r0, #240	; 0xf0
 800069e:	f7ff ff93 	bl	80005c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80006a2:	20d9      	movs	r0, #217	; 0xd9
 80006a4:	f7ff ff90 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80006a8:	2022      	movs	r0, #34	; 0x22
 80006aa:	f7ff ff8d 	bl	80005c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80006ae:	20da      	movs	r0, #218	; 0xda
 80006b0:	f7ff ff8a 	bl	80005c8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80006b4:	2012      	movs	r0, #18
 80006b6:	f7ff ff87 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80006ba:	20db      	movs	r0, #219	; 0xdb
 80006bc:	f7ff ff84 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80006c0:	2020      	movs	r0, #32
 80006c2:	f7ff ff81 	bl	80005c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80006c6:	208d      	movs	r0, #141	; 0x8d
 80006c8:	f7ff ff7e 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80006cc:	2014      	movs	r0, #20
 80006ce:	f7ff ff7b 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80006d2:	2001      	movs	r0, #1
 80006d4:	f000 f998 	bl	8000a08 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 f80f 	bl	80006fc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80006de:	f000 f831 	bl	8000744 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <ssd1306_Init+0xd0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <ssd1306_Init+0xd0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80006ee:	4b02      	ldr	r3, [pc, #8]	; (80006f8 <ssd1306_Init+0xd0>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	715a      	strb	r2, [r3, #5]
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200004c0 	.word	0x200004c0

080006fc <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	e00d      	b.n	8000728 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <ssd1306_Fill+0x1a>
 8000712:	2100      	movs	r1, #0
 8000714:	e000      	b.n	8000718 <ssd1306_Fill+0x1c>
 8000716:	21ff      	movs	r1, #255	; 0xff
 8000718:	4a09      	ldr	r2, [pc, #36]	; (8000740 <ssd1306_Fill+0x44>)
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	4413      	add	r3, r2
 800071e:	460a      	mov	r2, r1
 8000720:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	3301      	adds	r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800072e:	d3ed      	bcc.n	800070c <ssd1306_Fill+0x10>
    }
}
 8000730:	bf00      	nop
 8000732:	bf00      	nop
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	200000c0 	.word	0x200000c0

08000744 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800074a:	2300      	movs	r3, #0
 800074c:	71fb      	strb	r3, [r7, #7]
 800074e:	e016      	b.n	800077e <ssd1306_UpdateScreen+0x3a>
    	//uint8_t temp={0xB0+i, 0x00, 0x10};
//    	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &temp, 1);

        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	3b50      	subs	r3, #80	; 0x50
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff36 	bl	80005c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff ff33 	bl	80005c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000762:	2010      	movs	r0, #16
 8000764:	f7ff ff30 	bl	80005c8 <ssd1306_WriteCommand>
//    	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH*i], SSD1306_WIDTH);
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	01db      	lsls	r3, r3, #7
 800076c:	4a08      	ldr	r2, [pc, #32]	; (8000790 <ssd1306_UpdateScreen+0x4c>)
 800076e:	4413      	add	r3, r2
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff40 	bl	80005f8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	3301      	adds	r3, #1
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b07      	cmp	r3, #7
 8000782:	d9e5      	bls.n	8000750 <ssd1306_UpdateScreen+0xc>
    }
}
 8000784:	bf00      	nop
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000c0 	.word	0x200000c0

08000794 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
 800079e:	460b      	mov	r3, r1
 80007a0:	71bb      	strb	r3, [r7, #6]
 80007a2:	4613      	mov	r3, r2
 80007a4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	db48      	blt.n	8000840 <ssd1306_DrawPixel+0xac>
 80007ae:	79bb      	ldrb	r3, [r7, #6]
 80007b0:	2b3f      	cmp	r3, #63	; 0x3f
 80007b2:	d845      	bhi.n	8000840 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80007b4:	4b25      	ldr	r3, [pc, #148]	; (800084c <ssd1306_DrawPixel+0xb8>)
 80007b6:	791b      	ldrb	r3, [r3, #4]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d006      	beq.n	80007ca <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80007bc:	797b      	ldrb	r3, [r7, #5]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	bf0c      	ite	eq
 80007c2:	2301      	moveq	r3, #1
 80007c4:	2300      	movne	r3, #0
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80007ca:	797b      	ldrb	r3, [r7, #5]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d11a      	bne.n	8000806 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80007d0:	79fa      	ldrb	r2, [r7, #7]
 80007d2:	79bb      	ldrb	r3, [r7, #6]
 80007d4:	08db      	lsrs	r3, r3, #3
 80007d6:	b2d8      	uxtb	r0, r3
 80007d8:	4603      	mov	r3, r0
 80007da:	01db      	lsls	r3, r3, #7
 80007dc:	4413      	add	r3, r2
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <ssd1306_DrawPixel+0xbc>)
 80007e0:	5cd3      	ldrb	r3, [r2, r3]
 80007e2:	b25a      	sxtb	r2, r3
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	2101      	movs	r1, #1
 80007ec:	fa01 f303 	lsl.w	r3, r1, r3
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	4313      	orrs	r3, r2
 80007f4:	b259      	sxtb	r1, r3
 80007f6:	79fa      	ldrb	r2, [r7, #7]
 80007f8:	4603      	mov	r3, r0
 80007fa:	01db      	lsls	r3, r3, #7
 80007fc:	4413      	add	r3, r2
 80007fe:	b2c9      	uxtb	r1, r1
 8000800:	4a13      	ldr	r2, [pc, #76]	; (8000850 <ssd1306_DrawPixel+0xbc>)
 8000802:	54d1      	strb	r1, [r2, r3]
 8000804:	e01d      	b.n	8000842 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000806:	79fa      	ldrb	r2, [r7, #7]
 8000808:	79bb      	ldrb	r3, [r7, #6]
 800080a:	08db      	lsrs	r3, r3, #3
 800080c:	b2d8      	uxtb	r0, r3
 800080e:	4603      	mov	r3, r0
 8000810:	01db      	lsls	r3, r3, #7
 8000812:	4413      	add	r3, r2
 8000814:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <ssd1306_DrawPixel+0xbc>)
 8000816:	5cd3      	ldrb	r3, [r2, r3]
 8000818:	b25a      	sxtb	r2, r3
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	f003 0307 	and.w	r3, r3, #7
 8000820:	2101      	movs	r1, #1
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	b25b      	sxtb	r3, r3
 8000828:	43db      	mvns	r3, r3
 800082a:	b25b      	sxtb	r3, r3
 800082c:	4013      	ands	r3, r2
 800082e:	b259      	sxtb	r1, r3
 8000830:	79fa      	ldrb	r2, [r7, #7]
 8000832:	4603      	mov	r3, r0
 8000834:	01db      	lsls	r3, r3, #7
 8000836:	4413      	add	r3, r2
 8000838:	b2c9      	uxtb	r1, r1
 800083a:	4a05      	ldr	r2, [pc, #20]	; (8000850 <ssd1306_DrawPixel+0xbc>)
 800083c:	54d1      	strb	r1, [r2, r3]
 800083e:	e000      	b.n	8000842 <ssd1306_DrawPixel+0xae>
        return;
 8000840:	bf00      	nop
    }
}
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	200004c0 	.word	0x200004c0
 8000850:	200000c0 	.word	0x200000c0

08000854 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	4604      	mov	r4, r0
 800085c:	1d38      	adds	r0, r7, #4
 800085e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000862:	461a      	mov	r2, r3
 8000864:	4623      	mov	r3, r4
 8000866:	73fb      	strb	r3, [r7, #15]
 8000868:	4613      	mov	r3, r2
 800086a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	2b1f      	cmp	r3, #31
 8000870:	d902      	bls.n	8000878 <ssd1306_WriteChar+0x24>
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	2b7e      	cmp	r3, #126	; 0x7e
 8000876:	d901      	bls.n	800087c <ssd1306_WriteChar+0x28>
        return 0;
 8000878:	2300      	movs	r3, #0
 800087a:	e06d      	b.n	8000958 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800087c:	4b38      	ldr	r3, [pc, #224]	; (8000960 <ssd1306_WriteChar+0x10c>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	793b      	ldrb	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	2b80      	cmp	r3, #128	; 0x80
 8000888:	dc06      	bgt.n	8000898 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800088a:	4b35      	ldr	r3, [pc, #212]	; (8000960 <ssd1306_WriteChar+0x10c>)
 800088c:	885b      	ldrh	r3, [r3, #2]
 800088e:	461a      	mov	r2, r3
 8000890:	797b      	ldrb	r3, [r7, #5]
 8000892:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000894:	2b40      	cmp	r3, #64	; 0x40
 8000896:	dd01      	ble.n	800089c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000898:	2300      	movs	r3, #0
 800089a:	e05d      	b.n	8000958 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
 80008a0:	e04c      	b.n	800093c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	3b20      	subs	r3, #32
 80008a8:	7979      	ldrb	r1, [r7, #5]
 80008aa:	fb01 f303 	mul.w	r3, r1, r3
 80008ae:	4619      	mov	r1, r3
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	440b      	add	r3, r1
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	4413      	add	r3, r2
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	e034      	b.n	800092c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80008c2:	697a      	ldr	r2, [r7, #20]
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d012      	beq.n	80008f8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80008d2:	4b23      	ldr	r3, [pc, #140]	; (8000960 <ssd1306_WriteChar+0x10c>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4413      	add	r3, r2
 80008de:	b2d8      	uxtb	r0, r3
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <ssd1306_WriteChar+0x10c>)
 80008e2:	885b      	ldrh	r3, [r3, #2]
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4413      	add	r3, r2
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	7bba      	ldrb	r2, [r7, #14]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f7ff ff4f 	bl	8000794 <ssd1306_DrawPixel>
 80008f6:	e016      	b.n	8000926 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80008f8:	4b19      	ldr	r3, [pc, #100]	; (8000960 <ssd1306_WriteChar+0x10c>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	69bb      	ldr	r3, [r7, #24]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	4413      	add	r3, r2
 8000904:	b2d8      	uxtb	r0, r3
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <ssd1306_WriteChar+0x10c>)
 8000908:	885b      	ldrh	r3, [r3, #2]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	4413      	add	r3, r2
 8000912:	b2d9      	uxtb	r1, r3
 8000914:	7bbb      	ldrb	r3, [r7, #14]
 8000916:	2b00      	cmp	r3, #0
 8000918:	bf0c      	ite	eq
 800091a:	2301      	moveq	r3, #1
 800091c:	2300      	movne	r3, #0
 800091e:	b2db      	uxtb	r3, r3
 8000920:	461a      	mov	r2, r3
 8000922:	f7ff ff37 	bl	8000794 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	3301      	adds	r3, #1
 800092a:	61bb      	str	r3, [r7, #24]
 800092c:	793b      	ldrb	r3, [r7, #4]
 800092e:	461a      	mov	r2, r3
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	4293      	cmp	r3, r2
 8000934:	d3c5      	bcc.n	80008c2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3301      	adds	r3, #1
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	797b      	ldrb	r3, [r7, #5]
 800093e:	461a      	mov	r2, r3
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	4293      	cmp	r3, r2
 8000944:	d3ad      	bcc.n	80008a2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <ssd1306_WriteChar+0x10c>)
 8000948:	881a      	ldrh	r2, [r3, #0]
 800094a:	793b      	ldrb	r3, [r7, #4]
 800094c:	b29b      	uxth	r3, r3
 800094e:	4413      	add	r3, r2
 8000950:	b29a      	uxth	r2, r3
 8000952:	4b03      	ldr	r3, [pc, #12]	; (8000960 <ssd1306_WriteChar+0x10c>)
 8000954:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000956:	7bfb      	ldrb	r3, [r7, #15]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3724      	adds	r7, #36	; 0x24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	200004c0 	.word	0x200004c0

08000964 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	1d38      	adds	r0, r7, #4
 800096e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000972:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8000974:	e012      	b.n	800099c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	7818      	ldrb	r0, [r3, #0]
 800097a:	78fb      	ldrb	r3, [r7, #3]
 800097c:	1d3a      	adds	r2, r7, #4
 800097e:	ca06      	ldmia	r2, {r1, r2}
 8000980:	f7ff ff68 	bl	8000854 <ssd1306_WriteChar>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	429a      	cmp	r2, r3
 800098e:	d002      	beq.n	8000996 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	e008      	b.n	80009a8 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	3301      	adds	r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d1e8      	bne.n	8000976 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	781b      	ldrb	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	460a      	mov	r2, r1
 80009ba:	71fb      	strb	r3, [r7, #7]
 80009bc:	4613      	mov	r3, r2
 80009be:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <ssd1306_SetCursor+0x2c>)
 80009c6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <ssd1306_SetCursor+0x2c>)
 80009ce:	805a      	strh	r2, [r3, #2]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	200004c0 	.word	0x200004c0

080009e0 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80009ea:	2381      	movs	r3, #129	; 0x81
 80009ec:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fde9 	bl	80005c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fde5 	bl	80005c8 <ssd1306_WriteCommand>
}
 80009fe:	bf00      	nop
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d005      	beq.n	8000a24 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000a18:	23af      	movs	r3, #175	; 0xaf
 8000a1a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <ssd1306_SetDisplayOn+0x38>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	719a      	strb	r2, [r3, #6]
 8000a22:	e004      	b.n	8000a2e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000a24:	23ae      	movs	r3, #174	; 0xae
 8000a26:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <ssd1306_SetDisplayOn+0x38>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fdc9 	bl	80005c8 <ssd1306_WriteCommand>
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200004c0 	.word	0x200004c0

08000a44 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08c      	sub	sp, #48	; 0x30
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2220      	movs	r2, #32
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f009 ff8f 	bl	800a980 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a62:	4b33      	ldr	r3, [pc, #204]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000a64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a6a:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000a6c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a72:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a78:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000a7e:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a84:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a8a:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a90:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a96:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000a9c:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000aac:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000ab4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ab8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000aba:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000ac4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ac8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ad2:	4817      	ldr	r0, [pc, #92]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000ad4:	f001 f9ca 	bl	8001e6c <HAL_ADC_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000ade:	f000 fb09 	bl	80010f4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aea:	4619      	mov	r1, r3
 8000aec:	4810      	ldr	r0, [pc, #64]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000aee:	f002 fc51 	bl	8003394 <HAL_ADCEx_MultiModeConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000af8:	f000 fafc 	bl	80010f4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <MX_ADC1_Init+0xf0>)
 8000afe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b00:	2306      	movs	r3, #6
 8000b02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000b04:	2303      	movs	r3, #3
 8000b06:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b08:	237f      	movs	r3, #127	; 0x7f
 8000b0a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_ADC1_Init+0xec>)
 8000b1a:	f001 ff41 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000b24:	f000 fae6 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	3730      	adds	r7, #48	; 0x30
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20001eb8 	.word	0x20001eb8
 8000b34:	04300002 	.word	0x04300002

08000b38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b09e      	sub	sp, #120	; 0x78
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	2254      	movs	r2, #84	; 0x54
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f009 ff11 	bl	800a980 <memset>
  if(adcHandle->Instance==ADC1)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b66:	d13c      	bne.n	8000be2 <HAL_ADC_MspInit+0xaa>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b6c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b6e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b72:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f004 fc1d 	bl	80053b8 <HAL_RCCEx_PeriphCLKConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b84:	f000 fab6 	bl	80010f4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_ADC_MspInit+0xb4>)
 8000b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8c:	4a17      	ldr	r2, [pc, #92]	; (8000bec <HAL_ADC_MspInit+0xb4>)
 8000b8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_ADC_MspInit+0xb4>)
 8000b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_ADC_MspInit+0xb4>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba4:	4a11      	ldr	r2, [pc, #68]	; (8000bec <HAL_ADC_MspInit+0xb4>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_ADC_MspInit+0xb4>)
 8000bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bce:	f003 f83b 	bl	8003c48 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2105      	movs	r1, #5
 8000bd6:	2012      	movs	r0, #18
 8000bd8:	f002 fd9c 	bl	8003714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000bdc:	2012      	movs	r0, #18
 8000bde:	f002 fdb3 	bl	8003748 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000be2:	bf00      	nop
 8000be4:	3778      	adds	r7, #120	; 0x78
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000

08000bf0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uartDataKey */
  uartDataKeyHandle = osSemaphoreNew(1, 1, &uartDataKey_attributes);
 8000bf4:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <MX_FREERTOS_Init+0x58>)
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f006 fcd8 	bl	80075ae <osSemaphoreNew>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <MX_FREERTOS_Init+0x5c>)
 8000c02:	6013      	str	r3, [r2, #0]

  /* creation of adcDataKey */
  adcDataKeyHandle = osSemaphoreNew(1, 1, &adcDataKey_attributes);
 8000c04:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <MX_FREERTOS_Init+0x60>)
 8000c06:	2101      	movs	r1, #1
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f006 fcd0 	bl	80075ae <osSemaphoreNew>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <MX_FREERTOS_Init+0x64>)
 8000c12:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c14:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <MX_FREERTOS_Init+0x68>)
 8000c16:	2100      	movs	r1, #0
 8000c18:	4810      	ldr	r0, [pc, #64]	; (8000c5c <MX_FREERTOS_Init+0x6c>)
 8000c1a:	f006 fc1b 	bl	8007454 <osThreadNew>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <MX_FREERTOS_Init+0x70>)
 8000c22:	6013      	str	r3, [r2, #0]

  /* creation of DisplayUpdate */
  DisplayUpdateHandle = osThreadNew(StartDisplayUpdate, NULL, &DisplayUpdate_attributes);
 8000c24:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <MX_FREERTOS_Init+0x74>)
 8000c26:	2100      	movs	r1, #0
 8000c28:	480f      	ldr	r0, [pc, #60]	; (8000c68 <MX_FREERTOS_Init+0x78>)
 8000c2a:	f006 fc13 	bl	8007454 <osThreadNew>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <MX_FREERTOS_Init+0x7c>)
 8000c32:	6013      	str	r3, [r2, #0]

  /* creation of ReadCommPorts */
  ReadCommPortsHandle = osThreadNew(StartReadCommPorts, NULL, &ReadCommPorts_attributes);
 8000c34:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <MX_FREERTOS_Init+0x80>)
 8000c36:	2100      	movs	r1, #0
 8000c38:	480e      	ldr	r0, [pc, #56]	; (8000c74 <MX_FREERTOS_Init+0x84>)
 8000c3a:	f006 fc0b 	bl	8007454 <osThreadNew>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <MX_FREERTOS_Init+0x88>)
 8000c42:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	0800c798 	.word	0x0800c798
 8000c4c:	20001fa8 	.word	0x20001fa8
 8000c50:	0800c7a8 	.word	0x0800c7a8
 8000c54:	20001fa0 	.word	0x20001fa0
 8000c58:	0800c72c 	.word	0x0800c72c
 8000c5c:	08000c7d 	.word	0x08000c7d
 8000c60:	20001f9c 	.word	0x20001f9c
 8000c64:	0800c750 	.word	0x0800c750
 8000c68:	08000ca9 	.word	0x08000ca9
 8000c6c:	20001fac 	.word	0x20001fac
 8000c70:	0800c774 	.word	0x0800c774
 8000c74:	08000d39 	.word	0x08000d39
 8000c78:	20001fa4 	.word	0x20001fa4

08000c7c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	w_Initialize();
 8000c84:	f000 fc90 	bl	80015a8 <w_Initialize>
	strcpy(w_uartBuff, "<<DATA>>");
 8000c88:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <StartDefaultTask+0x24>)
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <StartDefaultTask+0x28>)
 8000c8c:	cb03      	ldmia	r3!, {r0, r1}
 8000c8e:	6010      	str	r0, [r2, #0]
 8000c90:	6051      	str	r1, [r2, #4]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	7213      	strb	r3, [r2, #8]
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000c96:	2001      	movs	r0, #1
 8000c98:	f006 fc6e 	bl	8007578 <osDelay>
 8000c9c:	e7fb      	b.n	8000c96 <StartDefaultTask+0x1a>
 8000c9e:	bf00      	nop
 8000ca0:	20000544 	.word	0x20000544
 8000ca4:	0800b208 	.word	0x0800b208

08000ca8 <StartDisplayUpdate>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayUpdate */
void StartDisplayUpdate(void *argument)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayUpdate */
	/* Infinite loop */
	for (;;) {

		osSemaphoreAcquire(uartDataKeyHandle, osWaitForever);
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <StartDisplayUpdate+0x70>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f006 fd01 	bl	80076c0 <osSemaphoreAcquire>
		osSemaphoreAcquire(adcDataKeyHandle, osWaitForever);
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <StartDisplayUpdate+0x74>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f006 fcfa 	bl	80076c0 <osSemaphoreAcquire>

		w_oledCopyBuffer(w_oledParseUartData(w_uartBuff), 0, w_FONT1);
 8000ccc:	4814      	ldr	r0, [pc, #80]	; (8000d20 <StartDisplayUpdate+0x78>)
 8000cce:	f000 fcf9 	bl	80016c4 <w_oledParseUartData>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a13      	ldr	r2, [pc, #76]	; (8000d24 <StartDisplayUpdate+0x7c>)
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fcc5 	bl	8001668 <w_oledCopyBuffer>

		sprintf(w_adcString, "ADC: %u", w_adcVal);
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <StartDisplayUpdate+0x80>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4911      	ldr	r1, [pc, #68]	; (8000d2c <StartDisplayUpdate+0x84>)
 8000ce6:	4812      	ldr	r0, [pc, #72]	; (8000d30 <StartDisplayUpdate+0x88>)
 8000ce8:	f009 fe52 	bl	800a990 <siprintf>
		w_oledCopyBuffer(w_adcString, 1, w_FONT2);
 8000cec:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <StartDisplayUpdate+0x8c>)
 8000cee:	2101      	movs	r1, #1
 8000cf0:	480f      	ldr	r0, [pc, #60]	; (8000d30 <StartDisplayUpdate+0x88>)
 8000cf2:	f000 fcb9 	bl	8001668 <w_oledCopyBuffer>
		//memset(w_adcString, 0, 10);
		w_oledPageWrite();
 8000cf6:	f000 fd2b 	bl	8001750 <w_oledPageWrite>

		osSemaphoreRelease(uartDataKeyHandle);
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <StartDisplayUpdate+0x70>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f006 fd30 	bl	8007764 <osSemaphoreRelease>
		osSemaphoreRelease(adcDataKeyHandle);
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <StartDisplayUpdate+0x74>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f006 fd2b 	bl	8007764 <osSemaphoreRelease>
		osDelay(10);
 8000d0e:	200a      	movs	r0, #10
 8000d10:	f006 fc32 	bl	8007578 <osDelay>
		osSemaphoreAcquire(uartDataKeyHandle, osWaitForever);
 8000d14:	e7cc      	b.n	8000cb0 <StartDisplayUpdate+0x8>
 8000d16:	bf00      	nop
 8000d18:	20001fa8 	.word	0x20001fa8
 8000d1c:	20001fa0 	.word	0x20001fa0
 8000d20:	20000544 	.word	0x20000544
 8000d24:	20000000 	.word	0x20000000
 8000d28:	2000059a 	.word	0x2000059a
 8000d2c:	0800b214 	.word	0x0800b214
 8000d30:	20000590 	.word	0x20000590
 8000d34:	20000008 	.word	0x20000008

08000d38 <StartReadCommPorts>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadCommPorts */
void StartReadCommPorts(void *argument)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCommPorts */

	/* Infinite loop */
	for (;;) {
		osDelay(100);
 8000d40:	2064      	movs	r0, #100	; 0x64
 8000d42:	f006 fc19 	bl	8007578 <osDelay>
 8000d46:	e7fb      	b.n	8000d40 <StartReadCommPorts+0x8>

08000d48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_DMA_Init+0x50>)
 8000d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d52:	4a11      	ldr	r2, [pc, #68]	; (8000d98 <MX_DMA_Init+0x50>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	6493      	str	r3, [r2, #72]	; 0x48
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_DMA_Init+0x50>)
 8000d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_DMA_Init+0x50>)
 8000d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d6a:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <MX_DMA_Init+0x50>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6493      	str	r3, [r2, #72]	; 0x48
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_DMA_Init+0x50>)
 8000d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2105      	movs	r1, #5
 8000d82:	200b      	movs	r0, #11
 8000d84:	f002 fcc6 	bl	8003714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d88:	200b      	movs	r0, #11
 8000d8a:	f002 fcdd 	bl	8003748 <HAL_NVIC_EnableIRQ>

}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000

08000d9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <MX_GPIO_Init+0x7c>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	4a18      	ldr	r2, [pc, #96]	; (8000e18 <MX_GPIO_Init+0x7c>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dbe:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_GPIO_Init+0x7c>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <MX_GPIO_Init+0x7c>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <MX_GPIO_Init+0x7c>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <MX_GPIO_Init+0x7c>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dec:	f003 f8ae 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	4619      	mov	r1, r3
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0c:	f002 ff1c 	bl	8003c48 <HAL_GPIO_Init>

}
 8000e10:	bf00      	nop
 8000e12:	3720      	adds	r7, #32
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40021000 	.word	0x40021000

08000e1c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <MX_I2C1_Init+0x74>)
 8000e22:	4a1c      	ldr	r2, [pc, #112]	; (8000e94 <MX_I2C1_Init+0x78>)
 8000e24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <MX_I2C1_Init+0x74>)
 8000e28:	4a1b      	ldr	r2, [pc, #108]	; (8000e98 <MX_I2C1_Init+0x7c>)
 8000e2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <MX_I2C1_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <MX_I2C1_Init+0x74>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <MX_I2C1_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <MX_I2C1_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <MX_I2C1_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_I2C1_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <MX_I2C1_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e56:	480e      	ldr	r0, [pc, #56]	; (8000e90 <MX_I2C1_Init+0x74>)
 8000e58:	f003 f890 	bl	8003f7c <HAL_I2C_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e62:	f000 f947 	bl	80010f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e66:	2100      	movs	r1, #0
 8000e68:	4809      	ldr	r0, [pc, #36]	; (8000e90 <MX_I2C1_Init+0x74>)
 8000e6a:	f003 fbf3 	bl	8004654 <HAL_I2CEx_ConfigAnalogFilter>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e74:	f000 f93e 	bl	80010f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_I2C1_Init+0x74>)
 8000e7c:	f003 fc35 	bl	80046ea <HAL_I2CEx_ConfigDigitalFilter>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e86:	f000 f935 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20001fb0 	.word	0x20001fb0
 8000e94:	40005400 	.word	0x40005400
 8000e98:	10802d9b 	.word	0x10802d9b

08000e9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b0a0      	sub	sp, #128	; 0x80
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb4:	f107 0318 	add.w	r3, r7, #24
 8000eb8:	2254      	movs	r2, #84	; 0x54
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f009 fd5f 	bl	800a980 <memset>
  if(i2cHandle->Instance==I2C1)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a2d      	ldr	r2, [pc, #180]	; (8000f7c <HAL_I2C_MspInit+0xe0>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d153      	bne.n	8000f74 <HAL_I2C_MspInit+0xd8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ecc:	2340      	movs	r3, #64	; 0x40
 8000ece:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed4:	f107 0318 	add.w	r3, r7, #24
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f004 fa6d 	bl	80053b8 <HAL_RCCEx_PeriphCLKConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ee4:	f000 f906 	bl	80010f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <HAL_I2C_MspInit+0xe4>)
 8000eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eec:	4a24      	ldr	r2, [pc, #144]	; (8000f80 <HAL_I2C_MspInit+0xe4>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <HAL_I2C_MspInit+0xe4>)
 8000ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <HAL_I2C_MspInit+0xe4>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f04:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <HAL_I2C_MspInit+0xe4>)
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <HAL_I2C_MspInit+0xe4>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f1e:	2312      	movs	r3, #18
 8000f20:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f32:	4619      	mov	r1, r3
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f38:	f002 fe86 	bl	8003c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f40:	2312      	movs	r3, #18
 8000f42:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f54:	4619      	mov	r1, r3
 8000f56:	480b      	ldr	r0, [pc, #44]	; (8000f84 <HAL_I2C_MspInit+0xe8>)
 8000f58:	f002 fe76 	bl	8003c48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_I2C_MspInit+0xe4>)
 8000f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_I2C_MspInit+0xe4>)
 8000f62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f66:	6593      	str	r3, [r2, #88]	; 0x58
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_I2C_MspInit+0xe4>)
 8000f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f74:	bf00      	nop
 8000f76:	3780      	adds	r7, #128	; 0x80
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40005400 	.word	0x40005400
 8000f80:	40021000 	.word	0x40021000
 8000f84:	48000400 	.word	0x48000400

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8c:	f000 fcd5 	bl	800193a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f90:	f000 f826 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f94:	f7ff ff02 	bl	8000d9c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f98:	f7ff ff40 	bl	8000e1c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000f9c:	f000 f9c6 	bl	800132c <MX_TIM2_Init>
  MX_DMA_Init();
 8000fa0:	f7ff fed2 	bl	8000d48 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000fa4:	f000 fa2e 	bl	8001404 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000fa8:	f7ff fd4c 	bl	8000a44 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, w_uartBuff, sizeof(w_uartBuff));
 8000fac:	2237      	movs	r2, #55	; 0x37
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <main+0x48>)
 8000fb0:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <main+0x4c>)
 8000fb2:	f005 fab7 	bl	8006524 <HAL_UART_Receive_DMA>
  HAL_ADC_Start_IT(&hadc1);
 8000fb6:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <main+0x50>)
 8000fb8:	f001 f91a 	bl	80021f0 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 8000fbc:	4807      	ldr	r0, [pc, #28]	; (8000fdc <main+0x54>)
 8000fbe:	f004 fc9f 	bl	8005900 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000fc2:	f006 f9fd 	bl	80073c0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000fc6:	f7ff fe13 	bl	8000bf0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000fca:	f006 fa1d 	bl	8007408 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <main+0x46>
 8000fd0:	20000544 	.word	0x20000544
 8000fd4:	200020f4 	.word	0x200020f4
 8000fd8:	20001eb8 	.word	0x20001eb8
 8000fdc:	20002048 	.word	0x20002048

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b094      	sub	sp, #80	; 0x50
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 0318 	add.w	r3, r7, #24
 8000fea:	2238      	movs	r2, #56	; 0x38
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f009 fcc6 	bl	800a980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001002:	2000      	movs	r0, #0
 8001004:	f003 fbbe 	bl	8004784 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001008:	2302      	movs	r3, #2
 800100a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800100c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001012:	2340      	movs	r3, #64	; 0x40
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001016:	2302      	movs	r3, #2
 8001018:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800101a:	2302      	movs	r3, #2
 800101c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800101e:	2304      	movs	r3, #4
 8001020:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001022:	2355      	movs	r3, #85	; 0x55
 8001024:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001026:	2302      	movs	r3, #2
 8001028:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800102a:	2302      	movs	r3, #2
 800102c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800102e:	2302      	movs	r3, #2
 8001030:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001032:	f107 0318 	add.w	r3, r7, #24
 8001036:	4618      	mov	r0, r3
 8001038:	f003 fc58 	bl	80048ec <HAL_RCC_OscConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001042:	f000 f857 	bl	80010f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001046:	230f      	movs	r3, #15
 8001048:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104a:	2303      	movs	r3, #3
 800104c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2104      	movs	r1, #4
 800105e:	4618      	mov	r0, r3
 8001060:	f003 ff5c 	bl	8004f1c <HAL_RCC_ClockConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800106a:	f000 f843 	bl	80010f4 <Error_Handler>
  }
}
 800106e:	bf00      	nop
 8001070:	3750      	adds	r7, #80	; 0x50
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]

}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	osSemaphoreAcquire(adcDataKeyHandle, osWaitForever);
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_ADC_ConvCpltCallback+0x38>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f04f 31ff 	mov.w	r1, #4294967295
 800109c:	4618      	mov	r0, r3
 800109e:	f006 fb0f 	bl	80076c0 <osSemaphoreAcquire>
	w_adcVal = HAL_ADC_GetValue(&hadc1);
 80010a2:	4809      	ldr	r0, [pc, #36]	; (80010c8 <HAL_ADC_ConvCpltCallback+0x3c>)
 80010a4:	f001 fa00 	bl	80024a8 <HAL_ADC_GetValue>
 80010a8:	4603      	mov	r3, r0
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <HAL_ADC_ConvCpltCallback+0x40>)
 80010ae:	801a      	strh	r2, [r3, #0]
	osSemaphoreRelease(adcDataKeyHandle);
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <HAL_ADC_ConvCpltCallback+0x38>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f006 fb55 	bl	8007764 <osSemaphoreRelease>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20001fa0 	.word	0x20001fa0
 80010c8:	20001eb8 	.word	0x20001eb8
 80010cc:	2000059a 	.word	0x2000059a

080010d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d101      	bne.n	80010e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010e2:	f000 fc43 	bl	800196c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40001000 	.word	0x40001000

080010f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f8:	b672      	cpsid	i
}
 80010fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010fc:	e7fe      	b.n	80010fc <Error_Handler+0x8>
	...

08001100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_MspInit+0x50>)
 8001108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110a:	4a11      	ldr	r2, [pc, #68]	; (8001150 <HAL_MspInit+0x50>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6613      	str	r3, [r2, #96]	; 0x60
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_MspInit+0x50>)
 8001114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <HAL_MspInit+0x50>)
 8001120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <HAL_MspInit+0x50>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001128:	6593      	str	r3, [r2, #88]	; 0x58
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <HAL_MspInit+0x50>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	210f      	movs	r1, #15
 800113a:	f06f 0001 	mvn.w	r0, #1
 800113e:	f002 fae9 	bl	8003714 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001142:	f003 fbc3 	bl	80048cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000

08001154 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	; 0x30
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <HAL_InitTick+0xcc>)
 800116c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116e:	4a2c      	ldr	r2, [pc, #176]	; (8001220 <HAL_InitTick+0xcc>)
 8001170:	f043 0310 	orr.w	r3, r3, #16
 8001174:	6593      	str	r3, [r2, #88]	; 0x58
 8001176:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <HAL_InitTick+0xcc>)
 8001178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117a:	f003 0310 	and.w	r3, r3, #16
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001182:	f107 020c 	add.w	r2, r7, #12
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f004 f89b 	bl	80052c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001192:	f004 f86d 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8001196:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119a:	4a22      	ldr	r2, [pc, #136]	; (8001224 <HAL_InitTick+0xd0>)
 800119c:	fba2 2303 	umull	r2, r3, r2, r3
 80011a0:	0c9b      	lsrs	r3, r3, #18
 80011a2:	3b01      	subs	r3, #1
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <HAL_InitTick+0xd4>)
 80011a8:	4a20      	ldr	r2, [pc, #128]	; (800122c <HAL_InitTick+0xd8>)
 80011aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011ac:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <HAL_InitTick+0xd4>)
 80011ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011b4:	4a1c      	ldr	r2, [pc, #112]	; (8001228 <HAL_InitTick+0xd4>)
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_InitTick+0xd4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_InitTick+0xd4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80011c6:	4818      	ldr	r0, [pc, #96]	; (8001228 <HAL_InitTick+0xd4>)
 80011c8:	f004 fb42 	bl	8005850 <HAL_TIM_Base_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80011d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d11b      	bne.n	8001212 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011da:	4813      	ldr	r0, [pc, #76]	; (8001228 <HAL_InitTick+0xd4>)
 80011dc:	f004 fc00 	bl	80059e0 <HAL_TIM_Base_Start_IT>
 80011e0:	4603      	mov	r3, r0
 80011e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80011e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d111      	bne.n	8001212 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011ee:	2036      	movs	r0, #54	; 0x36
 80011f0:	f002 faaa 	bl	8003748 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b0f      	cmp	r3, #15
 80011f8:	d808      	bhi.n	800120c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80011fa:	2200      	movs	r2, #0
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	2036      	movs	r0, #54	; 0x36
 8001200:	f002 fa88 	bl	8003714 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001204:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <HAL_InitTick+0xdc>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e002      	b.n	8001212 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8001212:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001216:	4618      	mov	r0, r3
 8001218:	3730      	adds	r7, #48	; 0x30
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000
 8001224:	431bde83 	.word	0x431bde83
 8001228:	20001ffc 	.word	0x20001ffc
 800122c:	40001000 	.word	0x40001000
 8001230:	20000034 	.word	0x20000034

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <NMI_Handler+0x4>

0800123a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <MemManage_Handler+0x4>

08001246 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <UsageFault_Handler+0x4>

08001252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <DMA1_Channel1_IRQHandler+0x10>)
 8001266:	f002 fba0 	bl	80039aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20002094 	.word	0x20002094

08001274 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <ADC1_2_IRQHandler+0x10>)
 800127a:	f001 f923 	bl	80024c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20001eb8 	.word	0x20001eb8

08001288 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <TIM6_DAC_IRQHandler+0x10>)
 800128e:	f004 fc1f 	bl	8005ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20001ffc 	.word	0x20001ffc

0800129c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a4:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <_sbrk+0x5c>)
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <_sbrk+0x60>)
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <_sbrk+0x64>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <_sbrk+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d207      	bcs.n	80012dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012cc:	f009 fb06 	bl	800a8dc <__errno>
 80012d0:	4603      	mov	r3, r0
 80012d2:	220c      	movs	r2, #12
 80012d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	e009      	b.n	80012f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <_sbrk+0x64>)
 80012ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20020000 	.word	0x20020000
 80012fc:	00000400 	.word	0x00000400
 8001300:	200004c8 	.word	0x200004c8
 8001304:	200021d8 	.word	0x200021d8

08001308 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <SystemInit+0x20>)
 800130e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001312:	4a05      	ldr	r2, [pc, #20]	; (8001328 <SystemInit+0x20>)
 8001314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <MX_TIM2_Init+0x98>)
 800134c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001350:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <MX_TIM2_Init+0x98>)
 8001354:	f242 7210 	movw	r2, #10000	; 0x2710
 8001358:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_TIM2_Init+0x98>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 169;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_TIM2_Init+0x98>)
 8001362:	22a9      	movs	r2, #169	; 0xa9
 8001364:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_TIM2_Init+0x98>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_TIM2_Init+0x98>)
 800136e:	2280      	movs	r2, #128	; 0x80
 8001370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001372:	4814      	ldr	r0, [pc, #80]	; (80013c4 <MX_TIM2_Init+0x98>)
 8001374:	f004 fa6c 	bl	8005850 <HAL_TIM_Base_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800137e:	f7ff feb9 	bl	80010f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001386:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	4619      	mov	r1, r3
 800138e:	480d      	ldr	r0, [pc, #52]	; (80013c4 <MX_TIM2_Init+0x98>)
 8001390:	f004 fd1e 	bl	8005dd0 <HAL_TIM_ConfigClockSource>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800139a:	f7ff feab 	bl	80010f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800139e:	2320      	movs	r3, #32
 80013a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	4619      	mov	r1, r3
 80013aa:	4806      	ldr	r0, [pc, #24]	; (80013c4 <MX_TIM2_Init+0x98>)
 80013ac:	f004 ff8e 	bl	80062cc <HAL_TIMEx_MasterConfigSynchronization>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013b6:	f7ff fe9d 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	3720      	adds	r7, #32
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20002048 	.word	0x20002048

080013c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d8:	d10b      	bne.n	80013f2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_TIM_Base_MspInit+0x38>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	4a08      	ldr	r2, [pc, #32]	; (8001400 <HAL_TIM_Base_MspInit+0x38>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6593      	str	r3, [r2, #88]	; 0x58
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_TIM_Base_MspInit+0x38>)
 80013e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000

08001404 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001408:	4b22      	ldr	r3, [pc, #136]	; (8001494 <MX_USART1_UART_Init+0x90>)
 800140a:	4a23      	ldr	r2, [pc, #140]	; (8001498 <MX_USART1_UART_Init+0x94>)
 800140c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <MX_USART1_UART_Init+0x90>)
 8001410:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001414:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <MX_USART1_UART_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <MX_USART1_UART_Init+0x90>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <MX_USART1_UART_Init+0x90>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_USART1_UART_Init+0x90>)
 800142a:	220c      	movs	r2, #12
 800142c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <MX_USART1_UART_Init+0x90>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_USART1_UART_Init+0x90>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <MX_USART1_UART_Init+0x90>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_USART1_UART_Init+0x90>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <MX_USART1_UART_Init+0x90>)
 8001448:	2200      	movs	r2, #0
 800144a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800144c:	4811      	ldr	r0, [pc, #68]	; (8001494 <MX_USART1_UART_Init+0x90>)
 800144e:	f005 f819 	bl	8006484 <HAL_UART_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001458:	f7ff fe4c 	bl	80010f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800145c:	2100      	movs	r1, #0
 800145e:	480d      	ldr	r0, [pc, #52]	; (8001494 <MX_USART1_UART_Init+0x90>)
 8001460:	f005 fea0 	bl	80071a4 <HAL_UARTEx_SetTxFifoThreshold>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800146a:	f7ff fe43 	bl	80010f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800146e:	2100      	movs	r1, #0
 8001470:	4808      	ldr	r0, [pc, #32]	; (8001494 <MX_USART1_UART_Init+0x90>)
 8001472:	f005 fed5 	bl	8007220 <HAL_UARTEx_SetRxFifoThreshold>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800147c:	f7ff fe3a 	bl	80010f4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_USART1_UART_Init+0x90>)
 8001482:	f005 fe54 	bl	800712e <HAL_UARTEx_EnableFifoMode>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800148c:	f7ff fe32 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200020f4 	.word	0x200020f4
 8001498:	40013800 	.word	0x40013800

0800149c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b09e      	sub	sp, #120	; 0x78
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	2254      	movs	r2, #84	; 0x54
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f009 fa5f 	bl	800a980 <memset>
  if(uartHandle->Instance==USART1)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a34      	ldr	r2, [pc, #208]	; (8001598 <HAL_UART_MspInit+0xfc>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d160      	bne.n	800158e <HAL_UART_MspInit+0xf2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	4618      	mov	r0, r3
 80014da:	f003 ff6d 	bl	80053b8 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014e4:	f7ff fe06 	bl	80010f4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014e8:	4b2c      	ldr	r3, [pc, #176]	; (800159c <HAL_UART_MspInit+0x100>)
 80014ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ec:	4a2b      	ldr	r2, [pc, #172]	; (800159c <HAL_UART_MspInit+0x100>)
 80014ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f2:	6613      	str	r3, [r2, #96]	; 0x60
 80014f4:	4b29      	ldr	r3, [pc, #164]	; (800159c <HAL_UART_MspInit+0x100>)
 80014f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001500:	4b26      	ldr	r3, [pc, #152]	; (800159c <HAL_UART_MspInit+0x100>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001504:	4a25      	ldr	r2, [pc, #148]	; (800159c <HAL_UART_MspInit+0x100>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150c:	4b23      	ldr	r3, [pc, #140]	; (800159c <HAL_UART_MspInit+0x100>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001518:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800151c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800152a:	2307      	movs	r3, #7
 800152c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001532:	4619      	mov	r1, r3
 8001534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001538:	f002 fb86 	bl	8003c48 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_UART_MspInit+0x104>)
 800153e:	4a19      	ldr	r2, [pc, #100]	; (80015a4 <HAL_UART_MspInit+0x108>)
 8001540:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_UART_MspInit+0x104>)
 8001544:	2218      	movs	r2, #24
 8001546:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_UART_MspInit+0x104>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_UART_MspInit+0x104>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_UART_MspInit+0x104>)
 8001556:	2280      	movs	r2, #128	; 0x80
 8001558:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_UART_MspInit+0x104>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_UART_MspInit+0x104>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_UART_MspInit+0x104>)
 8001568:	2220      	movs	r2, #32
 800156a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_UART_MspInit+0x104>)
 800156e:	2200      	movs	r2, #0
 8001570:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001572:	480b      	ldr	r0, [pc, #44]	; (80015a0 <HAL_UART_MspInit+0x104>)
 8001574:	f002 f8f6 	bl	8003764 <HAL_DMA_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800157e:	f7ff fdb9 	bl	80010f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HAL_UART_MspInit+0x104>)
 8001586:	67da      	str	r2, [r3, #124]	; 0x7c
 8001588:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <HAL_UART_MspInit+0x104>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800158e:	bf00      	nop
 8001590:	3778      	adds	r7, #120	; 0x78
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40013800 	.word	0x40013800
 800159c:	40021000 	.word	0x40021000
 80015a0:	20002094 	.word	0x20002094
 80015a4:	40020008 	.word	0x40020008

080015a8 <w_Initialize>:
//-------------------------------------------------------------
/*
 * function initialising oled buffer struct. this value will be displayed unless
 * changed in program
 */
void w_Initialize() {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0

	w_oledData[0].font = w_FONT1;
 80015ac:	4b22      	ldr	r3, [pc, #136]	; (8001638 <w_Initialize+0x90>)
 80015ae:	4a23      	ldr	r2, [pc, #140]	; (800163c <w_Initialize+0x94>)
 80015b0:	615a      	str	r2, [r3, #20]
	w_oledData[1].font = w_FONT1;
 80015b2:	4b21      	ldr	r3, [pc, #132]	; (8001638 <w_Initialize+0x90>)
 80015b4:	4a21      	ldr	r2, [pc, #132]	; (800163c <w_Initialize+0x94>)
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c
	w_oledData[2].font = w_FONT1;
 80015b8:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <w_Initialize+0x90>)
 80015ba:	4a20      	ldr	r2, [pc, #128]	; (800163c <w_Initialize+0x94>)
 80015bc:	645a      	str	r2, [r3, #68]	; 0x44
	w_oledData[3].font = w_FONT2;
 80015be:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <w_Initialize+0x90>)
 80015c0:	4a1f      	ldr	r2, [pc, #124]	; (8001640 <w_Initialize+0x98>)
 80015c2:	65da      	str	r2, [r3, #92]	; 0x5c
	w_oledData[4].font = w_FONT2;
 80015c4:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <w_Initialize+0x90>)
 80015c6:	4a1e      	ldr	r2, [pc, #120]	; (8001640 <w_Initialize+0x98>)
 80015c8:	675a      	str	r2, [r3, #116]	; 0x74

	strcpy(w_oledData[0].stringData, "Hell-0");
 80015ca:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <w_Initialize+0x90>)
 80015cc:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <w_Initialize+0x9c>)
 80015ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015d2:	6018      	str	r0, [r3, #0]
 80015d4:	3304      	adds	r3, #4
 80015d6:	8019      	strh	r1, [r3, #0]
 80015d8:	3302      	adds	r3, #2
 80015da:	0c0a      	lsrs	r2, r1, #16
 80015dc:	701a      	strb	r2, [r3, #0]
	strcpy(w_oledData[1].stringData, "Hell-1");
 80015de:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <w_Initialize+0xa0>)
 80015e0:	4a1a      	ldr	r2, [pc, #104]	; (800164c <w_Initialize+0xa4>)
 80015e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015e6:	6018      	str	r0, [r3, #0]
 80015e8:	3304      	adds	r3, #4
 80015ea:	8019      	strh	r1, [r3, #0]
 80015ec:	3302      	adds	r3, #2
 80015ee:	0c0a      	lsrs	r2, r1, #16
 80015f0:	701a      	strb	r2, [r3, #0]
	strcpy(w_oledData[2].stringData, "Hell-2");
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <w_Initialize+0xa8>)
 80015f4:	4a17      	ldr	r2, [pc, #92]	; (8001654 <w_Initialize+0xac>)
 80015f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015fa:	6018      	str	r0, [r3, #0]
 80015fc:	3304      	adds	r3, #4
 80015fe:	8019      	strh	r1, [r3, #0]
 8001600:	3302      	adds	r3, #2
 8001602:	0c0a      	lsrs	r2, r1, #16
 8001604:	701a      	strb	r2, [r3, #0]
	strcpy(w_oledData[3].stringData, "Hell-3");
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <w_Initialize+0xb0>)
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <w_Initialize+0xb4>)
 800160a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800160e:	6018      	str	r0, [r3, #0]
 8001610:	3304      	adds	r3, #4
 8001612:	8019      	strh	r1, [r3, #0]
 8001614:	3302      	adds	r3, #2
 8001616:	0c0a      	lsrs	r2, r1, #16
 8001618:	701a      	strb	r2, [r3, #0]
	strcpy(w_oledData[4].stringData, "Hell-4");
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <w_Initialize+0xb8>)
 800161c:	4a11      	ldr	r2, [pc, #68]	; (8001664 <w_Initialize+0xbc>)
 800161e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001622:	6018      	str	r0, [r3, #0]
 8001624:	3304      	adds	r3, #4
 8001626:	8019      	strh	r1, [r3, #0]
 8001628:	3302      	adds	r3, #2
 800162a:	0c0a      	lsrs	r2, r1, #16
 800162c:	701a      	strb	r2, [r3, #0]
	ssd1306_Init();
 800162e:	f7fe fffb 	bl	8000628 <ssd1306_Init>
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200004cc 	.word	0x200004cc
 800163c:	20000000 	.word	0x20000000
 8001640:	20000008 	.word	0x20000008
 8001644:	0800b21c 	.word	0x0800b21c
 8001648:	200004e4 	.word	0x200004e4
 800164c:	0800b224 	.word	0x0800b224
 8001650:	200004fc 	.word	0x200004fc
 8001654:	0800b22c 	.word	0x0800b22c
 8001658:	20000514 	.word	0x20000514
 800165c:	0800b234 	.word	0x0800b234
 8001660:	2000052c 	.word	0x2000052c
 8001664:	0800b23c 	.word	0x0800b23c

08001668 <w_oledCopyBuffer>:

//-------------------------------------------------------------
/*
 * copying the character data to oled buffer struct
 */
void w_oledCopyBuffer(char *data, uint8_t line, FontDef *font) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	460b      	mov	r3, r1
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	72fb      	strb	r3, [r7, #11]
	memset(w_oledData[line].stringData, 0, w_OLED_MSG_LEN);
 8001676:	7afa      	ldrb	r2, [r7, #11]
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <w_oledCopyBuffer+0x58>)
 8001682:	4413      	add	r3, r2
 8001684:	2214      	movs	r2, #20
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f009 f979 	bl	800a980 <memset>
	strcpy(w_oledData[line].stringData, data);
 800168e:	7afa      	ldrb	r2, [r7, #11]
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <w_oledCopyBuffer+0x58>)
 800169a:	4413      	add	r3, r2
 800169c:	68f9      	ldr	r1, [r7, #12]
 800169e:	4618      	mov	r0, r3
 80016a0:	f009 f996 	bl	800a9d0 <strcpy>
//	sprintf(w_oledData[line].stringData, data);
	w_oledData[line].font = font;
 80016a4:	7afa      	ldrb	r2, [r7, #11]
 80016a6:	4906      	ldr	r1, [pc, #24]	; (80016c0 <w_oledCopyBuffer+0x58>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	440b      	add	r3, r1
 80016b2:	3314      	adds	r3, #20
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	601a      	str	r2, [r3, #0]
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200004cc 	.word	0x200004cc

080016c4 <w_oledParseUartData>:

char* w_oledParseUartData(char *data) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	uint8_t uartMsgBegFound = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	75fb      	strb	r3, [r7, #23]
	uint8_t uartMsgEndFound = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	72fb      	strb	r3, [r7, #11]
	uint8_t uartMsgLength=0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	72bb      	strb	r3, [r7, #10]
	char tempVar;
	char *dataptr = w_uartParsedData;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <w_oledParseUartData+0x84>)
 80016da:	613b      	str	r3, [r7, #16]
	memset(w_uartParsedData, 0, w_OLED_MSG_LEN);
 80016dc:	2214      	movs	r2, #20
 80016de:	2100      	movs	r1, #0
 80016e0:	4819      	ldr	r0, [pc, #100]	; (8001748 <w_oledParseUartData+0x84>)
 80016e2:	f009 f94d 	bl	800a980 <memset>
	for (int i = 0; i < w_UART_DMA_BUFF_LEN; i++) {
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b36      	cmp	r3, #54	; 0x36
 80016ee:	dc25      	bgt.n	800173c <w_oledParseUartData+0x78>
		if (i != 0)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <w_oledParseUartData+0x38>
			data++;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3301      	adds	r3, #1
 80016fa:	607b      	str	r3, [r7, #4]
		tempVar = *data;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	727b      	strb	r3, [r7, #9]
		if (tempVar == '<' && uartMsgEndFound == 0) {
 8001702:	7a7b      	ldrb	r3, [r7, #9]
 8001704:	2b3c      	cmp	r3, #60	; 0x3c
 8001706:	d105      	bne.n	8001714 <w_oledParseUartData+0x50>
 8001708:	7afb      	ldrb	r3, [r7, #11]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <w_oledParseUartData+0x50>
			uartMsgBegFound = 1;
 800170e:	2301      	movs	r3, #1
 8001710:	75fb      	strb	r3, [r7, #23]
			continue;
 8001712:	e00f      	b.n	8001734 <w_oledParseUartData+0x70>
		}
		if (uartMsgBegFound) {
 8001714:	7dfb      	ldrb	r3, [r7, #23]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00c      	beq.n	8001734 <w_oledParseUartData+0x70>
			if (tempVar == '>') {
 800171a:	7a7b      	ldrb	r3, [r7, #9]
 800171c:	2b3e      	cmp	r3, #62	; 0x3e
 800171e:	d103      	bne.n	8001728 <w_oledParseUartData+0x64>
				uartMsgEndFound = 1;
 8001720:	2301      	movs	r3, #1
 8001722:	72fb      	strb	r3, [r7, #11]
				return w_uartParsedData;
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <w_oledParseUartData+0x84>)
 8001726:	e00a      	b.n	800173e <w_oledParseUartData+0x7a>
			}
			*dataptr = tempVar;
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	7a7a      	ldrb	r2, [r7, #9]
 800172c:	701a      	strb	r2, [r3, #0]
			dataptr++;
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	3301      	adds	r3, #1
 8001732:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < w_UART_DMA_BUFF_LEN; i++) {
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3301      	adds	r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	e7d6      	b.n	80016ea <w_oledParseUartData+0x26>
		}
	}
	return " ERROR ";
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <w_oledParseUartData+0x88>)
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	2000057c 	.word	0x2000057c
 800174c:	0800b244 	.word	0x0800b244

08001750 <w_oledPageWrite>:
/*
 * Writes the data in w_oledData to lines according to its size. Extra data not fitting
 * will be discarded.
 */
char w_CLEARBUFF[] = "                    ";
void w_oledPageWrite() {
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
	static uint8_t LineVal = 0;
	ssd1306_SetCursor(0, w_oledYPos[0]);
 8001756:	4b48      	ldr	r3, [pc, #288]	; (8001878 <w_oledPageWrite+0x128>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	4619      	mov	r1, r3
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff f927 	bl	80009b0 <ssd1306_SetCursor>
	ssd1306_WriteString(w_oledData[0].stringData, *(w_oledData[0].font), White);
 8001762:	4b46      	ldr	r3, [pc, #280]	; (800187c <w_oledPageWrite+0x12c>)
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	2301      	movs	r3, #1
 8001768:	ca06      	ldmia	r2, {r1, r2}
 800176a:	4844      	ldr	r0, [pc, #272]	; (800187c <w_oledPageWrite+0x12c>)
 800176c:	f7ff f8fa 	bl	8000964 <ssd1306_WriteString>

	for (int i = 1; i < w_OLED_MSG_NO; i++) {
 8001770:	2301      	movs	r3, #1
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b04      	cmp	r3, #4
 8001778:	dc32      	bgt.n	80017e0 <w_oledPageWrite+0x90>
		LineVal += w_oledPosIncVal(i);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f882 	bl	8001888 <_Z15w_oledPosIncValh>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <w_oledPageWrite+0x130>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4413      	add	r3, r2
 800178e:	b2da      	uxtb	r2, r3
 8001790:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <w_oledPageWrite+0x130>)
 8001792:	701a      	strb	r2, [r3, #0]
		if (LineVal >= w_OLED_MSG_NO)
 8001794:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <w_oledPageWrite+0x130>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b04      	cmp	r3, #4
 800179a:	d820      	bhi.n	80017de <w_oledPageWrite+0x8e>
			break;
		ssd1306_SetCursor(0, w_oledYPos[LineVal]);
 800179c:	4b38      	ldr	r3, [pc, #224]	; (8001880 <w_oledPageWrite+0x130>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b35      	ldr	r3, [pc, #212]	; (8001878 <w_oledPageWrite+0x128>)
 80017a4:	5c9b      	ldrb	r3, [r3, r2]
 80017a6:	4619      	mov	r1, r3
 80017a8:	2000      	movs	r0, #0
 80017aa:	f7ff f901 	bl	80009b0 <ssd1306_SetCursor>
		ssd1306_WriteString(w_oledData[i].stringData, *(w_oledData[i].font),
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4a30      	ldr	r2, [pc, #192]	; (800187c <w_oledPageWrite+0x12c>)
 80017ba:	1898      	adds	r0, r3, r2
 80017bc:	492f      	ldr	r1, [pc, #188]	; (800187c <w_oledPageWrite+0x12c>)
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	440b      	add	r3, r1
 80017ca:	3314      	adds	r3, #20
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	2301      	movs	r3, #1
 80017d0:	ca06      	ldmia	r2, {r1, r2}
 80017d2:	f7ff f8c7 	bl	8000964 <ssd1306_WriteString>
	for (int i = 1; i < w_OLED_MSG_NO; i++) {
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3301      	adds	r3, #1
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	e7ca      	b.n	8001774 <w_oledPageWrite+0x24>
			break;
 80017de:	bf00      	nop
				White);
	}

	ssd1306_UpdateScreen();
 80017e0:	f7fe ffb0 	bl	8000744 <ssd1306_UpdateScreen>

	LineVal = 0;
 80017e4:	4b26      	ldr	r3, [pc, #152]	; (8001880 <w_oledPageWrite+0x130>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]

	ssd1306_SetCursor(0, w_oledYPos[0]);
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <w_oledPageWrite+0x128>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	4619      	mov	r1, r3
 80017f0:	2000      	movs	r0, #0
 80017f2:	f7ff f8dd 	bl	80009b0 <ssd1306_SetCursor>
	ssd1306_WriteString(w_CLEARBUFF, *(w_oledData[0].font), White);
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <w_oledPageWrite+0x12c>)
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	2301      	movs	r3, #1
 80017fc:	ca06      	ldmia	r2, {r1, r2}
 80017fe:	4821      	ldr	r0, [pc, #132]	; (8001884 <w_oledPageWrite+0x134>)
 8001800:	f7ff f8b0 	bl	8000964 <ssd1306_WriteString>

	for (int i = 1; i < w_OLED_MSG_NO; i++) {
 8001804:	2301      	movs	r3, #1
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	2b04      	cmp	r3, #4
 800180c:	dc2c      	bgt.n	8001868 <w_oledPageWrite+0x118>
		LineVal += w_oledPosIncVal(i);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f838 	bl	8001888 <_Z15w_oledPosIncValh>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <w_oledPageWrite+0x130>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4413      	add	r3, r2
 8001822:	b2da      	uxtb	r2, r3
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <w_oledPageWrite+0x130>)
 8001826:	701a      	strb	r2, [r3, #0]
		if (LineVal >= w_OLED_MSG_NO)
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <w_oledPageWrite+0x130>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b04      	cmp	r3, #4
 800182e:	d81a      	bhi.n	8001866 <w_oledPageWrite+0x116>
			break;
		ssd1306_SetCursor(0, w_oledYPos[LineVal]);
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <w_oledPageWrite+0x130>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <w_oledPageWrite+0x128>)
 8001838:	5c9b      	ldrb	r3, [r3, r2]
 800183a:	4619      	mov	r1, r3
 800183c:	2000      	movs	r0, #0
 800183e:	f7ff f8b7 	bl	80009b0 <ssd1306_SetCursor>
		ssd1306_WriteString(w_CLEARBUFF, *(w_oledData[i].font), White);
 8001842:	490e      	ldr	r1, [pc, #56]	; (800187c <w_oledPageWrite+0x12c>)
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	440b      	add	r3, r1
 8001850:	3314      	adds	r3, #20
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	2301      	movs	r3, #1
 8001856:	ca06      	ldmia	r2, {r1, r2}
 8001858:	480a      	ldr	r0, [pc, #40]	; (8001884 <w_oledPageWrite+0x134>)
 800185a:	f7ff f883 	bl	8000964 <ssd1306_WriteString>
	for (int i = 1; i < w_OLED_MSG_NO; i++) {
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	3301      	adds	r3, #1
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	e7d0      	b.n	8001808 <w_oledPageWrite+0xb8>
			break;
 8001866:	bf00      	nop
	}

	LineVal = 0;
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <w_oledPageWrite+0x130>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000014 	.word	0x20000014
 800187c:	200004cc 	.word	0x200004cc
 8001880:	2000059c 	.word	0x2000059c
 8001884:	2000001c 	.word	0x2000001c

08001888 <_Z15w_oledPosIncValh>:
//-------------------------------------------------------------
/*
 * function returning the value to be incremented in Line position according
 * to size taken by previous line in oled.
 */
uint8_t w_oledPosIncVal(uint8_t i) {
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
	if (w_oledData[i - 1].font == w_FONT1)
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	1e5a      	subs	r2, r3, #1
 8001896:	4911      	ldr	r1, [pc, #68]	; (80018dc <_Z15w_oledPosIncValh+0x54>)
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	440b      	add	r3, r1
 80018a2:	3314      	adds	r3, #20
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <_Z15w_oledPosIncValh+0x58>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d101      	bne.n	80018b0 <_Z15w_oledPosIncValh+0x28>
		return 1;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e00f      	b.n	80018d0 <_Z15w_oledPosIncValh+0x48>
	else if (w_oledData[i - 1].font == w_FONT2)
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	1e5a      	subs	r2, r3, #1
 80018b4:	4909      	ldr	r1, [pc, #36]	; (80018dc <_Z15w_oledPosIncValh+0x54>)
 80018b6:	4613      	mov	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	440b      	add	r3, r1
 80018c0:	3314      	adds	r3, #20
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <_Z15w_oledPosIncValh+0x5c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d101      	bne.n	80018ce <_Z15w_oledPosIncValh+0x46>
		return 2;
 80018ca:	2302      	movs	r3, #2
 80018cc:	e000      	b.n	80018d0 <_Z15w_oledPosIncValh+0x48>
	return 2;
 80018ce:	2302      	movs	r3, #2
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	200004cc 	.word	0x200004cc
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20000008 	.word	0x20000008

080018e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018e8:	480d      	ldr	r0, [pc, #52]	; (8001920 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ec:	480d      	ldr	r0, [pc, #52]	; (8001924 <LoopForever+0x6>)
  ldr r1, =_edata
 80018ee:	490e      	ldr	r1, [pc, #56]	; (8001928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018f0:	4a0e      	ldr	r2, [pc, #56]	; (800192c <LoopForever+0xe>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001904:	4c0b      	ldr	r4, [pc, #44]	; (8001934 <LoopForever+0x16>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001912:	f7ff fcf9 	bl	8001308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001916:	f008 ffe7 	bl	800a8e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800191a:	f7ff fb35 	bl	8000f88 <main>

0800191e <LoopForever>:

LoopForever:
    b LoopForever
 800191e:	e7fe      	b.n	800191e <LoopForever>
  ldr   r0, =_estack
 8001920:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001928:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 800192c:	0800c83c 	.word	0x0800c83c
  ldr r2, =_sbss
 8001930:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001934:	200021d8 	.word	0x200021d8

08001938 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC3_IRQHandler>

0800193a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001944:	2003      	movs	r0, #3
 8001946:	f001 feda 	bl	80036fe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800194a:	200f      	movs	r0, #15
 800194c:	f7ff fc02 	bl	8001154 <HAL_InitTick>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	71fb      	strb	r3, [r7, #7]
 800195a:	e001      	b.n	8001960 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800195c:	f7ff fbd0 	bl	8001100 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001960:	79fb      	ldrb	r3, [r7, #7]

}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_IncTick+0x1c>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_IncTick+0x20>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4413      	add	r3, r2
 800197a:	4a03      	ldr	r2, [pc, #12]	; (8001988 <HAL_IncTick+0x1c>)
 800197c:	6013      	str	r3, [r2, #0]
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	20002184 	.word	0x20002184
 800198c:	20000038 	.word	0x20000038

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20002184 	.word	0x20002184

080019a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff ffee 	bl	8001990 <HAL_GetTick>
 80019b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d004      	beq.n	80019cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_Delay+0x40>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4413      	add	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019cc:	bf00      	nop
 80019ce:	f7ff ffdf 	bl	8001990 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d8f7      	bhi.n	80019ce <HAL_Delay+0x26>
  {
  }
}
 80019de:	bf00      	nop
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000038 	.word	0x20000038

080019ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	609a      	str	r2, [r3, #8]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3360      	adds	r3, #96	; 0x60
 8001a66:	461a      	mov	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <LL_ADC_SetOffset+0x44>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	4313      	orrs	r3, r2
 8001a84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a8c:	bf00      	nop
 8001a8e:	371c      	adds	r7, #28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	03fff000 	.word	0x03fff000

08001a9c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3360      	adds	r3, #96	; 0x60
 8001aaa:	461a      	mov	r2, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3360      	adds	r3, #96	; 0x60
 8001ad8:	461a      	mov	r2, r3
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	431a      	orrs	r2, r3
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001af2:	bf00      	nop
 8001af4:	371c      	adds	r7, #28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b087      	sub	sp, #28
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	3360      	adds	r3, #96	; 0x60
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	431a      	orrs	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001b28:	bf00      	nop
 8001b2a:	371c      	adds	r7, #28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3360      	adds	r3, #96	; 0x60
 8001b44:	461a      	mov	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b5e:	bf00      	nop
 8001b60:	371c      	adds	r7, #28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	615a      	str	r2, [r3, #20]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b087      	sub	sp, #28
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3330      	adds	r3, #48	; 0x30
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	0a1b      	lsrs	r3, r3, #8
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	4413      	add	r3, r2
 8001bd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	211f      	movs	r1, #31
 8001be2:	fa01 f303 	lsl.w	r3, r1, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	401a      	ands	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	0e9b      	lsrs	r3, r3, #26
 8001bee:	f003 011f 	and.w	r1, r3, #31
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	f003 031f 	and.w	r3, r3, #31
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c02:	bf00      	nop
 8001c04:	371c      	adds	r7, #28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b087      	sub	sp, #28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	3314      	adds	r3, #20
 8001c44:	461a      	mov	r2, r3
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	0e5b      	lsrs	r3, r3, #25
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	4413      	add	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	0d1b      	lsrs	r3, r3, #20
 8001c5c:	f003 031f 	and.w	r3, r3, #31
 8001c60:	2107      	movs	r1, #7
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	401a      	ands	r2, r3
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	0d1b      	lsrs	r3, r3, #20
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	fa01 f303 	lsl.w	r3, r1, r3
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c7e:	bf00      	nop
 8001c80:	371c      	adds	r7, #28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0318 	and.w	r3, r3, #24
 8001cae:	4908      	ldr	r1, [pc, #32]	; (8001cd0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cb0:	40d9      	lsrs	r1, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	400b      	ands	r3, r1
 8001cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	0007ffff 	.word	0x0007ffff

08001cd4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 031f 	and.w	r3, r3, #31
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6093      	str	r3, [r2, #8]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d44:	d101      	bne.n	8001d4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d94:	d101      	bne.n	8001d9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001db8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dbc:	f043 0201 	orr.w	r2, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <LL_ADC_IsEnabled+0x18>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <LL_ADC_IsEnabled+0x1a>
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e0a:	f043 0204 	orr.w	r2, r3, #4
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d101      	bne.n	8001e36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d101      	bne.n	8001e5c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e6c:	b590      	push	{r4, r7, lr}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e1af      	b.n	80021e6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d109      	bne.n	8001ea8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7fe fe4f 	bl	8000b38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff3f 	bl	8001d30 <LL_ADC_IsDeepPowerDownEnabled>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d004      	beq.n	8001ec2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff25 	bl	8001d0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ff5a 	bl	8001d80 <LL_ADC_IsInternalRegulatorEnabled>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d115      	bne.n	8001efe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ff3e 	bl	8001d58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001edc:	4b9f      	ldr	r3, [pc, #636]	; (800215c <HAL_ADC_Init+0x2f0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	099b      	lsrs	r3, r3, #6
 8001ee2:	4a9f      	ldr	r2, [pc, #636]	; (8002160 <HAL_ADC_Init+0x2f4>)
 8001ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee8:	099b      	lsrs	r3, r3, #6
 8001eea:	3301      	adds	r3, #1
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ef0:	e002      	b.n	8001ef8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f9      	bne.n	8001ef2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ff3c 	bl	8001d80 <LL_ADC_IsInternalRegulatorEnabled>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10d      	bne.n	8001f2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f12:	f043 0210 	orr.w	r2, r3, #16
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1e:	f043 0201 	orr.w	r2, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff ff75 	bl	8001e1e <LL_ADC_REG_IsConversionOngoing>
 8001f34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f040 8148 	bne.w	80021d4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f040 8144 	bne.w	80021d4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f50:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f54:	f043 0202 	orr.w	r2, r3, #2
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff35 	bl	8001dd0 <LL_ADC_IsEnabled>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d141      	bne.n	8001ff0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f74:	d004      	beq.n	8001f80 <HAL_ADC_Init+0x114>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a7a      	ldr	r2, [pc, #488]	; (8002164 <HAL_ADC_Init+0x2f8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d10f      	bne.n	8001fa0 <HAL_ADC_Init+0x134>
 8001f80:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f84:	f7ff ff24 	bl	8001dd0 <LL_ADC_IsEnabled>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	4876      	ldr	r0, [pc, #472]	; (8002164 <HAL_ADC_Init+0x2f8>)
 8001f8c:	f7ff ff20 	bl	8001dd0 <LL_ADC_IsEnabled>
 8001f90:	4603      	mov	r3, r0
 8001f92:	4323      	orrs	r3, r4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	e012      	b.n	8001fc6 <HAL_ADC_Init+0x15a>
 8001fa0:	4871      	ldr	r0, [pc, #452]	; (8002168 <HAL_ADC_Init+0x2fc>)
 8001fa2:	f7ff ff15 	bl	8001dd0 <LL_ADC_IsEnabled>
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	4870      	ldr	r0, [pc, #448]	; (800216c <HAL_ADC_Init+0x300>)
 8001faa:	f7ff ff11 	bl	8001dd0 <LL_ADC_IsEnabled>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	431c      	orrs	r4, r3
 8001fb2:	486f      	ldr	r0, [pc, #444]	; (8002170 <HAL_ADC_Init+0x304>)
 8001fb4:	f7ff ff0c 	bl	8001dd0 <LL_ADC_IsEnabled>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	4323      	orrs	r3, r4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf0c      	ite	eq
 8001fc0:	2301      	moveq	r3, #1
 8001fc2:	2300      	movne	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d012      	beq.n	8001ff0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fd2:	d004      	beq.n	8001fde <HAL_ADC_Init+0x172>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a62      	ldr	r2, [pc, #392]	; (8002164 <HAL_ADC_Init+0x2f8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADC_Init+0x176>
 8001fde:	4a65      	ldr	r2, [pc, #404]	; (8002174 <HAL_ADC_Init+0x308>)
 8001fe0:	e000      	b.n	8001fe4 <HAL_ADC_Init+0x178>
 8001fe2:	4a65      	ldr	r2, [pc, #404]	; (8002178 <HAL_ADC_Init+0x30c>)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4610      	mov	r0, r2
 8001fec:	f7ff fcfe 	bl	80019ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	7f5b      	ldrb	r3, [r3, #29]
 8001ff4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ffa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002000:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002006:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800200e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800201a:	2b01      	cmp	r3, #1
 800201c:	d106      	bne.n	800202c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	3b01      	subs	r3, #1
 8002024:	045b      	lsls	r3, r3, #17
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	2b00      	cmp	r3, #0
 8002032:	d009      	beq.n	8002048 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	4b4b      	ldr	r3, [pc, #300]	; (800217c <HAL_ADC_Init+0x310>)
 8002050:	4013      	ands	r3, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	69b9      	ldr	r1, [r7, #24]
 8002058:	430b      	orrs	r3, r1
 800205a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fed1 	bl	8001e1e <LL_ADC_REG_IsConversionOngoing>
 800207c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fede 	bl	8001e44 <LL_ADC_INJ_IsConversionOngoing>
 8002088:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d17f      	bne.n	8002190 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d17c      	bne.n	8002190 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800209a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020a2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020b2:	f023 0302 	bic.w	r3, r3, #2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	69b9      	ldr	r1, [r7, #24]
 80020bc:	430b      	orrs	r3, r1
 80020be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d017      	beq.n	80020f8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6911      	ldr	r1, [r2, #16]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	430b      	orrs	r3, r1
 80020f2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80020f6:	e013      	b.n	8002120 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002106:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002118:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800211c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002126:	2b01      	cmp	r3, #1
 8002128:	d12a      	bne.n	8002180 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002140:	4311      	orrs	r1, r2
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002146:	4311      	orrs	r1, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800214c:	430a      	orrs	r2, r1
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	611a      	str	r2, [r3, #16]
 800215a:	e019      	b.n	8002190 <HAL_ADC_Init+0x324>
 800215c:	20000010 	.word	0x20000010
 8002160:	053e2d63 	.word	0x053e2d63
 8002164:	50000100 	.word	0x50000100
 8002168:	50000400 	.word	0x50000400
 800216c:	50000500 	.word	0x50000500
 8002170:	50000600 	.word	0x50000600
 8002174:	50000300 	.word	0x50000300
 8002178:	50000700 	.word	0x50000700
 800217c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691a      	ldr	r2, [r3, #16]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0201 	bic.w	r2, r2, #1
 800218e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d10c      	bne.n	80021b2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f023 010f 	bic.w	r1, r3, #15
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	1e5a      	subs	r2, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
 80021b0:	e007      	b.n	80021c2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 020f 	bic.w	r2, r2, #15
 80021c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c6:	f023 0303 	bic.w	r3, r3, #3
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80021d2:	e007      	b.n	80021e4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	f043 0210 	orr.w	r2, r3, #16
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3724      	adds	r7, #36	; 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd90      	pop	{r4, r7, pc}
 80021ee:	bf00      	nop

080021f0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002200:	d004      	beq.n	800220c <HAL_ADC_Start_IT+0x1c>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a93      	ldr	r2, [pc, #588]	; (8002454 <HAL_ADC_Start_IT+0x264>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d101      	bne.n	8002210 <HAL_ADC_Start_IT+0x20>
 800220c:	4b92      	ldr	r3, [pc, #584]	; (8002458 <HAL_ADC_Start_IT+0x268>)
 800220e:	e000      	b.n	8002212 <HAL_ADC_Start_IT+0x22>
 8002210:	4b92      	ldr	r3, [pc, #584]	; (800245c <HAL_ADC_Start_IT+0x26c>)
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fd5e 	bl	8001cd4 <LL_ADC_GetMultimode>
 8002218:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fdfd 	bl	8001e1e <LL_ADC_REG_IsConversionOngoing>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	f040 8134 	bne.w	8002494 <HAL_ADC_Start_IT+0x2a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_ADC_Start_IT+0x4a>
 8002236:	2302      	movs	r3, #2
 8002238:	e131      	b.n	800249e <HAL_ADC_Start_IT+0x2ae>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 ffec 	bl	8003220 <ADC_Enable>
 8002248:	4603      	mov	r3, r0
 800224a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800224c:	7dfb      	ldrb	r3, [r7, #23]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f040 811b 	bne.w	800248a <HAL_ADC_Start_IT+0x29a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002258:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a79      	ldr	r2, [pc, #484]	; (8002454 <HAL_ADC_Start_IT+0x264>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d009      	beq.n	8002286 <HAL_ADC_Start_IT+0x96>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a7a      	ldr	r2, [pc, #488]	; (8002460 <HAL_ADC_Start_IT+0x270>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d002      	beq.n	8002282 <HAL_ADC_Start_IT+0x92>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	e003      	b.n	800228a <HAL_ADC_Start_IT+0x9a>
 8002282:	4b78      	ldr	r3, [pc, #480]	; (8002464 <HAL_ADC_Start_IT+0x274>)
 8002284:	e001      	b.n	800228a <HAL_ADC_Start_IT+0x9a>
 8002286:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	4293      	cmp	r3, r2
 8002290:	d002      	beq.n	8002298 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d105      	bne.n	80022a4 <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d006      	beq.n	80022be <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b4:	f023 0206 	bic.w	r2, r3, #6
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	661a      	str	r2, [r3, #96]	; 0x60
 80022bc:	e002      	b.n	80022c4 <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	221c      	movs	r2, #28
 80022ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 021c 	bic.w	r2, r2, #28
 80022e2:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d108      	bne.n	80022fe <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0208 	orr.w	r2, r2, #8
 80022fa:	605a      	str	r2, [r3, #4]
          break;
 80022fc:	e008      	b.n	8002310 <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 0204 	orr.w	r2, r2, #4
 800230c:	605a      	str	r2, [r3, #4]
          break;
 800230e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d107      	bne.n	8002328 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0210 	orr.w	r2, r2, #16
 8002326:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a49      	ldr	r2, [pc, #292]	; (8002454 <HAL_ADC_Start_IT+0x264>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d009      	beq.n	8002346 <HAL_ADC_Start_IT+0x156>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a4a      	ldr	r2, [pc, #296]	; (8002460 <HAL_ADC_Start_IT+0x270>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d002      	beq.n	8002342 <HAL_ADC_Start_IT+0x152>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	e003      	b.n	800234a <HAL_ADC_Start_IT+0x15a>
 8002342:	4b48      	ldr	r3, [pc, #288]	; (8002464 <HAL_ADC_Start_IT+0x274>)
 8002344:	e001      	b.n	800234a <HAL_ADC_Start_IT+0x15a>
 8002346:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	4293      	cmp	r3, r2
 8002350:	d008      	beq.n	8002364 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	2b05      	cmp	r3, #5
 800235c:	d002      	beq.n	8002364 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	2b09      	cmp	r3, #9
 8002362:	d13b      	bne.n	80023dc <HAL_ADC_Start_IT+0x1ec>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d02d      	beq.n	80023ce <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002376:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800237a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b08      	cmp	r3, #8
 8002388:	d110      	bne.n	80023ac <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0220 	bic.w	r2, r2, #32
 8002398:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023a8:	605a      	str	r2, [r3, #4]
              break;
 80023aa:	e011      	b.n	80023d0 <HAL_ADC_Start_IT+0x1e0>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ba:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0220 	orr.w	r2, r2, #32
 80023ca:	605a      	str	r2, [r3, #4]
              break;
 80023cc:	e000      	b.n	80023d0 <HAL_ADC_Start_IT+0x1e0>
          }
        }
 80023ce:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fd0e 	bl	8001df6 <LL_ADC_REG_StartConversion>
 80023da:	e05f      	b.n	800249c <HAL_ADC_Start_IT+0x2ac>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a19      	ldr	r2, [pc, #100]	; (8002454 <HAL_ADC_Start_IT+0x264>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d009      	beq.n	8002406 <HAL_ADC_Start_IT+0x216>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1a      	ldr	r2, [pc, #104]	; (8002460 <HAL_ADC_Start_IT+0x270>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d002      	beq.n	8002402 <HAL_ADC_Start_IT+0x212>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	e003      	b.n	800240a <HAL_ADC_Start_IT+0x21a>
 8002402:	4b18      	ldr	r3, [pc, #96]	; (8002464 <HAL_ADC_Start_IT+0x274>)
 8002404:	e001      	b.n	800240a <HAL_ADC_Start_IT+0x21a>
 8002406:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800240a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d040      	beq.n	800249a <HAL_ADC_Start_IT+0x2aa>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002420:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	2b08      	cmp	r3, #8
 800242e:	d11b      	bne.n	8002468 <HAL_ADC_Start_IT+0x278>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0220 	bic.w	r2, r2, #32
 800243e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800244e:	605a      	str	r2, [r3, #4]
              break;
 8002450:	e024      	b.n	800249c <HAL_ADC_Start_IT+0x2ac>
 8002452:	bf00      	nop
 8002454:	50000100 	.word	0x50000100
 8002458:	50000300 	.word	0x50000300
 800245c:	50000700 	.word	0x50000700
 8002460:	50000500 	.word	0x50000500
 8002464:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002476:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0220 	orr.w	r2, r2, #32
 8002486:	605a      	str	r2, [r3, #4]
              break;
 8002488:	e008      	b.n	800249c <HAL_ADC_Start_IT+0x2ac>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002492:	e003      	b.n	800249c <HAL_ADC_Start_IT+0x2ac>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002494:	2302      	movs	r3, #2
 8002496:	75fb      	strb	r3, [r7, #23]
 8002498:	e000      	b.n	800249c <HAL_ADC_Start_IT+0x2ac>
        }
 800249a:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 800249c:	7dfb      	ldrb	r3, [r7, #23]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop

080024a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80024cc:	2300      	movs	r3, #0
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024e8:	d004      	beq.n	80024f4 <HAL_ADC_IRQHandler+0x30>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a95      	ldr	r2, [pc, #596]	; (8002744 <HAL_ADC_IRQHandler+0x280>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_IRQHandler+0x34>
 80024f4:	4b94      	ldr	r3, [pc, #592]	; (8002748 <HAL_ADC_IRQHandler+0x284>)
 80024f6:	e000      	b.n	80024fa <HAL_ADC_IRQHandler+0x36>
 80024f8:	4b94      	ldr	r3, [pc, #592]	; (800274c <HAL_ADC_IRQHandler+0x288>)
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fbea 	bl	8001cd4 <LL_ADC_GetMultimode>
 8002500:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d017      	beq.n	800253c <HAL_ADC_IRQHandler+0x78>
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d012      	beq.n	800253c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251a:	f003 0310 	and.w	r3, r3, #16
 800251e:	2b00      	cmp	r3, #0
 8002520:	d105      	bne.n	800252e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 ff26 	bl	8003380 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2202      	movs	r2, #2
 800253a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b00      	cmp	r3, #0
 8002544:	d004      	beq.n	8002550 <HAL_ADC_IRQHandler+0x8c>
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10b      	bne.n	8002568 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 8094 	beq.w	8002684 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 808e 	beq.w	8002684 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256c:	f003 0310 	and.w	r3, r3, #16
 8002570:	2b00      	cmp	r3, #0
 8002572:	d105      	bne.n	8002580 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002578:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fb03 	bl	8001b90 <LL_ADC_REG_IsTriggerSourceSWStart>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d072      	beq.n	8002676 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a6b      	ldr	r2, [pc, #428]	; (8002744 <HAL_ADC_IRQHandler+0x280>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d009      	beq.n	80025ae <HAL_ADC_IRQHandler+0xea>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6c      	ldr	r2, [pc, #432]	; (8002750 <HAL_ADC_IRQHandler+0x28c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d002      	beq.n	80025aa <HAL_ADC_IRQHandler+0xe6>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	e003      	b.n	80025b2 <HAL_ADC_IRQHandler+0xee>
 80025aa:	4b6a      	ldr	r3, [pc, #424]	; (8002754 <HAL_ADC_IRQHandler+0x290>)
 80025ac:	e001      	b.n	80025b2 <HAL_ADC_IRQHandler+0xee>
 80025ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d008      	beq.n	80025cc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d002      	beq.n	80025cc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2b09      	cmp	r3, #9
 80025ca:	d104      	bne.n	80025d6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	623b      	str	r3, [r7, #32]
 80025d4:	e014      	b.n	8002600 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a5a      	ldr	r2, [pc, #360]	; (8002744 <HAL_ADC_IRQHandler+0x280>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d009      	beq.n	80025f4 <HAL_ADC_IRQHandler+0x130>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a5a      	ldr	r2, [pc, #360]	; (8002750 <HAL_ADC_IRQHandler+0x28c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d002      	beq.n	80025f0 <HAL_ADC_IRQHandler+0x12c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	e003      	b.n	80025f8 <HAL_ADC_IRQHandler+0x134>
 80025f0:	4b58      	ldr	r3, [pc, #352]	; (8002754 <HAL_ADC_IRQHandler+0x290>)
 80025f2:	e001      	b.n	80025f8 <HAL_ADC_IRQHandler+0x134>
 80025f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025f8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d135      	bne.n	8002676 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b08      	cmp	r3, #8
 8002616:	d12e      	bne.n	8002676 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fbfe 	bl	8001e1e <LL_ADC_REG_IsConversionOngoing>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d11a      	bne.n	800265e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 020c 	bic.w	r2, r2, #12
 8002636:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d112      	bne.n	8002676 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002654:	f043 0201 	orr.w	r2, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	65da      	str	r2, [r3, #92]	; 0x5c
 800265c:	e00b      	b.n	8002676 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002662:	f043 0210 	orr.w	r2, r3, #16
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266e:	f043 0201 	orr.w	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe fd08 	bl	800108c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	220c      	movs	r2, #12
 8002682:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f003 0320 	and.w	r3, r3, #32
 800268a:	2b00      	cmp	r3, #0
 800268c:	d004      	beq.n	8002698 <HAL_ADC_IRQHandler+0x1d4>
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10b      	bne.n	80026b0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 80b2 	beq.w	8002808 <HAL_ADC_IRQHandler+0x344>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80ac 	beq.w	8002808 <HAL_ADC_IRQHandler+0x344>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d105      	bne.n	80026c8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fa9e 	bl	8001c0e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80026d2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff fa59 	bl	8001b90 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026de:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a17      	ldr	r2, [pc, #92]	; (8002744 <HAL_ADC_IRQHandler+0x280>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d009      	beq.n	80026fe <HAL_ADC_IRQHandler+0x23a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a18      	ldr	r2, [pc, #96]	; (8002750 <HAL_ADC_IRQHandler+0x28c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d002      	beq.n	80026fa <HAL_ADC_IRQHandler+0x236>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	e003      	b.n	8002702 <HAL_ADC_IRQHandler+0x23e>
 80026fa:	4b16      	ldr	r3, [pc, #88]	; (8002754 <HAL_ADC_IRQHandler+0x290>)
 80026fc:	e001      	b.n	8002702 <HAL_ADC_IRQHandler+0x23e>
 80026fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	4293      	cmp	r3, r2
 8002708:	d008      	beq.n	800271c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	2b06      	cmp	r3, #6
 8002714:	d002      	beq.n	800271c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b07      	cmp	r3, #7
 800271a:	d104      	bne.n	8002726 <HAL_ADC_IRQHandler+0x262>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	623b      	str	r3, [r7, #32]
 8002724:	e01e      	b.n	8002764 <HAL_ADC_IRQHandler+0x2a0>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a06      	ldr	r2, [pc, #24]	; (8002744 <HAL_ADC_IRQHandler+0x280>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d013      	beq.n	8002758 <HAL_ADC_IRQHandler+0x294>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a06      	ldr	r2, [pc, #24]	; (8002750 <HAL_ADC_IRQHandler+0x28c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d002      	beq.n	8002740 <HAL_ADC_IRQHandler+0x27c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	e00d      	b.n	800275c <HAL_ADC_IRQHandler+0x298>
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <HAL_ADC_IRQHandler+0x290>)
 8002742:	e00b      	b.n	800275c <HAL_ADC_IRQHandler+0x298>
 8002744:	50000100 	.word	0x50000100
 8002748:	50000300 	.word	0x50000300
 800274c:	50000700 	.word	0x50000700
 8002750:	50000500 	.word	0x50000500
 8002754:	50000400 	.word	0x50000400
 8002758:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800275c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d047      	beq.n	80027fa <HAL_ADC_IRQHandler+0x336>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <HAL_ADC_IRQHandler+0x2c0>
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d03f      	beq.n	80027fa <HAL_ADC_IRQHandler+0x336>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002780:	2b00      	cmp	r3, #0
 8002782:	d13a      	bne.n	80027fa <HAL_ADC_IRQHandler+0x336>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278e:	2b40      	cmp	r3, #64	; 0x40
 8002790:	d133      	bne.n	80027fa <HAL_ADC_IRQHandler+0x336>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d12e      	bne.n	80027fa <HAL_ADC_IRQHandler+0x336>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fb4f 	bl	8001e44 <LL_ADC_INJ_IsConversionOngoing>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d11a      	bne.n	80027e2 <HAL_ADC_IRQHandler+0x31e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027ba:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d112      	bne.n	80027fa <HAL_ADC_IRQHandler+0x336>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d8:	f043 0201 	orr.w	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	65da      	str	r2, [r3, #92]	; 0x5c
 80027e0:	e00b      	b.n	80027fa <HAL_ADC_IRQHandler+0x336>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e6:	f043 0210 	orr.w	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fd98 	bl	8003330 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2260      	movs	r2, #96	; 0x60
 8002806:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280e:	2b00      	cmp	r3, #0
 8002810:	d011      	beq.n	8002836 <HAL_ADC_IRQHandler+0x372>
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00c      	beq.n	8002836 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002820:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f8a5 	bl	8002978 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2280      	movs	r2, #128	; 0x80
 8002834:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283c:	2b00      	cmp	r3, #0
 800283e:	d012      	beq.n	8002866 <HAL_ADC_IRQHandler+0x3a2>
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00d      	beq.n	8002866 <HAL_ADC_IRQHandler+0x3a2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fd7e 	bl	8003358 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002864:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286c:	2b00      	cmp	r3, #0
 800286e:	d012      	beq.n	8002896 <HAL_ADC_IRQHandler+0x3d2>
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00d      	beq.n	8002896 <HAL_ADC_IRQHandler+0x3d2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 fd70 	bl	800336c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002894:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b00      	cmp	r3, #0
 800289e:	d043      	beq.n	8002928 <HAL_ADC_IRQHandler+0x464>
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d03e      	beq.n	8002928 <HAL_ADC_IRQHandler+0x464>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <HAL_ADC_IRQHandler+0x3f4>
    {
      overrun_error = 1UL;
 80028b2:	2301      	movs	r3, #1
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
 80028b6:	e021      	b.n	80028fc <HAL_ADC_IRQHandler+0x438>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d015      	beq.n	80028ea <HAL_ADC_IRQHandler+0x426>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028c6:	d004      	beq.n	80028d2 <HAL_ADC_IRQHandler+0x40e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a27      	ldr	r2, [pc, #156]	; (800296c <HAL_ADC_IRQHandler+0x4a8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_IRQHandler+0x412>
 80028d2:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_ADC_IRQHandler+0x4ac>)
 80028d4:	e000      	b.n	80028d8 <HAL_ADC_IRQHandler+0x414>
 80028d6:	4b27      	ldr	r3, [pc, #156]	; (8002974 <HAL_ADC_IRQHandler+0x4b0>)
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fa09 	bl	8001cf0 <LL_ADC_GetMultiDMATransfer>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00b      	beq.n	80028fc <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 80028e4:	2301      	movs	r3, #1
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
 80028e8:	e008      	b.n	80028fc <HAL_ADC_IRQHandler+0x438>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 80028f8:	2301      	movs	r3, #1
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d10e      	bne.n	8002920 <HAL_ADC_IRQHandler+0x45c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002906:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002912:	f043 0202 	orr.w	r2, r3, #2
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f836 	bl	800298c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2210      	movs	r2, #16
 8002926:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292e:	2b00      	cmp	r3, #0
 8002930:	d018      	beq.n	8002964 <HAL_ADC_IRQHandler+0x4a0>
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002938:	2b00      	cmp	r3, #0
 800293a:	d013      	beq.n	8002964 <HAL_ADC_IRQHandler+0x4a0>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002940:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800294c:	f043 0208 	orr.w	r2, r3, #8
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800295c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fcf0 	bl	8003344 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002964:	bf00      	nop
 8002966:	3728      	adds	r7, #40	; 0x28
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	50000100 	.word	0x50000100
 8002970:	50000300 	.word	0x50000300
 8002974:	50000700 	.word	0x50000700

08002978 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b0b6      	sub	sp, #216	; 0xd8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d102      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x24>
 80029be:	2302      	movs	r3, #2
 80029c0:	f000 bc13 	b.w	80031ea <HAL_ADC_ConfigChannel+0x84a>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fa24 	bl	8001e1e <LL_ADC_REG_IsConversionOngoing>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f040 83f3 	bne.w	80031c4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6859      	ldr	r1, [r3, #4]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	f7ff f8e3 	bl	8001bb6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fa12 	bl	8001e1e <LL_ADC_REG_IsConversionOngoing>
 80029fa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fa1e 	bl	8001e44 <LL_ADC_INJ_IsConversionOngoing>
 8002a08:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f040 81d9 	bne.w	8002dc8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f040 81d4 	bne.w	8002dc8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a28:	d10f      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2200      	movs	r2, #0
 8002a34:	4619      	mov	r1, r3
 8002a36:	f7ff f8fd 	bl	8001c34 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff f891 	bl	8001b6a <LL_ADC_SetSamplingTimeCommonConfig>
 8002a48:	e00e      	b.n	8002a68 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6819      	ldr	r1, [r3, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f7ff f8ec 	bl	8001c34 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2100      	movs	r1, #0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff f881 	bl	8001b6a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	695a      	ldr	r2, [r3, #20]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	08db      	lsrs	r3, r3, #3
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d022      	beq.n	8002ad0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6919      	ldr	r1, [r3, #16]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a9a:	f7fe ffdb 	bl	8001a54 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6919      	ldr	r1, [r3, #16]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f7ff f827 	bl	8001afe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	6919      	ldr	r1, [r3, #16]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	7f1b      	ldrb	r3, [r3, #28]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d102      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x126>
 8002ac0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ac4:	e000      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x128>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	461a      	mov	r2, r3
 8002aca:	f7ff f833 	bl	8001b34 <LL_ADC_SetOffsetSaturation>
 8002ace:	e17b      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe ffe0 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10a      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x15c>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2100      	movs	r1, #0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fe ffd5 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 8002af2:	4603      	mov	r3, r0
 8002af4:	0e9b      	lsrs	r3, r3, #26
 8002af6:	f003 021f 	and.w	r2, r3, #31
 8002afa:	e01e      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x19a>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe ffca 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	e004      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002b2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d105      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x1b2>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	0e9b      	lsrs	r3, r3, #26
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	e018      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x1e4>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002b6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002b76:	2320      	movs	r3, #32
 8002b78:	e004      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002b7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b7e:	fab3 f383 	clz	r3, r3
 8002b82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d106      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2100      	movs	r1, #0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe ff99 	bl	8001ac8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe ff7d 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10a      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x222>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe ff72 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	0e9b      	lsrs	r3, r3, #26
 8002bbc:	f003 021f 	and.w	r2, r3, #31
 8002bc0:	e01e      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x260>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe ff67 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002bd8:	fa93 f3a3 	rbit	r3, r3
 8002bdc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002be0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002be4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002be8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002bf0:	2320      	movs	r3, #32
 8002bf2:	e004      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002bf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bf8:	fab3 f383 	clz	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d105      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x278>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	0e9b      	lsrs	r3, r3, #26
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	e018      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x2aa>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002c3c:	2320      	movs	r3, #32
 8002c3e:	e004      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002c40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c44:	fab3 f383 	clz	r3, r3
 8002c48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d106      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2200      	movs	r2, #0
 8002c54:	2101      	movs	r1, #1
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe ff36 	bl	8001ac8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2102      	movs	r1, #2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe ff1a 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10a      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x2e8>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2102      	movs	r1, #2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe ff0f 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	0e9b      	lsrs	r3, r3, #26
 8002c82:	f003 021f 	and.w	r2, r3, #31
 8002c86:	e01e      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x326>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2102      	movs	r1, #2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe ff04 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002ca6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002caa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002cae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	e004      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002cba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d105      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x33e>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	0e9b      	lsrs	r3, r3, #26
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	e016      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x36c>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002cf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002cf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002cfe:	2320      	movs	r3, #32
 8002d00:	e004      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002d02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d106      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2200      	movs	r2, #0
 8002d16:	2102      	movs	r1, #2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe fed5 	bl	8001ac8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2103      	movs	r1, #3
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe feb9 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x3aa>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2103      	movs	r1, #3
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fe feae 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 8002d40:	4603      	mov	r3, r0
 8002d42:	0e9b      	lsrs	r3, r3, #26
 8002d44:	f003 021f 	and.w	r2, r3, #31
 8002d48:	e017      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x3da>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2103      	movs	r1, #3
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fe fea3 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 8002d56:	4603      	mov	r3, r0
 8002d58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d64:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002d66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002d6c:	2320      	movs	r3, #32
 8002d6e:	e003      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002d70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d105      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x3f2>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	0e9b      	lsrs	r3, r3, #26
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	e011      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x416>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002da2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002daa:	2320      	movs	r3, #32
 8002dac:	e003      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db0:	fab3 f383 	clz	r3, r3
 8002db4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d106      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2103      	movs	r1, #3
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe fe80 	bl	8001ac8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe ffff 	bl	8001dd0 <LL_ADC_IsEnabled>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f040 813d 	bne.w	8003054 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6819      	ldr	r1, [r3, #0]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	461a      	mov	r2, r3
 8002de8:	f7fe ff50 	bl	8001c8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4aa2      	ldr	r2, [pc, #648]	; (800307c <HAL_ADC_ConfigChannel+0x6dc>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	f040 812e 	bne.w	8003054 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10b      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x480>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	0e9b      	lsrs	r3, r3, #26
 8002e0e:	3301      	adds	r3, #1
 8002e10:	f003 031f 	and.w	r3, r3, #31
 8002e14:	2b09      	cmp	r3, #9
 8002e16:	bf94      	ite	ls
 8002e18:	2301      	movls	r3, #1
 8002e1a:	2300      	movhi	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	e019      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x4b4>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e30:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002e38:	2320      	movs	r3, #32
 8002e3a:	e003      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002e3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	3301      	adds	r3, #1
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	2b09      	cmp	r3, #9
 8002e4c:	bf94      	ite	ls
 8002e4e:	2301      	movls	r3, #1
 8002e50:	2300      	movhi	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d079      	beq.n	8002f4c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d107      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x4d4>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	0e9b      	lsrs	r3, r3, #26
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	069b      	lsls	r3, r3, #26
 8002e6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e72:	e015      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x500>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e84:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002e8c:	2320      	movs	r3, #32
 8002e8e:	e003      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	3301      	adds	r3, #1
 8002e9a:	069b      	lsls	r3, r3, #26
 8002e9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x520>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0e9b      	lsrs	r3, r3, #26
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	2101      	movs	r1, #1
 8002eba:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebe:	e017      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x550>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002ed8:	2320      	movs	r3, #32
 8002eda:	e003      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	2101      	movs	r1, #1
 8002eec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef0:	ea42 0103 	orr.w	r1, r2, r3
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10a      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x576>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	0e9b      	lsrs	r3, r3, #26
 8002f06:	3301      	adds	r3, #1
 8002f08:	f003 021f 	and.w	r2, r3, #31
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	051b      	lsls	r3, r3, #20
 8002f14:	e018      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x5a8>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002f2e:	2320      	movs	r3, #32
 8002f30:	e003      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f34:	fab3 f383 	clz	r3, r3
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	f003 021f 	and.w	r2, r3, #31
 8002f40:	4613      	mov	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4413      	add	r3, r2
 8002f46:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	e07e      	b.n	800304a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d107      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x5c8>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	0e9b      	lsrs	r3, r3, #26
 8002f5e:	3301      	adds	r3, #1
 8002f60:	069b      	lsls	r3, r3, #26
 8002f62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f66:	e015      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x5f4>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f70:	fa93 f3a3 	rbit	r3, r3
 8002f74:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002f80:	2320      	movs	r3, #32
 8002f82:	e003      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	069b      	lsls	r3, r3, #26
 8002f90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d109      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x614>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	0e9b      	lsrs	r3, r3, #26
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	2101      	movs	r1, #1
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	e017      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x644>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	fa93 f3a3 	rbit	r3, r3
 8002fc0:	61fb      	str	r3, [r7, #28]
  return result;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002fcc:	2320      	movs	r3, #32
 8002fce:	e003      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	3301      	adds	r3, #1
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	2101      	movs	r1, #1
 8002fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe4:	ea42 0103 	orr.w	r1, r2, r3
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10d      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x670>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	0e9b      	lsrs	r3, r3, #26
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f003 021f 	and.w	r2, r3, #31
 8003000:	4613      	mov	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4413      	add	r3, r2
 8003006:	3b1e      	subs	r3, #30
 8003008:	051b      	lsls	r3, r3, #20
 800300a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800300e:	e01b      	b.n	8003048 <HAL_ADC_ConfigChannel+0x6a8>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	fa93 f3a3 	rbit	r3, r3
 800301c:	613b      	str	r3, [r7, #16]
  return result;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003028:	2320      	movs	r3, #32
 800302a:	e003      	b.n	8003034 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	3301      	adds	r3, #1
 8003036:	f003 021f 	and.w	r2, r3, #31
 800303a:	4613      	mov	r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	4413      	add	r3, r2
 8003040:	3b1e      	subs	r3, #30
 8003042:	051b      	lsls	r3, r3, #20
 8003044:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003048:	430b      	orrs	r3, r1
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	6892      	ldr	r2, [r2, #8]
 800304e:	4619      	mov	r1, r3
 8003050:	f7fe fdf0 	bl	8001c34 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_ADC_ConfigChannel+0x6e0>)
 800305a:	4013      	ands	r3, r2
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80be 	beq.w	80031de <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800306a:	d004      	beq.n	8003076 <HAL_ADC_ConfigChannel+0x6d6>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a04      	ldr	r2, [pc, #16]	; (8003084 <HAL_ADC_ConfigChannel+0x6e4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d10a      	bne.n	800308c <HAL_ADC_ConfigChannel+0x6ec>
 8003076:	4b04      	ldr	r3, [pc, #16]	; (8003088 <HAL_ADC_ConfigChannel+0x6e8>)
 8003078:	e009      	b.n	800308e <HAL_ADC_ConfigChannel+0x6ee>
 800307a:	bf00      	nop
 800307c:	407f0000 	.word	0x407f0000
 8003080:	80080000 	.word	0x80080000
 8003084:	50000100 	.word	0x50000100
 8003088:	50000300 	.word	0x50000300
 800308c:	4b59      	ldr	r3, [pc, #356]	; (80031f4 <HAL_ADC_ConfigChannel+0x854>)
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe fcd2 	bl	8001a38 <LL_ADC_GetCommonPathInternalCh>
 8003094:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a56      	ldr	r2, [pc, #344]	; (80031f8 <HAL_ADC_ConfigChannel+0x858>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d004      	beq.n	80030ac <HAL_ADC_ConfigChannel+0x70c>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a55      	ldr	r2, [pc, #340]	; (80031fc <HAL_ADC_ConfigChannel+0x85c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d13a      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d134      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030c0:	d005      	beq.n	80030ce <HAL_ADC_ConfigChannel+0x72e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a4e      	ldr	r2, [pc, #312]	; (8003200 <HAL_ADC_ConfigChannel+0x860>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	f040 8085 	bne.w	80031d8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030d6:	d004      	beq.n	80030e2 <HAL_ADC_ConfigChannel+0x742>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a49      	ldr	r2, [pc, #292]	; (8003204 <HAL_ADC_ConfigChannel+0x864>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d101      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x746>
 80030e2:	4a49      	ldr	r2, [pc, #292]	; (8003208 <HAL_ADC_ConfigChannel+0x868>)
 80030e4:	e000      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x748>
 80030e6:	4a43      	ldr	r2, [pc, #268]	; (80031f4 <HAL_ADC_ConfigChannel+0x854>)
 80030e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030f0:	4619      	mov	r1, r3
 80030f2:	4610      	mov	r0, r2
 80030f4:	f7fe fc8d 	bl	8001a12 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030f8:	4b44      	ldr	r3, [pc, #272]	; (800320c <HAL_ADC_ConfigChannel+0x86c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	099b      	lsrs	r3, r3, #6
 80030fe:	4a44      	ldr	r2, [pc, #272]	; (8003210 <HAL_ADC_ConfigChannel+0x870>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	099b      	lsrs	r3, r3, #6
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	4613      	mov	r3, r2
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003112:	e002      	b.n	800311a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	3b01      	subs	r3, #1
 8003118:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f9      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003120:	e05a      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a3b      	ldr	r2, [pc, #236]	; (8003214 <HAL_ADC_ConfigChannel+0x874>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d125      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x7d8>
 800312c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d11f      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a31      	ldr	r2, [pc, #196]	; (8003204 <HAL_ADC_ConfigChannel+0x864>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d104      	bne.n	800314c <HAL_ADC_ConfigChannel+0x7ac>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a34      	ldr	r2, [pc, #208]	; (8003218 <HAL_ADC_ConfigChannel+0x878>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d047      	beq.n	80031dc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003154:	d004      	beq.n	8003160 <HAL_ADC_ConfigChannel+0x7c0>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a2a      	ldr	r2, [pc, #168]	; (8003204 <HAL_ADC_ConfigChannel+0x864>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d101      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x7c4>
 8003160:	4a29      	ldr	r2, [pc, #164]	; (8003208 <HAL_ADC_ConfigChannel+0x868>)
 8003162:	e000      	b.n	8003166 <HAL_ADC_ConfigChannel+0x7c6>
 8003164:	4a23      	ldr	r2, [pc, #140]	; (80031f4 <HAL_ADC_ConfigChannel+0x854>)
 8003166:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800316a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800316e:	4619      	mov	r1, r3
 8003170:	4610      	mov	r0, r2
 8003172:	f7fe fc4e 	bl	8001a12 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003176:	e031      	b.n	80031dc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a27      	ldr	r2, [pc, #156]	; (800321c <HAL_ADC_ConfigChannel+0x87c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d12d      	bne.n	80031de <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003182:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d127      	bne.n	80031de <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a1c      	ldr	r2, [pc, #112]	; (8003204 <HAL_ADC_ConfigChannel+0x864>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d022      	beq.n	80031de <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031a0:	d004      	beq.n	80031ac <HAL_ADC_ConfigChannel+0x80c>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a17      	ldr	r2, [pc, #92]	; (8003204 <HAL_ADC_ConfigChannel+0x864>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d101      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x810>
 80031ac:	4a16      	ldr	r2, [pc, #88]	; (8003208 <HAL_ADC_ConfigChannel+0x868>)
 80031ae:	e000      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x812>
 80031b0:	4a10      	ldr	r2, [pc, #64]	; (80031f4 <HAL_ADC_ConfigChannel+0x854>)
 80031b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031ba:	4619      	mov	r1, r3
 80031bc:	4610      	mov	r0, r2
 80031be:	f7fe fc28 	bl	8001a12 <LL_ADC_SetCommonPathInternalCh>
 80031c2:	e00c      	b.n	80031de <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c8:	f043 0220 	orr.w	r2, r3, #32
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80031d6:	e002      	b.n	80031de <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031d8:	bf00      	nop
 80031da:	e000      	b.n	80031de <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80031e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	37d8      	adds	r7, #216	; 0xd8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	50000700 	.word	0x50000700
 80031f8:	c3210000 	.word	0xc3210000
 80031fc:	90c00010 	.word	0x90c00010
 8003200:	50000600 	.word	0x50000600
 8003204:	50000100 	.word	0x50000100
 8003208:	50000300 	.word	0x50000300
 800320c:	20000010 	.word	0x20000010
 8003210:	053e2d63 	.word	0x053e2d63
 8003214:	c7520000 	.word	0xc7520000
 8003218:	50000500 	.word	0x50000500
 800321c:	cb840000 	.word	0xcb840000

08003220 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f7fe fdcf 	bl	8001dd0 <LL_ADC_IsEnabled>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d14d      	bne.n	80032d4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	4b28      	ldr	r3, [pc, #160]	; (80032e0 <ADC_Enable+0xc0>)
 8003240:	4013      	ands	r3, r2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00d      	beq.n	8003262 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	f043 0210 	orr.w	r2, r3, #16
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003256:	f043 0201 	orr.w	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e039      	b.n	80032d6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe fd9e 	bl	8001da8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800326c:	f7fe fb90 	bl	8001990 <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003272:	e028      	b.n	80032c6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7fe fda9 	bl	8001dd0 <LL_ADC_IsEnabled>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d104      	bne.n	800328e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe fd8d 	bl	8001da8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800328e:	f7fe fb7f 	bl	8001990 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d914      	bls.n	80032c6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d00d      	beq.n	80032c6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ae:	f043 0210 	orr.w	r2, r3, #16
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ba:	f043 0201 	orr.w	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e007      	b.n	80032d6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d1cf      	bne.n	8003274 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	8000003f 	.word	0x8000003f

080032e4 <LL_ADC_IsEnabled>:
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <LL_ADC_IsEnabled+0x18>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <LL_ADC_IsEnabled+0x1a>
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <LL_ADC_REG_IsConversionOngoing>:
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b04      	cmp	r3, #4
 800331c:	d101      	bne.n	8003322 <LL_ADC_REG_IsConversionOngoing+0x18>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003394:	b590      	push	{r4, r7, lr}
 8003396:	b0a1      	sub	sp, #132	; 0x84
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e0e7      	b.n	8003582 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80033ba:	2300      	movs	r3, #0
 80033bc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80033be:	2300      	movs	r3, #0
 80033c0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033ca:	d102      	bne.n	80033d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033cc:	4b6f      	ldr	r3, [pc, #444]	; (800358c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	e009      	b.n	80033e6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a6e      	ldr	r2, [pc, #440]	; (8003590 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d102      	bne.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80033dc:	4b6d      	ldr	r3, [pc, #436]	; (8003594 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	e001      	b.n	80033e6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e0be      	b.n	8003582 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff ff7f 	bl	800330a <LL_ADC_REG_IsConversionOngoing>
 800340c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff ff79 	bl	800330a <LL_ADC_REG_IsConversionOngoing>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	f040 80a0 	bne.w	8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003422:	2b00      	cmp	r3, #0
 8003424:	f040 809c 	bne.w	8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003430:	d004      	beq.n	800343c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a55      	ldr	r2, [pc, #340]	; (800358c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d101      	bne.n	8003440 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800343c:	4b56      	ldr	r3, [pc, #344]	; (8003598 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800343e:	e000      	b.n	8003442 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003440:	4b56      	ldr	r3, [pc, #344]	; (800359c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003442:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d04b      	beq.n	80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800344c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800345e:	035b      	lsls	r3, r3, #13
 8003460:	430b      	orrs	r3, r1
 8003462:	431a      	orrs	r2, r3
 8003464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003466:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003470:	d004      	beq.n	800347c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a45      	ldr	r2, [pc, #276]	; (800358c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d10f      	bne.n	800349c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800347c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003480:	f7ff ff30 	bl	80032e4 <LL_ADC_IsEnabled>
 8003484:	4604      	mov	r4, r0
 8003486:	4841      	ldr	r0, [pc, #260]	; (800358c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003488:	f7ff ff2c 	bl	80032e4 <LL_ADC_IsEnabled>
 800348c:	4603      	mov	r3, r0
 800348e:	4323      	orrs	r3, r4
 8003490:	2b00      	cmp	r3, #0
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	e012      	b.n	80034c2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800349c:	483c      	ldr	r0, [pc, #240]	; (8003590 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800349e:	f7ff ff21 	bl	80032e4 <LL_ADC_IsEnabled>
 80034a2:	4604      	mov	r4, r0
 80034a4:	483b      	ldr	r0, [pc, #236]	; (8003594 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80034a6:	f7ff ff1d 	bl	80032e4 <LL_ADC_IsEnabled>
 80034aa:	4603      	mov	r3, r0
 80034ac:	431c      	orrs	r4, r3
 80034ae:	483c      	ldr	r0, [pc, #240]	; (80035a0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80034b0:	f7ff ff18 	bl	80032e4 <LL_ADC_IsEnabled>
 80034b4:	4603      	mov	r3, r0
 80034b6:	4323      	orrs	r3, r4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d056      	beq.n	8003574 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034ce:	f023 030f 	bic.w	r3, r3, #15
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	6811      	ldr	r1, [r2, #0]
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	6892      	ldr	r2, [r2, #8]
 80034da:	430a      	orrs	r2, r1
 80034dc:	431a      	orrs	r2, r3
 80034de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034e0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034e2:	e047      	b.n	8003574 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034f8:	d004      	beq.n	8003504 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a23      	ldr	r2, [pc, #140]	; (800358c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d10f      	bne.n	8003524 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003504:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003508:	f7ff feec 	bl	80032e4 <LL_ADC_IsEnabled>
 800350c:	4604      	mov	r4, r0
 800350e:	481f      	ldr	r0, [pc, #124]	; (800358c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003510:	f7ff fee8 	bl	80032e4 <LL_ADC_IsEnabled>
 8003514:	4603      	mov	r3, r0
 8003516:	4323      	orrs	r3, r4
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	e012      	b.n	800354a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003524:	481a      	ldr	r0, [pc, #104]	; (8003590 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003526:	f7ff fedd 	bl	80032e4 <LL_ADC_IsEnabled>
 800352a:	4604      	mov	r4, r0
 800352c:	4819      	ldr	r0, [pc, #100]	; (8003594 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800352e:	f7ff fed9 	bl	80032e4 <LL_ADC_IsEnabled>
 8003532:	4603      	mov	r3, r0
 8003534:	431c      	orrs	r4, r3
 8003536:	481a      	ldr	r0, [pc, #104]	; (80035a0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003538:	f7ff fed4 	bl	80032e4 <LL_ADC_IsEnabled>
 800353c:	4603      	mov	r3, r0
 800353e:	4323      	orrs	r3, r4
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d012      	beq.n	8003574 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800354e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003556:	f023 030f 	bic.w	r3, r3, #15
 800355a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800355c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800355e:	e009      	b.n	8003574 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003564:	f043 0220 	orr.w	r2, r3, #32
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003572:	e000      	b.n	8003576 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003574:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800357e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003582:	4618      	mov	r0, r3
 8003584:	3784      	adds	r7, #132	; 0x84
 8003586:	46bd      	mov	sp, r7
 8003588:	bd90      	pop	{r4, r7, pc}
 800358a:	bf00      	nop
 800358c:	50000100 	.word	0x50000100
 8003590:	50000400 	.word	0x50000400
 8003594:	50000500 	.word	0x50000500
 8003598:	50000300 	.word	0x50000300
 800359c:	50000700 	.word	0x50000700
 80035a0:	50000600 	.word	0x50000600

080035a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <__NVIC_SetPriorityGrouping+0x44>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035c0:	4013      	ands	r3, r2
 80035c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035d6:	4a04      	ldr	r2, [pc, #16]	; (80035e8 <__NVIC_SetPriorityGrouping+0x44>)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	60d3      	str	r3, [r2, #12]
}
 80035dc:	bf00      	nop
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	e000ed00 	.word	0xe000ed00

080035ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035f0:	4b04      	ldr	r3, [pc, #16]	; (8003604 <__NVIC_GetPriorityGrouping+0x18>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	0a1b      	lsrs	r3, r3, #8
 80035f6:	f003 0307 	and.w	r3, r3, #7
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	2b00      	cmp	r3, #0
 8003618:	db0b      	blt.n	8003632 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	f003 021f 	and.w	r2, r3, #31
 8003620:	4907      	ldr	r1, [pc, #28]	; (8003640 <__NVIC_EnableIRQ+0x38>)
 8003622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	2001      	movs	r0, #1
 800362a:	fa00 f202 	lsl.w	r2, r0, r2
 800362e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	e000e100 	.word	0xe000e100

08003644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	6039      	str	r1, [r7, #0]
 800364e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003654:	2b00      	cmp	r3, #0
 8003656:	db0a      	blt.n	800366e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	b2da      	uxtb	r2, r3
 800365c:	490c      	ldr	r1, [pc, #48]	; (8003690 <__NVIC_SetPriority+0x4c>)
 800365e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003662:	0112      	lsls	r2, r2, #4
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	440b      	add	r3, r1
 8003668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800366c:	e00a      	b.n	8003684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	4908      	ldr	r1, [pc, #32]	; (8003694 <__NVIC_SetPriority+0x50>)
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	3b04      	subs	r3, #4
 800367c:	0112      	lsls	r2, r2, #4
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	440b      	add	r3, r1
 8003682:	761a      	strb	r2, [r3, #24]
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000e100 	.word	0xe000e100
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003698:	b480      	push	{r7}
 800369a:	b089      	sub	sp, #36	; 0x24
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f1c3 0307 	rsb	r3, r3, #7
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	bf28      	it	cs
 80036b6:	2304      	movcs	r3, #4
 80036b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3304      	adds	r3, #4
 80036be:	2b06      	cmp	r3, #6
 80036c0:	d902      	bls.n	80036c8 <NVIC_EncodePriority+0x30>
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	3b03      	subs	r3, #3
 80036c6:	e000      	b.n	80036ca <NVIC_EncodePriority+0x32>
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036cc:	f04f 32ff 	mov.w	r2, #4294967295
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43da      	mvns	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	401a      	ands	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036e0:	f04f 31ff 	mov.w	r1, #4294967295
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ea:	43d9      	mvns	r1, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f0:	4313      	orrs	r3, r2
         );
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3724      	adds	r7, #36	; 0x24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff ff4c 	bl	80035a4 <__NVIC_SetPriorityGrouping>
}
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003722:	f7ff ff63 	bl	80035ec <__NVIC_GetPriorityGrouping>
 8003726:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	6978      	ldr	r0, [r7, #20]
 800372e:	f7ff ffb3 	bl	8003698 <NVIC_EncodePriority>
 8003732:	4602      	mov	r2, r0
 8003734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003738:	4611      	mov	r1, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff ff82 	bl	8003644 <__NVIC_SetPriority>
}
 8003740:	bf00      	nop
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff ff56 	bl	8003608 <__NVIC_EnableIRQ>
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e08d      	b.n	8003892 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	4b47      	ldr	r3, [pc, #284]	; (800389c <HAL_DMA_Init+0x138>)
 800377e:	429a      	cmp	r2, r3
 8003780:	d80f      	bhi.n	80037a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	4b45      	ldr	r3, [pc, #276]	; (80038a0 <HAL_DMA_Init+0x13c>)
 800378a:	4413      	add	r3, r2
 800378c:	4a45      	ldr	r2, [pc, #276]	; (80038a4 <HAL_DMA_Init+0x140>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	009a      	lsls	r2, r3, #2
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a42      	ldr	r2, [pc, #264]	; (80038a8 <HAL_DMA_Init+0x144>)
 800379e:	641a      	str	r2, [r3, #64]	; 0x40
 80037a0:	e00e      	b.n	80037c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	4b40      	ldr	r3, [pc, #256]	; (80038ac <HAL_DMA_Init+0x148>)
 80037aa:	4413      	add	r3, r2
 80037ac:	4a3d      	ldr	r2, [pc, #244]	; (80038a4 <HAL_DMA_Init+0x140>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	009a      	lsls	r2, r3, #2
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a3c      	ldr	r2, [pc, #240]	; (80038b0 <HAL_DMA_Init+0x14c>)
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80037d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f9b6 	bl	8003b84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003820:	d102      	bne.n	8003828 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800383c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d010      	beq.n	8003868 <HAL_DMA_Init+0x104>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b04      	cmp	r3, #4
 800384c:	d80c      	bhi.n	8003868 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f9d6 	bl	8003c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	e008      	b.n	800387a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40020407 	.word	0x40020407
 80038a0:	bffdfff8 	.word	0xbffdfff8
 80038a4:	cccccccd 	.word	0xcccccccd
 80038a8:	40020000 	.word	0x40020000
 80038ac:	bffdfbf8 	.word	0xbffdfbf8
 80038b0:	40020400 	.word	0x40020400

080038b4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <HAL_DMA_Start_IT+0x20>
 80038d0:	2302      	movs	r3, #2
 80038d2:	e066      	b.n	80039a2 <HAL_DMA_Start_IT+0xee>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d155      	bne.n	8003994 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0201 	bic.w	r2, r2, #1
 8003904:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	68b9      	ldr	r1, [r7, #8]
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 f8fb 	bl	8003b08 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 020e 	orr.w	r2, r2, #14
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	e00f      	b.n	800394c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0204 	bic.w	r2, r2, #4
 800393a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 020a 	orr.w	r2, r2, #10
 800394a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d007      	beq.n	800396a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003968:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003980:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0201 	orr.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	e005      	b.n	80039a0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800399c:	2302      	movs	r3, #2
 800399e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80039a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	2204      	movs	r2, #4
 80039cc:	409a      	lsls	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d026      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x7a>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d021      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d107      	bne.n	80039fe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0204 	bic.w	r2, r2, #4
 80039fc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	f003 021f 	and.w	r2, r3, #31
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	2104      	movs	r1, #4
 8003a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a10:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d071      	beq.n	8003afe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a22:	e06c      	b.n	8003afe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d02e      	beq.n	8003a96 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d029      	beq.n	8003a96 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10b      	bne.n	8003a68 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 020a 	bic.w	r2, r2, #10
 8003a5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6c:	f003 021f 	and.w	r2, r3, #31
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	2102      	movs	r1, #2
 8003a76:	fa01 f202 	lsl.w	r2, r1, r2
 8003a7a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d038      	beq.n	8003afe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a94:	e033      	b.n	8003afe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	f003 031f 	and.w	r3, r3, #31
 8003a9e:	2208      	movs	r2, #8
 8003aa0:	409a      	lsls	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d02a      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d025      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 020e 	bic.w	r2, r2, #14
 8003ac2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac8:	f003 021f 	and.w	r2, r3, #31
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d004      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003afe:	bf00      	nop
 8003b00:	bf00      	nop
}
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b1e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d004      	beq.n	8003b32 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b30:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	f003 021f 	and.w	r2, r3, #31
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	2101      	movs	r1, #1
 8003b40:	fa01 f202 	lsl.w	r2, r1, r2
 8003b44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b10      	cmp	r3, #16
 8003b54:	d108      	bne.n	8003b68 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b66:	e007      	b.n	8003b78 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	60da      	str	r2, [r3, #12]
}
 8003b78:	bf00      	nop
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	4b16      	ldr	r3, [pc, #88]	; (8003bec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d802      	bhi.n	8003b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003b98:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	e001      	b.n	8003ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003b9e:	4b15      	ldr	r3, [pc, #84]	; (8003bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ba0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	3b08      	subs	r3, #8
 8003bae:	4a12      	ldr	r2, [pc, #72]	; (8003bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	091b      	lsrs	r3, r3, #4
 8003bb6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbc:	089b      	lsrs	r3, r3, #2
 8003bbe:	009a      	lsls	r2, r3, #2
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a0b      	ldr	r2, [pc, #44]	; (8003bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003bce:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 031f 	and.w	r3, r3, #31
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40020407 	.word	0x40020407
 8003bf0:	40020800 	.word	0x40020800
 8003bf4:	40020820 	.word	0x40020820
 8003bf8:	cccccccd 	.word	0xcccccccd
 8003bfc:	40020880 	.word	0x40020880

08003c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	461a      	mov	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a08      	ldr	r2, [pc, #32]	; (8003c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c22:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	409a      	lsls	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003c34:	bf00      	nop
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	1000823f 	.word	0x1000823f
 8003c44:	40020940 	.word	0x40020940

08003c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c56:	e15a      	b.n	8003f0e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	fa01 f303 	lsl.w	r3, r1, r3
 8003c64:	4013      	ands	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 814c 	beq.w	8003f08 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d00b      	beq.n	8003c90 <HAL_GPIO_Init+0x48>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d007      	beq.n	8003c90 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c84:	2b11      	cmp	r3, #17
 8003c86:	d003      	beq.n	8003c90 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b12      	cmp	r3, #18
 8003c8e:	d130      	bne.n	8003cf2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	091b      	lsrs	r3, r3, #4
 8003cdc:	f003 0201 	and.w	r2, r3, #1
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43db      	mvns	r3, r3
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4013      	ands	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d003      	beq.n	8003d32 <HAL_GPIO_Init+0xea>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b12      	cmp	r3, #18
 8003d30:	d123      	bne.n	8003d7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	08da      	lsrs	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3208      	adds	r2, #8
 8003d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	220f      	movs	r2, #15
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4013      	ands	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	08da      	lsrs	r2, r3, #3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3208      	adds	r2, #8
 8003d74:	6939      	ldr	r1, [r7, #16]
 8003d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	2203      	movs	r2, #3
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f003 0203 	and.w	r2, r3, #3
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80a6 	beq.w	8003f08 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dbc:	4b5b      	ldr	r3, [pc, #364]	; (8003f2c <HAL_GPIO_Init+0x2e4>)
 8003dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc0:	4a5a      	ldr	r2, [pc, #360]	; (8003f2c <HAL_GPIO_Init+0x2e4>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	6613      	str	r3, [r2, #96]	; 0x60
 8003dc8:	4b58      	ldr	r3, [pc, #352]	; (8003f2c <HAL_GPIO_Init+0x2e4>)
 8003dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dd4:	4a56      	ldr	r2, [pc, #344]	; (8003f30 <HAL_GPIO_Init+0x2e8>)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	089b      	lsrs	r3, r3, #2
 8003dda:	3302      	adds	r3, #2
 8003ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	220f      	movs	r2, #15
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4013      	ands	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003dfe:	d01f      	beq.n	8003e40 <HAL_GPIO_Init+0x1f8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a4c      	ldr	r2, [pc, #304]	; (8003f34 <HAL_GPIO_Init+0x2ec>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d019      	beq.n	8003e3c <HAL_GPIO_Init+0x1f4>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a4b      	ldr	r2, [pc, #300]	; (8003f38 <HAL_GPIO_Init+0x2f0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d013      	beq.n	8003e38 <HAL_GPIO_Init+0x1f0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a4a      	ldr	r2, [pc, #296]	; (8003f3c <HAL_GPIO_Init+0x2f4>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00d      	beq.n	8003e34 <HAL_GPIO_Init+0x1ec>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a49      	ldr	r2, [pc, #292]	; (8003f40 <HAL_GPIO_Init+0x2f8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d007      	beq.n	8003e30 <HAL_GPIO_Init+0x1e8>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a48      	ldr	r2, [pc, #288]	; (8003f44 <HAL_GPIO_Init+0x2fc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d101      	bne.n	8003e2c <HAL_GPIO_Init+0x1e4>
 8003e28:	2305      	movs	r3, #5
 8003e2a:	e00a      	b.n	8003e42 <HAL_GPIO_Init+0x1fa>
 8003e2c:	2306      	movs	r3, #6
 8003e2e:	e008      	b.n	8003e42 <HAL_GPIO_Init+0x1fa>
 8003e30:	2304      	movs	r3, #4
 8003e32:	e006      	b.n	8003e42 <HAL_GPIO_Init+0x1fa>
 8003e34:	2303      	movs	r3, #3
 8003e36:	e004      	b.n	8003e42 <HAL_GPIO_Init+0x1fa>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e002      	b.n	8003e42 <HAL_GPIO_Init+0x1fa>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <HAL_GPIO_Init+0x1fa>
 8003e40:	2300      	movs	r3, #0
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	f002 0203 	and.w	r2, r2, #3
 8003e48:	0092      	lsls	r2, r2, #2
 8003e4a:	4093      	lsls	r3, r2
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e52:	4937      	ldr	r1, [pc, #220]	; (8003f30 <HAL_GPIO_Init+0x2e8>)
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	089b      	lsrs	r3, r3, #2
 8003e58:	3302      	adds	r3, #2
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e60:	4b39      	ldr	r3, [pc, #228]	; (8003f48 <HAL_GPIO_Init+0x300>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e84:	4a30      	ldr	r2, [pc, #192]	; (8003f48 <HAL_GPIO_Init+0x300>)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003e8a:	4b2f      	ldr	r3, [pc, #188]	; (8003f48 <HAL_GPIO_Init+0x300>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	43db      	mvns	r3, r3
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4013      	ands	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003eae:	4a26      	ldr	r2, [pc, #152]	; (8003f48 <HAL_GPIO_Init+0x300>)
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003eb4:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <HAL_GPIO_Init+0x300>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ed8:	4a1b      	ldr	r2, [pc, #108]	; (8003f48 <HAL_GPIO_Init+0x300>)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ede:	4b1a      	ldr	r3, [pc, #104]	; (8003f48 <HAL_GPIO_Init+0x300>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4013      	ands	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f02:	4a11      	ldr	r2, [pc, #68]	; (8003f48 <HAL_GPIO_Init+0x300>)
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	fa22 f303 	lsr.w	r3, r2, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f47f ae9d 	bne.w	8003c58 <HAL_GPIO_Init+0x10>
  }
}
 8003f1e:	bf00      	nop
 8003f20:	bf00      	nop
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	40010000 	.word	0x40010000
 8003f34:	48000400 	.word	0x48000400
 8003f38:	48000800 	.word	0x48000800
 8003f3c:	48000c00 	.word	0x48000c00
 8003f40:	48001000 	.word	0x48001000
 8003f44:	48001400 	.word	0x48001400
 8003f48:	40010400 	.word	0x40010400

08003f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	807b      	strh	r3, [r7, #2]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f5c:	787b      	ldrb	r3, [r7, #1]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f62:	887a      	ldrh	r2, [r7, #2]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f68:	e002      	b.n	8003f70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f6a:	887a      	ldrh	r2, [r7, #2]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e081      	b.n	8004092 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fc ff7a 	bl	8000e9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2224      	movs	r2, #36	; 0x24
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0201 	bic.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d107      	bne.n	8003ff6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	e006      	b.n	8004004 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004002:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	2b02      	cmp	r3, #2
 800400a:	d104      	bne.n	8004016 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004014:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004028:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004038:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	ea42 0103 	orr.w	r1, r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	021a      	lsls	r2, r3, #8
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69d9      	ldr	r1, [r3, #28]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1a      	ldr	r2, [r3, #32]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
	...

0800409c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	4608      	mov	r0, r1
 80040a6:	4611      	mov	r1, r2
 80040a8:	461a      	mov	r2, r3
 80040aa:	4603      	mov	r3, r0
 80040ac:	817b      	strh	r3, [r7, #10]
 80040ae:	460b      	mov	r3, r1
 80040b0:	813b      	strh	r3, [r7, #8]
 80040b2:	4613      	mov	r3, r2
 80040b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b20      	cmp	r3, #32
 80040c0:	f040 80f9 	bne.w	80042b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <HAL_I2C_Mem_Write+0x34>
 80040ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d105      	bne.n	80040dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0ed      	b.n	80042b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_I2C_Mem_Write+0x4e>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e0e6      	b.n	80042b8 <HAL_I2C_Mem_Write+0x21c>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040f2:	f7fd fc4d 	bl	8001990 <HAL_GetTick>
 80040f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	2319      	movs	r3, #25
 80040fe:	2201      	movs	r2, #1
 8004100:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 f955 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0d1      	b.n	80042b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2221      	movs	r2, #33	; 0x21
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2240      	movs	r2, #64	; 0x40
 8004120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a3a      	ldr	r2, [r7, #32]
 800412e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004134:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800413c:	88f8      	ldrh	r0, [r7, #6]
 800413e:	893a      	ldrh	r2, [r7, #8]
 8004140:	8979      	ldrh	r1, [r7, #10]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	9301      	str	r3, [sp, #4]
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	4603      	mov	r3, r0
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f8b9 	bl	80042c4 <I2C_RequestMemoryWrite>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0a9      	b.n	80042b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	2bff      	cmp	r3, #255	; 0xff
 800416c:	d90e      	bls.n	800418c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	22ff      	movs	r2, #255	; 0xff
 8004172:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004178:	b2da      	uxtb	r2, r3
 800417a:	8979      	ldrh	r1, [r7, #10]
 800417c:	2300      	movs	r3, #0
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 fa37 	bl	80045f8 <I2C_TransferConfig>
 800418a:	e00f      	b.n	80041ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419a:	b2da      	uxtb	r2, r3
 800419c:	8979      	ldrh	r1, [r7, #10]
 800419e:	2300      	movs	r3, #0
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 fa26 	bl	80045f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f93f 	bl	8004434 <I2C_WaitOnTXISFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e07b      	b.n	80042b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	781a      	ldrb	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d034      	beq.n	8004264 <HAL_I2C_Mem_Write+0x1c8>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d130      	bne.n	8004264 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004208:	2200      	movs	r2, #0
 800420a:	2180      	movs	r1, #128	; 0x80
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f8d1 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e04d      	b.n	80042b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	2bff      	cmp	r3, #255	; 0xff
 8004224:	d90e      	bls.n	8004244 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	22ff      	movs	r2, #255	; 0xff
 800422a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004230:	b2da      	uxtb	r2, r3
 8004232:	8979      	ldrh	r1, [r7, #10]
 8004234:	2300      	movs	r3, #0
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f9db 	bl	80045f8 <I2C_TransferConfig>
 8004242:	e00f      	b.n	8004264 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004252:	b2da      	uxtb	r2, r3
 8004254:	8979      	ldrh	r1, [r7, #10]
 8004256:	2300      	movs	r3, #0
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 f9ca 	bl	80045f8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d19e      	bne.n	80041ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 f91e 	bl	80044b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e01a      	b.n	80042b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2220      	movs	r2, #32
 8004288:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6859      	ldr	r1, [r3, #4]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <HAL_I2C_Mem_Write+0x224>)
 8004296:	400b      	ands	r3, r1
 8004298:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	e000      	b.n	80042b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80042b6:	2302      	movs	r3, #2
  }
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	fe00e800 	.word	0xfe00e800

080042c4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	4608      	mov	r0, r1
 80042ce:	4611      	mov	r1, r2
 80042d0:	461a      	mov	r2, r3
 80042d2:	4603      	mov	r3, r0
 80042d4:	817b      	strh	r3, [r7, #10]
 80042d6:	460b      	mov	r3, r1
 80042d8:	813b      	strh	r3, [r7, #8]
 80042da:	4613      	mov	r3, r2
 80042dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80042de:	88fb      	ldrh	r3, [r7, #6]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	8979      	ldrh	r1, [r7, #10]
 80042e4:	4b20      	ldr	r3, [pc, #128]	; (8004368 <I2C_RequestMemoryWrite+0xa4>)
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f983 	bl	80045f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	69b9      	ldr	r1, [r7, #24]
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f89c 	bl	8004434 <I2C_WaitOnTXISFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e02c      	b.n	8004360 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004306:	88fb      	ldrh	r3, [r7, #6]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d105      	bne.n	8004318 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800430c:	893b      	ldrh	r3, [r7, #8]
 800430e:	b2da      	uxtb	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	629a      	str	r2, [r3, #40]	; 0x28
 8004316:	e015      	b.n	8004344 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004318:	893b      	ldrh	r3, [r7, #8]
 800431a:	0a1b      	lsrs	r3, r3, #8
 800431c:	b29b      	uxth	r3, r3
 800431e:	b2da      	uxtb	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004326:	69fa      	ldr	r2, [r7, #28]
 8004328:	69b9      	ldr	r1, [r7, #24]
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f882 	bl	8004434 <I2C_WaitOnTXISFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e012      	b.n	8004360 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800433a:	893b      	ldrh	r3, [r7, #8]
 800433c:	b2da      	uxtb	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	2200      	movs	r2, #0
 800434c:	2180      	movs	r1, #128	; 0x80
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f830 	bl	80043b4 <I2C_WaitOnFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	80002000 	.word	0x80002000

0800436c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b02      	cmp	r3, #2
 8004380:	d103      	bne.n	800438a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2200      	movs	r2, #0
 8004388:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b01      	cmp	r3, #1
 8004396:	d007      	beq.n	80043a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	619a      	str	r2, [r3, #24]
  }
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	4613      	mov	r3, r2
 80043c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043c4:	e022      	b.n	800440c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043cc:	d01e      	beq.n	800440c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ce:	f7fd fadf 	bl	8001990 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d302      	bcc.n	80043e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d113      	bne.n	800440c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e8:	f043 0220 	orr.w	r2, r3, #32
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e00f      	b.n	800442c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	4013      	ands	r3, r2
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	429a      	cmp	r2, r3
 800441a:	bf0c      	ite	eq
 800441c:	2301      	moveq	r3, #1
 800441e:	2300      	movne	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	429a      	cmp	r2, r3
 8004428:	d0cd      	beq.n	80043c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004440:	e02c      	b.n	800449c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	68b9      	ldr	r1, [r7, #8]
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 f870 	bl	800452c <I2C_IsAcknowledgeFailed>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e02a      	b.n	80044ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445c:	d01e      	beq.n	800449c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445e:	f7fd fa97 	bl	8001990 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	429a      	cmp	r2, r3
 800446c:	d302      	bcc.n	8004474 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d113      	bne.n	800449c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004478:	f043 0220 	orr.w	r2, r3, #32
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e007      	b.n	80044ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d1cb      	bne.n	8004442 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044c0:	e028      	b.n	8004514 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	68b9      	ldr	r1, [r7, #8]
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 f830 	bl	800452c <I2C_IsAcknowledgeFailed>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e026      	b.n	8004524 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d6:	f7fd fa5b 	bl	8001990 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d302      	bcc.n	80044ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d113      	bne.n	8004514 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f0:	f043 0220 	orr.w	r2, r3, #32
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e007      	b.n	8004524 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b20      	cmp	r3, #32
 8004520:	d1cf      	bne.n	80044c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b10      	cmp	r3, #16
 8004544:	d151      	bne.n	80045ea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004546:	e022      	b.n	800458e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454e:	d01e      	beq.n	800458e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004550:	f7fd fa1e 	bl	8001990 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	429a      	cmp	r2, r3
 800455e:	d302      	bcc.n	8004566 <I2C_IsAcknowledgeFailed+0x3a>
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d113      	bne.n	800458e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456a:	f043 0220 	orr.w	r2, r3, #32
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e02e      	b.n	80045ec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b20      	cmp	r3, #32
 800459a:	d1d5      	bne.n	8004548 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2210      	movs	r2, #16
 80045a2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2220      	movs	r2, #32
 80045aa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f7ff fedd 	bl	800436c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6859      	ldr	r1, [r3, #4]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	4b0d      	ldr	r3, [pc, #52]	; (80045f4 <I2C_IsAcknowledgeFailed+0xc8>)
 80045be:	400b      	ands	r3, r1
 80045c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	f043 0204 	orr.w	r2, r3, #4
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	fe00e800 	.word	0xfe00e800

080045f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	607b      	str	r3, [r7, #4]
 8004602:	460b      	mov	r3, r1
 8004604:	817b      	strh	r3, [r7, #10]
 8004606:	4613      	mov	r3, r2
 8004608:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	0d5b      	lsrs	r3, r3, #21
 8004614:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004618:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <I2C_TransferConfig+0x58>)
 800461a:	430b      	orrs	r3, r1
 800461c:	43db      	mvns	r3, r3
 800461e:	ea02 0103 	and.w	r1, r2, r3
 8004622:	897b      	ldrh	r3, [r7, #10]
 8004624:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004628:	7a7b      	ldrb	r3, [r7, #9]
 800462a:	041b      	lsls	r3, r3, #16
 800462c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	431a      	orrs	r2, r3
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	431a      	orrs	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004642:	bf00      	nop
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	03ff63ff 	.word	0x03ff63ff

08004654 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b20      	cmp	r3, #32
 8004668:	d138      	bne.n	80046dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004674:	2302      	movs	r3, #2
 8004676:	e032      	b.n	80046de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2224      	movs	r2, #36	; 0x24
 8004684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0201 	bic.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6819      	ldr	r1, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	e000      	b.n	80046de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046dc:	2302      	movs	r3, #2
  }
}
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b085      	sub	sp, #20
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d139      	bne.n	8004774 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800470a:	2302      	movs	r3, #2
 800470c:	e033      	b.n	8004776 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2224      	movs	r2, #36	; 0x24
 800471a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0201 	bic.w	r2, r2, #1
 800472c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800473c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2220      	movs	r2, #32
 8004764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	e000      	b.n	8004776 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004774:	2302      	movs	r3, #2
  }
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
	...

08004784 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d141      	bne.n	8004816 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004792:	4b4b      	ldr	r3, [pc, #300]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800479a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800479e:	d131      	bne.n	8004804 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047a0:	4b47      	ldr	r3, [pc, #284]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047a6:	4a46      	ldr	r2, [pc, #280]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047b0:	4b43      	ldr	r3, [pc, #268]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047b8:	4a41      	ldr	r2, [pc, #260]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047c0:	4b40      	ldr	r3, [pc, #256]	; (80048c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2232      	movs	r2, #50	; 0x32
 80047c6:	fb02 f303 	mul.w	r3, r2, r3
 80047ca:	4a3f      	ldr	r2, [pc, #252]	; (80048c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047cc:	fba2 2303 	umull	r2, r3, r2, r3
 80047d0:	0c9b      	lsrs	r3, r3, #18
 80047d2:	3301      	adds	r3, #1
 80047d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047d6:	e002      	b.n	80047de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3b01      	subs	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047de:	4b38      	ldr	r3, [pc, #224]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ea:	d102      	bne.n	80047f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f2      	bne.n	80047d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047f2:	4b33      	ldr	r3, [pc, #204]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047fe:	d158      	bne.n	80048b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e057      	b.n	80048b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004804:	4b2e      	ldr	r3, [pc, #184]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800480a:	4a2d      	ldr	r2, [pc, #180]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800480c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004810:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004814:	e04d      	b.n	80048b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800481c:	d141      	bne.n	80048a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800481e:	4b28      	ldr	r3, [pc, #160]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482a:	d131      	bne.n	8004890 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800482c:	4b24      	ldr	r3, [pc, #144]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800482e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004832:	4a23      	ldr	r2, [pc, #140]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004838:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800483c:	4b20      	ldr	r3, [pc, #128]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004844:	4a1e      	ldr	r2, [pc, #120]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800484a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800484c:	4b1d      	ldr	r3, [pc, #116]	; (80048c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2232      	movs	r2, #50	; 0x32
 8004852:	fb02 f303 	mul.w	r3, r2, r3
 8004856:	4a1c      	ldr	r2, [pc, #112]	; (80048c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004858:	fba2 2303 	umull	r2, r3, r2, r3
 800485c:	0c9b      	lsrs	r3, r3, #18
 800485e:	3301      	adds	r3, #1
 8004860:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004862:	e002      	b.n	800486a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3b01      	subs	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800486a:	4b15      	ldr	r3, [pc, #84]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004876:	d102      	bne.n	800487e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f2      	bne.n	8004864 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800487e:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800488a:	d112      	bne.n	80048b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e011      	b.n	80048b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004890:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004896:	4a0a      	ldr	r2, [pc, #40]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800489c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80048a0:	e007      	b.n	80048b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048a2:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048aa:	4a05      	ldr	r2, [pc, #20]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	40007000 	.word	0x40007000
 80048c4:	20000010 	.word	0x20000010
 80048c8:	431bde83 	.word	0x431bde83

080048cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	4a04      	ldr	r2, [pc, #16]	; (80048e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048da:	6093      	str	r3, [r2, #8]
}
 80048dc:	bf00      	nop
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40007000 	.word	0x40007000

080048ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e308      	b.n	8004f10 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d075      	beq.n	80049f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800490a:	4ba3      	ldr	r3, [pc, #652]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 030c 	and.w	r3, r3, #12
 8004912:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004914:	4ba0      	ldr	r3, [pc, #640]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0303 	and.w	r3, r3, #3
 800491c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b0c      	cmp	r3, #12
 8004922:	d102      	bne.n	800492a <HAL_RCC_OscConfig+0x3e>
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2b03      	cmp	r3, #3
 8004928:	d002      	beq.n	8004930 <HAL_RCC_OscConfig+0x44>
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	2b08      	cmp	r3, #8
 800492e:	d10b      	bne.n	8004948 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004930:	4b99      	ldr	r3, [pc, #612]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d05b      	beq.n	80049f4 <HAL_RCC_OscConfig+0x108>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d157      	bne.n	80049f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e2e3      	b.n	8004f10 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004950:	d106      	bne.n	8004960 <HAL_RCC_OscConfig+0x74>
 8004952:	4b91      	ldr	r3, [pc, #580]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a90      	ldr	r2, [pc, #576]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e01d      	b.n	800499c <HAL_RCC_OscConfig+0xb0>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004968:	d10c      	bne.n	8004984 <HAL_RCC_OscConfig+0x98>
 800496a:	4b8b      	ldr	r3, [pc, #556]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a8a      	ldr	r2, [pc, #552]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	4b88      	ldr	r3, [pc, #544]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a87      	ldr	r2, [pc, #540]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 800497c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	e00b      	b.n	800499c <HAL_RCC_OscConfig+0xb0>
 8004984:	4b84      	ldr	r3, [pc, #528]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a83      	ldr	r2, [pc, #524]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 800498a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800498e:	6013      	str	r3, [r2, #0]
 8004990:	4b81      	ldr	r3, [pc, #516]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a80      	ldr	r2, [pc, #512]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800499a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d013      	beq.n	80049cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7fc fff4 	bl	8001990 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049ac:	f7fc fff0 	bl	8001990 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b64      	cmp	r3, #100	; 0x64
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e2a8      	b.n	8004f10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049be:	4b76      	ldr	r3, [pc, #472]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0f0      	beq.n	80049ac <HAL_RCC_OscConfig+0xc0>
 80049ca:	e014      	b.n	80049f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049cc:	f7fc ffe0 	bl	8001990 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d4:	f7fc ffdc 	bl	8001990 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b64      	cmp	r3, #100	; 0x64
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e294      	b.n	8004f10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049e6:	4b6c      	ldr	r3, [pc, #432]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f0      	bne.n	80049d4 <HAL_RCC_OscConfig+0xe8>
 80049f2:	e000      	b.n	80049f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d075      	beq.n	8004aee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a02:	4b65      	ldr	r3, [pc, #404]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 030c 	and.w	r3, r3, #12
 8004a0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a0c:	4b62      	ldr	r3, [pc, #392]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 0303 	and.w	r3, r3, #3
 8004a14:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	2b0c      	cmp	r3, #12
 8004a1a:	d102      	bne.n	8004a22 <HAL_RCC_OscConfig+0x136>
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d002      	beq.n	8004a28 <HAL_RCC_OscConfig+0x13c>
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d11f      	bne.n	8004a68 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a28:	4b5b      	ldr	r3, [pc, #364]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_OscConfig+0x154>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e267      	b.n	8004f10 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a40:	4b55      	ldr	r3, [pc, #340]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	061b      	lsls	r3, r3, #24
 8004a4e:	4952      	ldr	r1, [pc, #328]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a54:	4b51      	ldr	r3, [pc, #324]	; (8004b9c <HAL_RCC_OscConfig+0x2b0>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7fc fb7b 	bl	8001154 <HAL_InitTick>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d043      	beq.n	8004aec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e253      	b.n	8004f10 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d023      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a70:	4b49      	ldr	r3, [pc, #292]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a48      	ldr	r2, [pc, #288]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7c:	f7fc ff88 	bl	8001990 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a84:	f7fc ff84 	bl	8001990 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e23c      	b.n	8004f10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a96:	4b40      	ldr	r3, [pc, #256]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0f0      	beq.n	8004a84 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa2:	4b3d      	ldr	r3, [pc, #244]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	061b      	lsls	r3, r3, #24
 8004ab0:	4939      	ldr	r1, [pc, #228]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	604b      	str	r3, [r1, #4]
 8004ab6:	e01a      	b.n	8004aee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ab8:	4b37      	ldr	r3, [pc, #220]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a36      	ldr	r2, [pc, #216]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004abe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac4:	f7fc ff64 	bl	8001990 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004acc:	f7fc ff60 	bl	8001990 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e218      	b.n	8004f10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ade:	4b2e      	ldr	r3, [pc, #184]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0x1e0>
 8004aea:	e000      	b.n	8004aee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004aec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d03c      	beq.n	8004b74 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d01c      	beq.n	8004b3c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b02:	4b25      	ldr	r3, [pc, #148]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b08:	4a23      	ldr	r2, [pc, #140]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b12:	f7fc ff3d 	bl	8001990 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b1a:	f7fc ff39 	bl	8001990 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e1f1      	b.n	8004f10 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b2c:	4b1a      	ldr	r3, [pc, #104]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0ef      	beq.n	8004b1a <HAL_RCC_OscConfig+0x22e>
 8004b3a:	e01b      	b.n	8004b74 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b3c:	4b16      	ldr	r3, [pc, #88]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b42:	4a15      	ldr	r2, [pc, #84]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4c:	f7fc ff20 	bl	8001990 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b54:	f7fc ff1c 	bl	8001990 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e1d4      	b.n	8004f10 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b66:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1ef      	bne.n	8004b54 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80ab 	beq.w	8004cd8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b82:	2300      	movs	r3, #0
 8004b84:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b86:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <HAL_RCC_OscConfig+0x2ac>)
 8004b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x2b4>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e005      	b.n	8004ba2 <HAL_RCC_OscConfig+0x2b6>
 8004b96:	bf00      	nop
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	20000034 	.word	0x20000034
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00d      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ba6:	4baf      	ldr	r3, [pc, #700]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004baa:	4aae      	ldr	r2, [pc, #696]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8004bb2:	4bac      	ldr	r3, [pc, #688]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bc2:	4ba9      	ldr	r3, [pc, #676]	; (8004e68 <HAL_RCC_OscConfig+0x57c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d118      	bne.n	8004c00 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bce:	4ba6      	ldr	r3, [pc, #664]	; (8004e68 <HAL_RCC_OscConfig+0x57c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4aa5      	ldr	r2, [pc, #660]	; (8004e68 <HAL_RCC_OscConfig+0x57c>)
 8004bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bda:	f7fc fed9 	bl	8001990 <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be2:	f7fc fed5 	bl	8001990 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e18d      	b.n	8004f10 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bf4:	4b9c      	ldr	r3, [pc, #624]	; (8004e68 <HAL_RCC_OscConfig+0x57c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0f0      	beq.n	8004be2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d108      	bne.n	8004c1a <HAL_RCC_OscConfig+0x32e>
 8004c08:	4b96      	ldr	r3, [pc, #600]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0e:	4a95      	ldr	r2, [pc, #596]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c18:	e024      	b.n	8004c64 <HAL_RCC_OscConfig+0x378>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	2b05      	cmp	r3, #5
 8004c20:	d110      	bne.n	8004c44 <HAL_RCC_OscConfig+0x358>
 8004c22:	4b90      	ldr	r3, [pc, #576]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c28:	4a8e      	ldr	r2, [pc, #568]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004c2a:	f043 0304 	orr.w	r3, r3, #4
 8004c2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c32:	4b8c      	ldr	r3, [pc, #560]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c38:	4a8a      	ldr	r2, [pc, #552]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004c3a:	f043 0301 	orr.w	r3, r3, #1
 8004c3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c42:	e00f      	b.n	8004c64 <HAL_RCC_OscConfig+0x378>
 8004c44:	4b87      	ldr	r3, [pc, #540]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4a:	4a86      	ldr	r2, [pc, #536]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004c4c:	f023 0301 	bic.w	r3, r3, #1
 8004c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c54:	4b83      	ldr	r3, [pc, #524]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5a:	4a82      	ldr	r2, [pc, #520]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004c5c:	f023 0304 	bic.w	r3, r3, #4
 8004c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d016      	beq.n	8004c9a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6c:	f7fc fe90 	bl	8001990 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c72:	e00a      	b.n	8004c8a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c74:	f7fc fe8c 	bl	8001990 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e142      	b.n	8004f10 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c8a:	4b76      	ldr	r3, [pc, #472]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0ed      	beq.n	8004c74 <HAL_RCC_OscConfig+0x388>
 8004c98:	e015      	b.n	8004cc6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9a:	f7fc fe79 	bl	8001990 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ca0:	e00a      	b.n	8004cb8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca2:	f7fc fe75 	bl	8001990 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e12b      	b.n	8004f10 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cb8:	4b6a      	ldr	r3, [pc, #424]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1ed      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cc6:	7ffb      	ldrb	r3, [r7, #31]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d105      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ccc:	4b65      	ldr	r3, [pc, #404]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd0:	4a64      	ldr	r2, [pc, #400]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0320 	and.w	r3, r3, #32
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d03c      	beq.n	8004d5e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01c      	beq.n	8004d26 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cec:	4b5d      	ldr	r3, [pc, #372]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cf2:	4a5c      	ldr	r2, [pc, #368]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004cf4:	f043 0301 	orr.w	r3, r3, #1
 8004cf8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cfc:	f7fc fe48 	bl	8001990 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d04:	f7fc fe44 	bl	8001990 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e0fc      	b.n	8004f10 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d16:	4b53      	ldr	r3, [pc, #332]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004d18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0ef      	beq.n	8004d04 <HAL_RCC_OscConfig+0x418>
 8004d24:	e01b      	b.n	8004d5e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d26:	4b4f      	ldr	r3, [pc, #316]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004d28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d2c:	4a4d      	ldr	r2, [pc, #308]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004d2e:	f023 0301 	bic.w	r3, r3, #1
 8004d32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d36:	f7fc fe2b 	bl	8001990 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d3e:	f7fc fe27 	bl	8001990 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e0df      	b.n	8004f10 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d50:	4b44      	ldr	r3, [pc, #272]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1ef      	bne.n	8004d3e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 80d3 	beq.w	8004f0e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d68:	4b3e      	ldr	r3, [pc, #248]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 030c 	and.w	r3, r3, #12
 8004d70:	2b0c      	cmp	r3, #12
 8004d72:	f000 808d 	beq.w	8004e90 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d15a      	bne.n	8004e34 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7e:	4b39      	ldr	r3, [pc, #228]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a38      	ldr	r2, [pc, #224]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004d84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8a:	f7fc fe01 	bl	8001990 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d92:	f7fc fdfd 	bl	8001990 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e0b5      	b.n	8004f10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004da4:	4b2f      	ldr	r3, [pc, #188]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1f0      	bne.n	8004d92 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004db0:	4b2c      	ldr	r3, [pc, #176]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	4b2d      	ldr	r3, [pc, #180]	; (8004e6c <HAL_RCC_OscConfig+0x580>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6a11      	ldr	r1, [r2, #32]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dc0:	3a01      	subs	r2, #1
 8004dc2:	0112      	lsls	r2, r2, #4
 8004dc4:	4311      	orrs	r1, r2
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004dca:	0212      	lsls	r2, r2, #8
 8004dcc:	4311      	orrs	r1, r2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004dd2:	0852      	lsrs	r2, r2, #1
 8004dd4:	3a01      	subs	r2, #1
 8004dd6:	0552      	lsls	r2, r2, #21
 8004dd8:	4311      	orrs	r1, r2
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dde:	0852      	lsrs	r2, r2, #1
 8004de0:	3a01      	subs	r2, #1
 8004de2:	0652      	lsls	r2, r2, #25
 8004de4:	4311      	orrs	r1, r2
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004dea:	06d2      	lsls	r2, r2, #27
 8004dec:	430a      	orrs	r2, r1
 8004dee:	491d      	ldr	r1, [pc, #116]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004df4:	4b1b      	ldr	r3, [pc, #108]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a1a      	ldr	r2, [pc, #104]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dfe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e00:	4b18      	ldr	r3, [pc, #96]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	4a17      	ldr	r2, [pc, #92]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0c:	f7fc fdc0 	bl	8001990 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e14:	f7fc fdbc 	bl	8001990 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e074      	b.n	8004f10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e26:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCC_OscConfig+0x528>
 8004e32:	e06c      	b.n	8004f0e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e34:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a0a      	ldr	r2, [pc, #40]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e3e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004e40:	4b08      	ldr	r3, [pc, #32]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4a07      	ldr	r2, [pc, #28]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004e46:	f023 0303 	bic.w	r3, r3, #3
 8004e4a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004e4c:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	4a04      	ldr	r2, [pc, #16]	; (8004e64 <HAL_RCC_OscConfig+0x578>)
 8004e52:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5c:	f7fc fd98 	bl	8001990 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e62:	e00e      	b.n	8004e82 <HAL_RCC_OscConfig+0x596>
 8004e64:	40021000 	.word	0x40021000
 8004e68:	40007000 	.word	0x40007000
 8004e6c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fc fd8e 	bl	8001990 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e046      	b.n	8004f10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e82:	4b25      	ldr	r3, [pc, #148]	; (8004f18 <HAL_RCC_OscConfig+0x62c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0x584>
 8004e8e:	e03e      	b.n	8004f0e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e039      	b.n	8004f10 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004e9c:	4b1e      	ldr	r3, [pc, #120]	; (8004f18 <HAL_RCC_OscConfig+0x62c>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f003 0203 	and.w	r2, r3, #3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d12c      	bne.n	8004f0a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d123      	bne.n	8004f0a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d11b      	bne.n	8004f0a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d113      	bne.n	8004f0a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eec:	085b      	lsrs	r3, r3, #1
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d109      	bne.n	8004f0a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f00:	085b      	lsrs	r3, r3, #1
 8004f02:	3b01      	subs	r3, #1
 8004f04:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d001      	beq.n	8004f0e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3720      	adds	r7, #32
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40021000 	.word	0x40021000

08004f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f26:	2300      	movs	r3, #0
 8004f28:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e11e      	b.n	8005172 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f34:	4b91      	ldr	r3, [pc, #580]	; (800517c <HAL_RCC_ClockConfig+0x260>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 030f 	and.w	r3, r3, #15
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d910      	bls.n	8004f64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f42:	4b8e      	ldr	r3, [pc, #568]	; (800517c <HAL_RCC_ClockConfig+0x260>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f023 020f 	bic.w	r2, r3, #15
 8004f4a:	498c      	ldr	r1, [pc, #560]	; (800517c <HAL_RCC_ClockConfig+0x260>)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f52:	4b8a      	ldr	r3, [pc, #552]	; (800517c <HAL_RCC_ClockConfig+0x260>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d001      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e106      	b.n	8005172 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d073      	beq.n	8005058 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d129      	bne.n	8004fcc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f78:	4b81      	ldr	r3, [pc, #516]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e0f4      	b.n	8005172 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004f88:	f000 f9d0 	bl	800532c <RCC_GetSysClockFreqFromPLLSource>
 8004f8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	4a7c      	ldr	r2, [pc, #496]	; (8005184 <HAL_RCC_ClockConfig+0x268>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d93f      	bls.n	8005016 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f96:	4b7a      	ldr	r3, [pc, #488]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d033      	beq.n	8005016 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d12f      	bne.n	8005016 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fb6:	4b72      	ldr	r3, [pc, #456]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fbe:	4a70      	ldr	r2, [pc, #448]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 8004fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004fc6:	2380      	movs	r3, #128	; 0x80
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	e024      	b.n	8005016 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d107      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fd4:	4b6a      	ldr	r3, [pc, #424]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d109      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e0c6      	b.n	8005172 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fe4:	4b66      	ldr	r3, [pc, #408]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e0be      	b.n	8005172 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ff4:	f000 f8ce 	bl	8005194 <HAL_RCC_GetSysClockFreq>
 8004ff8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	4a61      	ldr	r2, [pc, #388]	; (8005184 <HAL_RCC_ClockConfig+0x268>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d909      	bls.n	8005016 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005002:	4b5f      	ldr	r3, [pc, #380]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800500a:	4a5d      	ldr	r2, [pc, #372]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 800500c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005010:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005012:	2380      	movs	r3, #128	; 0x80
 8005014:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005016:	4b5a      	ldr	r3, [pc, #360]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f023 0203 	bic.w	r2, r3, #3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	4957      	ldr	r1, [pc, #348]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 8005024:	4313      	orrs	r3, r2
 8005026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005028:	f7fc fcb2 	bl	8001990 <HAL_GetTick>
 800502c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502e:	e00a      	b.n	8005046 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005030:	f7fc fcae 	bl	8001990 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	f241 3288 	movw	r2, #5000	; 0x1388
 800503e:	4293      	cmp	r3, r2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e095      	b.n	8005172 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005046:	4b4e      	ldr	r3, [pc, #312]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 020c 	and.w	r2, r3, #12
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	429a      	cmp	r2, r3
 8005056:	d1eb      	bne.n	8005030 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d023      	beq.n	80050ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005070:	4b43      	ldr	r3, [pc, #268]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	4a42      	ldr	r2, [pc, #264]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 8005076:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800507a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b00      	cmp	r3, #0
 8005086:	d007      	beq.n	8005098 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005088:	4b3d      	ldr	r3, [pc, #244]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005090:	4a3b      	ldr	r2, [pc, #236]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 8005092:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005096:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005098:	4b39      	ldr	r3, [pc, #228]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	4936      	ldr	r1, [pc, #216]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	608b      	str	r3, [r1, #8]
 80050aa:	e008      	b.n	80050be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2b80      	cmp	r3, #128	; 0x80
 80050b0:	d105      	bne.n	80050be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80050b2:	4b33      	ldr	r3, [pc, #204]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	4a32      	ldr	r2, [pc, #200]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 80050b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050be:	4b2f      	ldr	r3, [pc, #188]	; (800517c <HAL_RCC_ClockConfig+0x260>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d21d      	bcs.n	8005108 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050cc:	4b2b      	ldr	r3, [pc, #172]	; (800517c <HAL_RCC_ClockConfig+0x260>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f023 020f 	bic.w	r2, r3, #15
 80050d4:	4929      	ldr	r1, [pc, #164]	; (800517c <HAL_RCC_ClockConfig+0x260>)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	4313      	orrs	r3, r2
 80050da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050dc:	f7fc fc58 	bl	8001990 <HAL_GetTick>
 80050e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050e2:	e00a      	b.n	80050fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e4:	f7fc fc54 	bl	8001990 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e03b      	b.n	8005172 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050fa:	4b20      	ldr	r3, [pc, #128]	; (800517c <HAL_RCC_ClockConfig+0x260>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	429a      	cmp	r2, r3
 8005106:	d1ed      	bne.n	80050e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d008      	beq.n	8005126 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005114:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	4917      	ldr	r1, [pc, #92]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 8005122:	4313      	orrs	r3, r2
 8005124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	2b00      	cmp	r3, #0
 8005130:	d009      	beq.n	8005146 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005132:	4b13      	ldr	r3, [pc, #76]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	490f      	ldr	r1, [pc, #60]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 8005142:	4313      	orrs	r3, r2
 8005144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005146:	f000 f825 	bl	8005194 <HAL_RCC_GetSysClockFreq>
 800514a:	4602      	mov	r2, r0
 800514c:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <HAL_RCC_ClockConfig+0x264>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	091b      	lsrs	r3, r3, #4
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	490c      	ldr	r1, [pc, #48]	; (8005188 <HAL_RCC_ClockConfig+0x26c>)
 8005158:	5ccb      	ldrb	r3, [r1, r3]
 800515a:	f003 031f 	and.w	r3, r3, #31
 800515e:	fa22 f303 	lsr.w	r3, r2, r3
 8005162:	4a0a      	ldr	r2, [pc, #40]	; (800518c <HAL_RCC_ClockConfig+0x270>)
 8005164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005166:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <HAL_RCC_ClockConfig+0x274>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f7fb fff2 	bl	8001154 <HAL_InitTick>
 8005170:	4603      	mov	r3, r0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40022000 	.word	0x40022000
 8005180:	40021000 	.word	0x40021000
 8005184:	04c4b400 	.word	0x04c4b400
 8005188:	0800c7b8 	.word	0x0800c7b8
 800518c:	20000010 	.word	0x20000010
 8005190:	20000034 	.word	0x20000034

08005194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800519a:	4b2c      	ldr	r3, [pc, #176]	; (800524c <HAL_RCC_GetSysClockFreq+0xb8>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 030c 	and.w	r3, r3, #12
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d102      	bne.n	80051ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051a6:	4b2a      	ldr	r3, [pc, #168]	; (8005250 <HAL_RCC_GetSysClockFreq+0xbc>)
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	e047      	b.n	800523c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80051ac:	4b27      	ldr	r3, [pc, #156]	; (800524c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 030c 	and.w	r3, r3, #12
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d102      	bne.n	80051be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051b8:	4b26      	ldr	r3, [pc, #152]	; (8005254 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051ba:	613b      	str	r3, [r7, #16]
 80051bc:	e03e      	b.n	800523c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80051be:	4b23      	ldr	r3, [pc, #140]	; (800524c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 030c 	and.w	r3, r3, #12
 80051c6:	2b0c      	cmp	r3, #12
 80051c8:	d136      	bne.n	8005238 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051ca:	4b20      	ldr	r3, [pc, #128]	; (800524c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051d4:	4b1d      	ldr	r3, [pc, #116]	; (800524c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	3301      	adds	r3, #1
 80051e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	d10c      	bne.n	8005202 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051e8:	4a1a      	ldr	r2, [pc, #104]	; (8005254 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f0:	4a16      	ldr	r2, [pc, #88]	; (800524c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051f2:	68d2      	ldr	r2, [r2, #12]
 80051f4:	0a12      	lsrs	r2, r2, #8
 80051f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051fa:	fb02 f303 	mul.w	r3, r2, r3
 80051fe:	617b      	str	r3, [r7, #20]
      break;
 8005200:	e00c      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005202:	4a13      	ldr	r2, [pc, #76]	; (8005250 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	fbb2 f3f3 	udiv	r3, r2, r3
 800520a:	4a10      	ldr	r2, [pc, #64]	; (800524c <HAL_RCC_GetSysClockFreq+0xb8>)
 800520c:	68d2      	ldr	r2, [r2, #12]
 800520e:	0a12      	lsrs	r2, r2, #8
 8005210:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005214:	fb02 f303 	mul.w	r3, r2, r3
 8005218:	617b      	str	r3, [r7, #20]
      break;
 800521a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800521c:	4b0b      	ldr	r3, [pc, #44]	; (800524c <HAL_RCC_GetSysClockFreq+0xb8>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	0e5b      	lsrs	r3, r3, #25
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	3301      	adds	r3, #1
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	fbb2 f3f3 	udiv	r3, r2, r3
 8005234:	613b      	str	r3, [r7, #16]
 8005236:	e001      	b.n	800523c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800523c:	693b      	ldr	r3, [r7, #16]
}
 800523e:	4618      	mov	r0, r3
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40021000 	.word	0x40021000
 8005250:	00f42400 	.word	0x00f42400
 8005254:	007a1200 	.word	0x007a1200

08005258 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800525c:	4b03      	ldr	r3, [pc, #12]	; (800526c <HAL_RCC_GetHCLKFreq+0x14>)
 800525e:	681b      	ldr	r3, [r3, #0]
}
 8005260:	4618      	mov	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	20000010 	.word	0x20000010

08005270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005274:	f7ff fff0 	bl	8005258 <HAL_RCC_GetHCLKFreq>
 8005278:	4602      	mov	r2, r0
 800527a:	4b06      	ldr	r3, [pc, #24]	; (8005294 <HAL_RCC_GetPCLK1Freq+0x24>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	0a1b      	lsrs	r3, r3, #8
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	4904      	ldr	r1, [pc, #16]	; (8005298 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005286:	5ccb      	ldrb	r3, [r1, r3]
 8005288:	f003 031f 	and.w	r3, r3, #31
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005290:	4618      	mov	r0, r3
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40021000 	.word	0x40021000
 8005298:	0800c7c8 	.word	0x0800c7c8

0800529c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052a0:	f7ff ffda 	bl	8005258 <HAL_RCC_GetHCLKFreq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	0adb      	lsrs	r3, r3, #11
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	4904      	ldr	r1, [pc, #16]	; (80052c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052b2:	5ccb      	ldrb	r3, [r1, r3]
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052bc:	4618      	mov	r0, r3
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40021000 	.word	0x40021000
 80052c4:	0800c7c8 	.word	0x0800c7c8

080052c8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	220f      	movs	r2, #15
 80052d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80052d8:	4b12      	ldr	r3, [pc, #72]	; (8005324 <HAL_RCC_GetClockConfig+0x5c>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 0203 	and.w	r2, r3, #3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80052e4:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <HAL_RCC_GetClockConfig+0x5c>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80052f0:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <HAL_RCC_GetClockConfig+0x5c>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80052fc:	4b09      	ldr	r3, [pc, #36]	; (8005324 <HAL_RCC_GetClockConfig+0x5c>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	08db      	lsrs	r3, r3, #3
 8005302:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800530a:	4b07      	ldr	r3, [pc, #28]	; (8005328 <HAL_RCC_GetClockConfig+0x60>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 020f 	and.w	r2, r3, #15
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	601a      	str	r2, [r3, #0]
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40021000 	.word	0x40021000
 8005328:	40022000 	.word	0x40022000

0800532c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005332:	4b1e      	ldr	r3, [pc, #120]	; (80053ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800533c:	4b1b      	ldr	r3, [pc, #108]	; (80053ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	091b      	lsrs	r3, r3, #4
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	3301      	adds	r3, #1
 8005348:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	2b03      	cmp	r3, #3
 800534e:	d10c      	bne.n	800536a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005350:	4a17      	ldr	r2, [pc, #92]	; (80053b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	fbb2 f3f3 	udiv	r3, r2, r3
 8005358:	4a14      	ldr	r2, [pc, #80]	; (80053ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800535a:	68d2      	ldr	r2, [r2, #12]
 800535c:	0a12      	lsrs	r2, r2, #8
 800535e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005362:	fb02 f303 	mul.w	r3, r2, r3
 8005366:	617b      	str	r3, [r7, #20]
    break;
 8005368:	e00c      	b.n	8005384 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800536a:	4a12      	ldr	r2, [pc, #72]	; (80053b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005372:	4a0e      	ldr	r2, [pc, #56]	; (80053ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005374:	68d2      	ldr	r2, [r2, #12]
 8005376:	0a12      	lsrs	r2, r2, #8
 8005378:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800537c:	fb02 f303 	mul.w	r3, r2, r3
 8005380:	617b      	str	r3, [r7, #20]
    break;
 8005382:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005384:	4b09      	ldr	r3, [pc, #36]	; (80053ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	0e5b      	lsrs	r3, r3, #25
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	3301      	adds	r3, #1
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	fbb2 f3f3 	udiv	r3, r2, r3
 800539c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800539e:	687b      	ldr	r3, [r7, #4]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	371c      	adds	r7, #28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	40021000 	.word	0x40021000
 80053b0:	007a1200 	.word	0x007a1200
 80053b4:	00f42400 	.word	0x00f42400

080053b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053c0:	2300      	movs	r3, #0
 80053c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053c4:	2300      	movs	r3, #0
 80053c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 8098 	beq.w	8005506 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053d6:	2300      	movs	r3, #0
 80053d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053da:	4b43      	ldr	r3, [pc, #268]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10d      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053e6:	4b40      	ldr	r3, [pc, #256]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ea:	4a3f      	ldr	r2, [pc, #252]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f0:	6593      	str	r3, [r2, #88]	; 0x58
 80053f2:	4b3d      	ldr	r3, [pc, #244]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fa:	60bb      	str	r3, [r7, #8]
 80053fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053fe:	2301      	movs	r3, #1
 8005400:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005402:	4b3a      	ldr	r3, [pc, #232]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a39      	ldr	r2, [pc, #228]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800540c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800540e:	f7fc fabf 	bl	8001990 <HAL_GetTick>
 8005412:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005414:	e009      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005416:	f7fc fabb 	bl	8001990 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d902      	bls.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	74fb      	strb	r3, [r7, #19]
        break;
 8005428:	e005      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800542a:	4b30      	ldr	r3, [pc, #192]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0ef      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005436:	7cfb      	ldrb	r3, [r7, #19]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d159      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800543c:	4b2a      	ldr	r3, [pc, #168]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800543e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005446:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d01e      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	429a      	cmp	r2, r3
 8005456:	d019      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005458:	4b23      	ldr	r3, [pc, #140]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005462:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005464:	4b20      	ldr	r3, [pc, #128]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546a:	4a1f      	ldr	r2, [pc, #124]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800546c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005474:	4b1c      	ldr	r3, [pc, #112]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547a:	4a1b      	ldr	r2, [pc, #108]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800547c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005484:	4a18      	ldr	r2, [pc, #96]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d016      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005496:	f7fc fa7b 	bl	8001990 <HAL_GetTick>
 800549a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800549c:	e00b      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800549e:	f7fc fa77 	bl	8001990 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d902      	bls.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	74fb      	strb	r3, [r7, #19]
            break;
 80054b4:	e006      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054b6:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0ec      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80054c4:	7cfb      	ldrb	r3, [r7, #19]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054ca:	4b07      	ldr	r3, [pc, #28]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d8:	4903      	ldr	r1, [pc, #12]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80054e0:	e008      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054e2:	7cfb      	ldrb	r3, [r7, #19]
 80054e4:	74bb      	strb	r3, [r7, #18]
 80054e6:	e005      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80054e8:	40021000 	.word	0x40021000
 80054ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f0:	7cfb      	ldrb	r3, [r7, #19]
 80054f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054f4:	7c7b      	ldrb	r3, [r7, #17]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d105      	bne.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054fa:	4baf      	ldr	r3, [pc, #700]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fe:	4aae      	ldr	r2, [pc, #696]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005504:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005512:	4ba9      	ldr	r3, [pc, #676]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005518:	f023 0203 	bic.w	r2, r3, #3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	49a5      	ldr	r1, [pc, #660]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005534:	4ba0      	ldr	r3, [pc, #640]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553a:	f023 020c 	bic.w	r2, r3, #12
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	499d      	ldr	r1, [pc, #628]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005556:	4b98      	ldr	r3, [pc, #608]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	4994      	ldr	r1, [pc, #592]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005566:	4313      	orrs	r3, r2
 8005568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0308 	and.w	r3, r3, #8
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00a      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005578:	4b8f      	ldr	r3, [pc, #572]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	498c      	ldr	r1, [pc, #560]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0310 	and.w	r3, r3, #16
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800559a:	4b87      	ldr	r3, [pc, #540]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800559c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	4983      	ldr	r1, [pc, #524]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0320 	and.w	r3, r3, #32
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055bc:	4b7e      	ldr	r3, [pc, #504]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	497b      	ldr	r1, [pc, #492]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055de:	4b76      	ldr	r3, [pc, #472]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	4972      	ldr	r1, [pc, #456]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005600:	4b6d      	ldr	r3, [pc, #436]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005606:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	496a      	ldr	r1, [pc, #424]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005610:	4313      	orrs	r3, r2
 8005612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005622:	4b65      	ldr	r3, [pc, #404]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005628:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	4961      	ldr	r1, [pc, #388]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00a      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005644:	4b5c      	ldr	r3, [pc, #368]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005646:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800564a:	f023 0203 	bic.w	r2, r3, #3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005652:	4959      	ldr	r1, [pc, #356]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005654:	4313      	orrs	r3, r2
 8005656:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00a      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005666:	4b54      	ldr	r3, [pc, #336]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	4950      	ldr	r1, [pc, #320]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005676:	4313      	orrs	r3, r2
 8005678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005684:	2b00      	cmp	r3, #0
 8005686:	d015      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005688:	4b4b      	ldr	r3, [pc, #300]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800568a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	4948      	ldr	r1, [pc, #288]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005698:	4313      	orrs	r3, r2
 800569a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056a6:	d105      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056a8:	4b43      	ldr	r3, [pc, #268]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	4a42      	ldr	r2, [pc, #264]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d015      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056c0:	4b3d      	ldr	r3, [pc, #244]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ce:	493a      	ldr	r1, [pc, #232]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056de:	d105      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056e0:	4b35      	ldr	r3, [pc, #212]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	4a34      	ldr	r2, [pc, #208]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d015      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056f8:	4b2f      	ldr	r3, [pc, #188]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	492c      	ldr	r1, [pc, #176]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005716:	d105      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005718:	4b27      	ldr	r3, [pc, #156]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	4a26      	ldr	r2, [pc, #152]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800571e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005722:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d015      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005730:	4b21      	ldr	r3, [pc, #132]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005736:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573e:	491e      	ldr	r1, [pc, #120]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800574e:	d105      	bne.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005750:	4b19      	ldr	r3, [pc, #100]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4a18      	ldr	r2, [pc, #96]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800575a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d015      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005768:	4b13      	ldr	r3, [pc, #76]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800576a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	4910      	ldr	r1, [pc, #64]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005786:	d105      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005788:	4b0b      	ldr	r3, [pc, #44]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	4a0a      	ldr	r2, [pc, #40]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800578e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005792:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d018      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057a0:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ae:	4902      	ldr	r1, [pc, #8]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057b6:	e001      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x404>
 80057b8:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057c4:	d105      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057c6:	4b21      	ldr	r3, [pc, #132]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	4a20      	ldr	r2, [pc, #128]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d015      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80057de:	4b1b      	ldr	r3, [pc, #108]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ec:	4917      	ldr	r1, [pc, #92]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fc:	d105      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057fe:	4b13      	ldr	r3, [pc, #76]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	4a12      	ldr	r2, [pc, #72]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005808:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d015      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005816:	4b0d      	ldr	r3, [pc, #52]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005818:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800581c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005824:	4909      	ldr	r1, [pc, #36]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005830:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005834:	d105      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005836:	4b05      	ldr	r3, [pc, #20]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	4a04      	ldr	r2, [pc, #16]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800583c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005840:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005842:	7cbb      	ldrb	r3, [r7, #18]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	40021000 	.word	0x40021000

08005850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e049      	b.n	80058f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fb fda6 	bl	80013c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3304      	adds	r3, #4
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f000 fbd8 	bl	8006044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b01      	cmp	r3, #1
 8005912:	d001      	beq.n	8005918 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e04c      	b.n	80059b2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a26      	ldr	r2, [pc, #152]	; (80059c0 <HAL_TIM_Base_Start+0xc0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d022      	beq.n	8005970 <HAL_TIM_Base_Start+0x70>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005932:	d01d      	beq.n	8005970 <HAL_TIM_Base_Start+0x70>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a22      	ldr	r2, [pc, #136]	; (80059c4 <HAL_TIM_Base_Start+0xc4>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d018      	beq.n	8005970 <HAL_TIM_Base_Start+0x70>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a21      	ldr	r2, [pc, #132]	; (80059c8 <HAL_TIM_Base_Start+0xc8>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d013      	beq.n	8005970 <HAL_TIM_Base_Start+0x70>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1f      	ldr	r2, [pc, #124]	; (80059cc <HAL_TIM_Base_Start+0xcc>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00e      	beq.n	8005970 <HAL_TIM_Base_Start+0x70>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a1e      	ldr	r2, [pc, #120]	; (80059d0 <HAL_TIM_Base_Start+0xd0>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d009      	beq.n	8005970 <HAL_TIM_Base_Start+0x70>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a1c      	ldr	r2, [pc, #112]	; (80059d4 <HAL_TIM_Base_Start+0xd4>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d004      	beq.n	8005970 <HAL_TIM_Base_Start+0x70>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a1b      	ldr	r2, [pc, #108]	; (80059d8 <HAL_TIM_Base_Start+0xd8>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d115      	bne.n	800599c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	4b19      	ldr	r3, [pc, #100]	; (80059dc <HAL_TIM_Base_Start+0xdc>)
 8005978:	4013      	ands	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b06      	cmp	r3, #6
 8005980:	d015      	beq.n	80059ae <HAL_TIM_Base_Start+0xae>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005988:	d011      	beq.n	80059ae <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f042 0201 	orr.w	r2, r2, #1
 8005998:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599a:	e008      	b.n	80059ae <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0201 	orr.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	e000      	b.n	80059b0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	40012c00 	.word	0x40012c00
 80059c4:	40000400 	.word	0x40000400
 80059c8:	40000800 	.word	0x40000800
 80059cc:	40000c00 	.word	0x40000c00
 80059d0:	40013400 	.word	0x40013400
 80059d4:	40014000 	.word	0x40014000
 80059d8:	40015000 	.word	0x40015000
 80059dc:	00010007 	.word	0x00010007

080059e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d001      	beq.n	80059f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e054      	b.n	8005aa2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0201 	orr.w	r2, r2, #1
 8005a0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a26      	ldr	r2, [pc, #152]	; (8005ab0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d022      	beq.n	8005a60 <HAL_TIM_Base_Start_IT+0x80>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a22:	d01d      	beq.n	8005a60 <HAL_TIM_Base_Start_IT+0x80>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a22      	ldr	r2, [pc, #136]	; (8005ab4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d018      	beq.n	8005a60 <HAL_TIM_Base_Start_IT+0x80>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a21      	ldr	r2, [pc, #132]	; (8005ab8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d013      	beq.n	8005a60 <HAL_TIM_Base_Start_IT+0x80>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a1f      	ldr	r2, [pc, #124]	; (8005abc <HAL_TIM_Base_Start_IT+0xdc>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00e      	beq.n	8005a60 <HAL_TIM_Base_Start_IT+0x80>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1e      	ldr	r2, [pc, #120]	; (8005ac0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d009      	beq.n	8005a60 <HAL_TIM_Base_Start_IT+0x80>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a1c      	ldr	r2, [pc, #112]	; (8005ac4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d004      	beq.n	8005a60 <HAL_TIM_Base_Start_IT+0x80>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1b      	ldr	r2, [pc, #108]	; (8005ac8 <HAL_TIM_Base_Start_IT+0xe8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d115      	bne.n	8005a8c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	4b19      	ldr	r3, [pc, #100]	; (8005acc <HAL_TIM_Base_Start_IT+0xec>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b06      	cmp	r3, #6
 8005a70:	d015      	beq.n	8005a9e <HAL_TIM_Base_Start_IT+0xbe>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a78:	d011      	beq.n	8005a9e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 0201 	orr.w	r2, r2, #1
 8005a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a8a:	e008      	b.n	8005a9e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	e000      	b.n	8005aa0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40012c00 	.word	0x40012c00
 8005ab4:	40000400 	.word	0x40000400
 8005ab8:	40000800 	.word	0x40000800
 8005abc:	40000c00 	.word	0x40000c00
 8005ac0:	40013400 	.word	0x40013400
 8005ac4:	40014000 	.word	0x40014000
 8005ac8:	40015000 	.word	0x40015000
 8005acc:	00010007 	.word	0x00010007

08005ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d122      	bne.n	8005b2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d11b      	bne.n	8005b2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f06f 0202 	mvn.w	r2, #2
 8005afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fa78 	bl	8006008 <HAL_TIM_IC_CaptureCallback>
 8005b18:	e005      	b.n	8005b26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fa6a 	bl	8005ff4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fa7b 	bl	800601c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f003 0304 	and.w	r3, r3, #4
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d122      	bne.n	8005b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f003 0304 	and.w	r3, r3, #4
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d11b      	bne.n	8005b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0204 	mvn.w	r2, #4
 8005b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2202      	movs	r2, #2
 8005b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fa4e 	bl	8006008 <HAL_TIM_IC_CaptureCallback>
 8005b6c:	e005      	b.n	8005b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fa40 	bl	8005ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fa51 	bl	800601c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b08      	cmp	r3, #8
 8005b8c:	d122      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b08      	cmp	r3, #8
 8005b9a:	d11b      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0208 	mvn.w	r2, #8
 8005ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2204      	movs	r2, #4
 8005baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fa24 	bl	8006008 <HAL_TIM_IC_CaptureCallback>
 8005bc0:	e005      	b.n	8005bce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fa16 	bl	8005ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fa27 	bl	800601c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f003 0310 	and.w	r3, r3, #16
 8005bde:	2b10      	cmp	r3, #16
 8005be0:	d122      	bne.n	8005c28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f003 0310 	and.w	r3, r3, #16
 8005bec:	2b10      	cmp	r3, #16
 8005bee:	d11b      	bne.n	8005c28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f06f 0210 	mvn.w	r2, #16
 8005bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2208      	movs	r2, #8
 8005bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f9fa 	bl	8006008 <HAL_TIM_IC_CaptureCallback>
 8005c14:	e005      	b.n	8005c22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f9ec 	bl	8005ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f9fd 	bl	800601c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d10e      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d107      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f06f 0201 	mvn.w	r2, #1
 8005c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fb fa3e 	bl	80010d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5e:	2b80      	cmp	r3, #128	; 0x80
 8005c60:	d10e      	bne.n	8005c80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6c:	2b80      	cmp	r3, #128	; 0x80
 8005c6e:	d107      	bne.n	8005c80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fbc6 	bl	800640c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c8e:	d10e      	bne.n	8005cae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9a:	2b80      	cmp	r3, #128	; 0x80
 8005c9c:	d107      	bne.n	8005cae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fbb9 	bl	8006420 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb8:	2b40      	cmp	r3, #64	; 0x40
 8005cba:	d10e      	bne.n	8005cda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc6:	2b40      	cmp	r3, #64	; 0x40
 8005cc8:	d107      	bne.n	8005cda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f9ab 	bl	8006030 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	f003 0320 	and.w	r3, r3, #32
 8005ce4:	2b20      	cmp	r3, #32
 8005ce6:	d10e      	bne.n	8005d06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b20      	cmp	r3, #32
 8005cf4:	d107      	bne.n	8005d06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f06f 0220 	mvn.w	r2, #32
 8005cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fb79 	bl	80063f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d14:	d10f      	bne.n	8005d36 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d24:	d107      	bne.n	8005d36 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fb7f 	bl	8006434 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d44:	d10f      	bne.n	8005d66 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d54:	d107      	bne.n	8005d66 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fb71 	bl	8006448 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d74:	d10f      	bne.n	8005d96 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d84:	d107      	bne.n	8005d96 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fb63 	bl	800645c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005da0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005da4:	d10f      	bne.n	8005dc6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005db0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005db4:	d107      	bne.n	8005dc6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 fb55 	bl	8006470 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dc6:	bf00      	nop
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d101      	bne.n	8005de8 <HAL_TIM_ConfigClockSource+0x18>
 8005de4:	2302      	movs	r3, #2
 8005de6:	e0f5      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x204>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005e06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a6e      	ldr	r2, [pc, #440]	; (8005fdc <HAL_TIM_ConfigClockSource+0x20c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	f000 80c1 	beq.w	8005faa <HAL_TIM_ConfigClockSource+0x1da>
 8005e28:	4a6c      	ldr	r2, [pc, #432]	; (8005fdc <HAL_TIM_ConfigClockSource+0x20c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	f200 80c6 	bhi.w	8005fbc <HAL_TIM_ConfigClockSource+0x1ec>
 8005e30:	4a6b      	ldr	r2, [pc, #428]	; (8005fe0 <HAL_TIM_ConfigClockSource+0x210>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	f000 80b9 	beq.w	8005faa <HAL_TIM_ConfigClockSource+0x1da>
 8005e38:	4a69      	ldr	r2, [pc, #420]	; (8005fe0 <HAL_TIM_ConfigClockSource+0x210>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	f200 80be 	bhi.w	8005fbc <HAL_TIM_ConfigClockSource+0x1ec>
 8005e40:	4a68      	ldr	r2, [pc, #416]	; (8005fe4 <HAL_TIM_ConfigClockSource+0x214>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	f000 80b1 	beq.w	8005faa <HAL_TIM_ConfigClockSource+0x1da>
 8005e48:	4a66      	ldr	r2, [pc, #408]	; (8005fe4 <HAL_TIM_ConfigClockSource+0x214>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	f200 80b6 	bhi.w	8005fbc <HAL_TIM_ConfigClockSource+0x1ec>
 8005e50:	4a65      	ldr	r2, [pc, #404]	; (8005fe8 <HAL_TIM_ConfigClockSource+0x218>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	f000 80a9 	beq.w	8005faa <HAL_TIM_ConfigClockSource+0x1da>
 8005e58:	4a63      	ldr	r2, [pc, #396]	; (8005fe8 <HAL_TIM_ConfigClockSource+0x218>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	f200 80ae 	bhi.w	8005fbc <HAL_TIM_ConfigClockSource+0x1ec>
 8005e60:	4a62      	ldr	r2, [pc, #392]	; (8005fec <HAL_TIM_ConfigClockSource+0x21c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	f000 80a1 	beq.w	8005faa <HAL_TIM_ConfigClockSource+0x1da>
 8005e68:	4a60      	ldr	r2, [pc, #384]	; (8005fec <HAL_TIM_ConfigClockSource+0x21c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	f200 80a6 	bhi.w	8005fbc <HAL_TIM_ConfigClockSource+0x1ec>
 8005e70:	4a5f      	ldr	r2, [pc, #380]	; (8005ff0 <HAL_TIM_ConfigClockSource+0x220>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	f000 8099 	beq.w	8005faa <HAL_TIM_ConfigClockSource+0x1da>
 8005e78:	4a5d      	ldr	r2, [pc, #372]	; (8005ff0 <HAL_TIM_ConfigClockSource+0x220>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	f200 809e 	bhi.w	8005fbc <HAL_TIM_ConfigClockSource+0x1ec>
 8005e80:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005e84:	f000 8091 	beq.w	8005faa <HAL_TIM_ConfigClockSource+0x1da>
 8005e88:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005e8c:	f200 8096 	bhi.w	8005fbc <HAL_TIM_ConfigClockSource+0x1ec>
 8005e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e94:	f000 8089 	beq.w	8005faa <HAL_TIM_ConfigClockSource+0x1da>
 8005e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e9c:	f200 808e 	bhi.w	8005fbc <HAL_TIM_ConfigClockSource+0x1ec>
 8005ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea4:	d03e      	beq.n	8005f24 <HAL_TIM_ConfigClockSource+0x154>
 8005ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eaa:	f200 8087 	bhi.w	8005fbc <HAL_TIM_ConfigClockSource+0x1ec>
 8005eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb2:	f000 8085 	beq.w	8005fc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eba:	d87f      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x1ec>
 8005ebc:	2b70      	cmp	r3, #112	; 0x70
 8005ebe:	d01a      	beq.n	8005ef6 <HAL_TIM_ConfigClockSource+0x126>
 8005ec0:	2b70      	cmp	r3, #112	; 0x70
 8005ec2:	d87b      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x1ec>
 8005ec4:	2b60      	cmp	r3, #96	; 0x60
 8005ec6:	d050      	beq.n	8005f6a <HAL_TIM_ConfigClockSource+0x19a>
 8005ec8:	2b60      	cmp	r3, #96	; 0x60
 8005eca:	d877      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x1ec>
 8005ecc:	2b50      	cmp	r3, #80	; 0x50
 8005ece:	d03c      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0x17a>
 8005ed0:	2b50      	cmp	r3, #80	; 0x50
 8005ed2:	d873      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x1ec>
 8005ed4:	2b40      	cmp	r3, #64	; 0x40
 8005ed6:	d058      	beq.n	8005f8a <HAL_TIM_ConfigClockSource+0x1ba>
 8005ed8:	2b40      	cmp	r3, #64	; 0x40
 8005eda:	d86f      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x1ec>
 8005edc:	2b30      	cmp	r3, #48	; 0x30
 8005ede:	d064      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x1da>
 8005ee0:	2b30      	cmp	r3, #48	; 0x30
 8005ee2:	d86b      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x1ec>
 8005ee4:	2b20      	cmp	r3, #32
 8005ee6:	d060      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x1da>
 8005ee8:	2b20      	cmp	r3, #32
 8005eea:	d867      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x1ec>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d05c      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x1da>
 8005ef0:	2b10      	cmp	r3, #16
 8005ef2:	d05a      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005ef4:	e062      	b.n	8005fbc <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6818      	ldr	r0, [r3, #0]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	6899      	ldr	r1, [r3, #8]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f000 f9c1 	bl	800628c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	609a      	str	r2, [r3, #8]
      break;
 8005f22:	e04e      	b.n	8005fc2 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6818      	ldr	r0, [r3, #0]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	6899      	ldr	r1, [r3, #8]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f000 f9aa 	bl	800628c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f46:	609a      	str	r2, [r3, #8]
      break;
 8005f48:	e03b      	b.n	8005fc2 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	6859      	ldr	r1, [r3, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	461a      	mov	r2, r3
 8005f58:	f000 f91c 	bl	8006194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2150      	movs	r1, #80	; 0x50
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 f975 	bl	8006252 <TIM_ITRx_SetConfig>
      break;
 8005f68:	e02b      	b.n	8005fc2 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	6859      	ldr	r1, [r3, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	461a      	mov	r2, r3
 8005f78:	f000 f93b 	bl	80061f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2160      	movs	r1, #96	; 0x60
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 f965 	bl	8006252 <TIM_ITRx_SetConfig>
      break;
 8005f88:	e01b      	b.n	8005fc2 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6818      	ldr	r0, [r3, #0]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	6859      	ldr	r1, [r3, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	461a      	mov	r2, r3
 8005f98:	f000 f8fc 	bl	8006194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2140      	movs	r1, #64	; 0x40
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 f955 	bl	8006252 <TIM_ITRx_SetConfig>
      break;
 8005fa8:	e00b      	b.n	8005fc2 <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	f000 f94c 	bl	8006252 <TIM_ITRx_SetConfig>
        break;
 8005fba:	e002      	b.n	8005fc2 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8005fbc:	bf00      	nop
 8005fbe:	e000      	b.n	8005fc2 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8005fc0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	00100070 	.word	0x00100070
 8005fe0:	00100060 	.word	0x00100060
 8005fe4:	00100050 	.word	0x00100050
 8005fe8:	00100040 	.word	0x00100040
 8005fec:	00100030 	.word	0x00100030
 8005ff0:	00100020 	.word	0x00100020

08005ff4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a46      	ldr	r2, [pc, #280]	; (8006170 <TIM_Base_SetConfig+0x12c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d017      	beq.n	800608c <TIM_Base_SetConfig+0x48>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006062:	d013      	beq.n	800608c <TIM_Base_SetConfig+0x48>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a43      	ldr	r2, [pc, #268]	; (8006174 <TIM_Base_SetConfig+0x130>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00f      	beq.n	800608c <TIM_Base_SetConfig+0x48>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a42      	ldr	r2, [pc, #264]	; (8006178 <TIM_Base_SetConfig+0x134>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00b      	beq.n	800608c <TIM_Base_SetConfig+0x48>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a41      	ldr	r2, [pc, #260]	; (800617c <TIM_Base_SetConfig+0x138>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d007      	beq.n	800608c <TIM_Base_SetConfig+0x48>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a40      	ldr	r2, [pc, #256]	; (8006180 <TIM_Base_SetConfig+0x13c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_Base_SetConfig+0x48>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a3f      	ldr	r2, [pc, #252]	; (8006184 <TIM_Base_SetConfig+0x140>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d108      	bne.n	800609e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a33      	ldr	r2, [pc, #204]	; (8006170 <TIM_Base_SetConfig+0x12c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d023      	beq.n	80060ee <TIM_Base_SetConfig+0xaa>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ac:	d01f      	beq.n	80060ee <TIM_Base_SetConfig+0xaa>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a30      	ldr	r2, [pc, #192]	; (8006174 <TIM_Base_SetConfig+0x130>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d01b      	beq.n	80060ee <TIM_Base_SetConfig+0xaa>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a2f      	ldr	r2, [pc, #188]	; (8006178 <TIM_Base_SetConfig+0x134>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d017      	beq.n	80060ee <TIM_Base_SetConfig+0xaa>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a2e      	ldr	r2, [pc, #184]	; (800617c <TIM_Base_SetConfig+0x138>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d013      	beq.n	80060ee <TIM_Base_SetConfig+0xaa>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a2d      	ldr	r2, [pc, #180]	; (8006180 <TIM_Base_SetConfig+0x13c>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00f      	beq.n	80060ee <TIM_Base_SetConfig+0xaa>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a2d      	ldr	r2, [pc, #180]	; (8006188 <TIM_Base_SetConfig+0x144>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00b      	beq.n	80060ee <TIM_Base_SetConfig+0xaa>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a2c      	ldr	r2, [pc, #176]	; (800618c <TIM_Base_SetConfig+0x148>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d007      	beq.n	80060ee <TIM_Base_SetConfig+0xaa>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a2b      	ldr	r2, [pc, #172]	; (8006190 <TIM_Base_SetConfig+0x14c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d003      	beq.n	80060ee <TIM_Base_SetConfig+0xaa>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a26      	ldr	r2, [pc, #152]	; (8006184 <TIM_Base_SetConfig+0x140>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d108      	bne.n	8006100 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a12      	ldr	r2, [pc, #72]	; (8006170 <TIM_Base_SetConfig+0x12c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d013      	beq.n	8006154 <TIM_Base_SetConfig+0x110>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a14      	ldr	r2, [pc, #80]	; (8006180 <TIM_Base_SetConfig+0x13c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00f      	beq.n	8006154 <TIM_Base_SetConfig+0x110>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a14      	ldr	r2, [pc, #80]	; (8006188 <TIM_Base_SetConfig+0x144>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00b      	beq.n	8006154 <TIM_Base_SetConfig+0x110>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a13      	ldr	r2, [pc, #76]	; (800618c <TIM_Base_SetConfig+0x148>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d007      	beq.n	8006154 <TIM_Base_SetConfig+0x110>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a12      	ldr	r2, [pc, #72]	; (8006190 <TIM_Base_SetConfig+0x14c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d003      	beq.n	8006154 <TIM_Base_SetConfig+0x110>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a0d      	ldr	r2, [pc, #52]	; (8006184 <TIM_Base_SetConfig+0x140>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d103      	bne.n	800615c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	691a      	ldr	r2, [r3, #16]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	615a      	str	r2, [r3, #20]
}
 8006162:	bf00      	nop
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	40012c00 	.word	0x40012c00
 8006174:	40000400 	.word	0x40000400
 8006178:	40000800 	.word	0x40000800
 800617c:	40000c00 	.word	0x40000c00
 8006180:	40013400 	.word	0x40013400
 8006184:	40015000 	.word	0x40015000
 8006188:	40014000 	.word	0x40014000
 800618c:	40014400 	.word	0x40014400
 8006190:	40014800 	.word	0x40014800

08006194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f023 0201 	bic.w	r2, r3, #1
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f023 030a 	bic.w	r3, r3, #10
 80061d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	621a      	str	r2, [r3, #32]
}
 80061e6:	bf00      	nop
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b087      	sub	sp, #28
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	f023 0210 	bic.w	r2, r3, #16
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800621c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	031b      	lsls	r3, r3, #12
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800622e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	621a      	str	r2, [r3, #32]
}
 8006246:	bf00      	nop
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006252:	b480      	push	{r7}
 8006254:	b085      	sub	sp, #20
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	f043 0307 	orr.w	r3, r3, #7
 8006278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	609a      	str	r2, [r3, #8]
}
 8006280:	bf00      	nop
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
 8006298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	021a      	lsls	r2, r3, #8
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	431a      	orrs	r2, r3
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	609a      	str	r2, [r3, #8]
}
 80062c0:	bf00      	nop
 80062c2:	371c      	adds	r7, #28
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e074      	b.n	80063ce <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a34      	ldr	r2, [pc, #208]	; (80063dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d009      	beq.n	8006322 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a33      	ldr	r2, [pc, #204]	; (80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d004      	beq.n	8006322 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a31      	ldr	r2, [pc, #196]	; (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d108      	bne.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006328:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	4313      	orrs	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800633a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a21      	ldr	r2, [pc, #132]	; (80063dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d022      	beq.n	80063a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006364:	d01d      	beq.n	80063a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a1f      	ldr	r2, [pc, #124]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d018      	beq.n	80063a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a1d      	ldr	r2, [pc, #116]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d013      	beq.n	80063a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a1c      	ldr	r2, [pc, #112]	; (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d00e      	beq.n	80063a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a15      	ldr	r2, [pc, #84]	; (80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d009      	beq.n	80063a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a18      	ldr	r2, [pc, #96]	; (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d004      	beq.n	80063a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a11      	ldr	r2, [pc, #68]	; (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d10c      	bne.n	80063bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	40012c00 	.word	0x40012c00
 80063e0:	40013400 	.word	0x40013400
 80063e4:	40015000 	.word	0x40015000
 80063e8:	40000400 	.word	0x40000400
 80063ec:	40000800 	.word	0x40000800
 80063f0:	40000c00 	.word	0x40000c00
 80063f4:	40014000 	.word	0x40014000

080063f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e042      	b.n	800651c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800649c:	2b00      	cmp	r3, #0
 800649e:	d106      	bne.n	80064ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7fa fff7 	bl	800149c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2224      	movs	r2, #36	; 0x24
 80064b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0201 	bic.w	r2, r2, #1
 80064c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f892 	bl	80065f0 <UART_SetConfig>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d101      	bne.n	80064d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e022      	b.n	800651c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fb50 	bl	8006b84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689a      	ldr	r2, [r3, #8]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006502:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0201 	orr.w	r2, r2, #1
 8006512:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fbd7 	bl	8006cc8 <UART_CheckIdleState>
 800651a:	4603      	mov	r3, r0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	4613      	mov	r3, r2
 8006530:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006538:	2b20      	cmp	r3, #32
 800653a:	d131      	bne.n	80065a0 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <HAL_UART_Receive_DMA+0x24>
 8006542:	88fb      	ldrh	r3, [r7, #6]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e02a      	b.n	80065a2 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006552:	2b01      	cmp	r3, #1
 8006554:	d101      	bne.n	800655a <HAL_UART_Receive_DMA+0x36>
 8006556:	2302      	movs	r3, #2
 8006558:	e023      	b.n	80065a2 <HAL_UART_Receive_DMA+0x7e>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a0f      	ldr	r2, [pc, #60]	; (80065ac <HAL_UART_Receive_DMA+0x88>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00e      	beq.n	8006590 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d007      	beq.n	8006590 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800658e:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006590:	88fb      	ldrh	r3, [r7, #6]
 8006592:	461a      	mov	r2, r3
 8006594:	68b9      	ldr	r1, [r7, #8]
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fc62 	bl	8006e60 <UART_Start_Receive_DMA>
 800659c:	4603      	mov	r3, r0
 800659e:	e000      	b.n	80065a2 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80065a0:	2302      	movs	r3, #2
  }
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	40008000 	.word	0x40008000

080065b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	460b      	mov	r3, r1
 80065e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065f0:	b5b0      	push	{r4, r5, r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	431a      	orrs	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	431a      	orrs	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	4313      	orrs	r3, r2
 8006612:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	4bb1      	ldr	r3, [pc, #708]	; (80068e0 <UART_SetConfig+0x2f0>)
 800661c:	4013      	ands	r3, r2
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6812      	ldr	r2, [r2, #0]
 8006622:	69f9      	ldr	r1, [r7, #28]
 8006624:	430b      	orrs	r3, r1
 8006626:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4aa6      	ldr	r2, [pc, #664]	; (80068e4 <UART_SetConfig+0x2f4>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d004      	beq.n	8006658 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	4313      	orrs	r3, r2
 8006656:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006662:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6812      	ldr	r2, [r2, #0]
 800666a:	69f9      	ldr	r1, [r7, #28]
 800666c:	430b      	orrs	r3, r1
 800666e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006676:	f023 010f 	bic.w	r1, r3, #15
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a97      	ldr	r2, [pc, #604]	; (80068e8 <UART_SetConfig+0x2f8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d120      	bne.n	80066d2 <UART_SetConfig+0xe2>
 8006690:	4b96      	ldr	r3, [pc, #600]	; (80068ec <UART_SetConfig+0x2fc>)
 8006692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	2b03      	cmp	r3, #3
 800669c:	d816      	bhi.n	80066cc <UART_SetConfig+0xdc>
 800669e:	a201      	add	r2, pc, #4	; (adr r2, 80066a4 <UART_SetConfig+0xb4>)
 80066a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a4:	080066b5 	.word	0x080066b5
 80066a8:	080066c1 	.word	0x080066c1
 80066ac:	080066bb 	.word	0x080066bb
 80066b0:	080066c7 	.word	0x080066c7
 80066b4:	2301      	movs	r3, #1
 80066b6:	76fb      	strb	r3, [r7, #27]
 80066b8:	e0e7      	b.n	800688a <UART_SetConfig+0x29a>
 80066ba:	2302      	movs	r3, #2
 80066bc:	76fb      	strb	r3, [r7, #27]
 80066be:	e0e4      	b.n	800688a <UART_SetConfig+0x29a>
 80066c0:	2304      	movs	r3, #4
 80066c2:	76fb      	strb	r3, [r7, #27]
 80066c4:	e0e1      	b.n	800688a <UART_SetConfig+0x29a>
 80066c6:	2308      	movs	r3, #8
 80066c8:	76fb      	strb	r3, [r7, #27]
 80066ca:	e0de      	b.n	800688a <UART_SetConfig+0x29a>
 80066cc:	2310      	movs	r3, #16
 80066ce:	76fb      	strb	r3, [r7, #27]
 80066d0:	e0db      	b.n	800688a <UART_SetConfig+0x29a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a86      	ldr	r2, [pc, #536]	; (80068f0 <UART_SetConfig+0x300>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d132      	bne.n	8006742 <UART_SetConfig+0x152>
 80066dc:	4b83      	ldr	r3, [pc, #524]	; (80068ec <UART_SetConfig+0x2fc>)
 80066de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e2:	f003 030c 	and.w	r3, r3, #12
 80066e6:	2b0c      	cmp	r3, #12
 80066e8:	d828      	bhi.n	800673c <UART_SetConfig+0x14c>
 80066ea:	a201      	add	r2, pc, #4	; (adr r2, 80066f0 <UART_SetConfig+0x100>)
 80066ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f0:	08006725 	.word	0x08006725
 80066f4:	0800673d 	.word	0x0800673d
 80066f8:	0800673d 	.word	0x0800673d
 80066fc:	0800673d 	.word	0x0800673d
 8006700:	08006731 	.word	0x08006731
 8006704:	0800673d 	.word	0x0800673d
 8006708:	0800673d 	.word	0x0800673d
 800670c:	0800673d 	.word	0x0800673d
 8006710:	0800672b 	.word	0x0800672b
 8006714:	0800673d 	.word	0x0800673d
 8006718:	0800673d 	.word	0x0800673d
 800671c:	0800673d 	.word	0x0800673d
 8006720:	08006737 	.word	0x08006737
 8006724:	2300      	movs	r3, #0
 8006726:	76fb      	strb	r3, [r7, #27]
 8006728:	e0af      	b.n	800688a <UART_SetConfig+0x29a>
 800672a:	2302      	movs	r3, #2
 800672c:	76fb      	strb	r3, [r7, #27]
 800672e:	e0ac      	b.n	800688a <UART_SetConfig+0x29a>
 8006730:	2304      	movs	r3, #4
 8006732:	76fb      	strb	r3, [r7, #27]
 8006734:	e0a9      	b.n	800688a <UART_SetConfig+0x29a>
 8006736:	2308      	movs	r3, #8
 8006738:	76fb      	strb	r3, [r7, #27]
 800673a:	e0a6      	b.n	800688a <UART_SetConfig+0x29a>
 800673c:	2310      	movs	r3, #16
 800673e:	76fb      	strb	r3, [r7, #27]
 8006740:	e0a3      	b.n	800688a <UART_SetConfig+0x29a>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a6b      	ldr	r2, [pc, #428]	; (80068f4 <UART_SetConfig+0x304>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d120      	bne.n	800678e <UART_SetConfig+0x19e>
 800674c:	4b67      	ldr	r3, [pc, #412]	; (80068ec <UART_SetConfig+0x2fc>)
 800674e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006752:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006756:	2b30      	cmp	r3, #48	; 0x30
 8006758:	d013      	beq.n	8006782 <UART_SetConfig+0x192>
 800675a:	2b30      	cmp	r3, #48	; 0x30
 800675c:	d814      	bhi.n	8006788 <UART_SetConfig+0x198>
 800675e:	2b20      	cmp	r3, #32
 8006760:	d009      	beq.n	8006776 <UART_SetConfig+0x186>
 8006762:	2b20      	cmp	r3, #32
 8006764:	d810      	bhi.n	8006788 <UART_SetConfig+0x198>
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <UART_SetConfig+0x180>
 800676a:	2b10      	cmp	r3, #16
 800676c:	d006      	beq.n	800677c <UART_SetConfig+0x18c>
 800676e:	e00b      	b.n	8006788 <UART_SetConfig+0x198>
 8006770:	2300      	movs	r3, #0
 8006772:	76fb      	strb	r3, [r7, #27]
 8006774:	e089      	b.n	800688a <UART_SetConfig+0x29a>
 8006776:	2302      	movs	r3, #2
 8006778:	76fb      	strb	r3, [r7, #27]
 800677a:	e086      	b.n	800688a <UART_SetConfig+0x29a>
 800677c:	2304      	movs	r3, #4
 800677e:	76fb      	strb	r3, [r7, #27]
 8006780:	e083      	b.n	800688a <UART_SetConfig+0x29a>
 8006782:	2308      	movs	r3, #8
 8006784:	76fb      	strb	r3, [r7, #27]
 8006786:	e080      	b.n	800688a <UART_SetConfig+0x29a>
 8006788:	2310      	movs	r3, #16
 800678a:	76fb      	strb	r3, [r7, #27]
 800678c:	e07d      	b.n	800688a <UART_SetConfig+0x29a>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a59      	ldr	r2, [pc, #356]	; (80068f8 <UART_SetConfig+0x308>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d120      	bne.n	80067da <UART_SetConfig+0x1ea>
 8006798:	4b54      	ldr	r3, [pc, #336]	; (80068ec <UART_SetConfig+0x2fc>)
 800679a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067a2:	2bc0      	cmp	r3, #192	; 0xc0
 80067a4:	d013      	beq.n	80067ce <UART_SetConfig+0x1de>
 80067a6:	2bc0      	cmp	r3, #192	; 0xc0
 80067a8:	d814      	bhi.n	80067d4 <UART_SetConfig+0x1e4>
 80067aa:	2b80      	cmp	r3, #128	; 0x80
 80067ac:	d009      	beq.n	80067c2 <UART_SetConfig+0x1d2>
 80067ae:	2b80      	cmp	r3, #128	; 0x80
 80067b0:	d810      	bhi.n	80067d4 <UART_SetConfig+0x1e4>
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <UART_SetConfig+0x1cc>
 80067b6:	2b40      	cmp	r3, #64	; 0x40
 80067b8:	d006      	beq.n	80067c8 <UART_SetConfig+0x1d8>
 80067ba:	e00b      	b.n	80067d4 <UART_SetConfig+0x1e4>
 80067bc:	2300      	movs	r3, #0
 80067be:	76fb      	strb	r3, [r7, #27]
 80067c0:	e063      	b.n	800688a <UART_SetConfig+0x29a>
 80067c2:	2302      	movs	r3, #2
 80067c4:	76fb      	strb	r3, [r7, #27]
 80067c6:	e060      	b.n	800688a <UART_SetConfig+0x29a>
 80067c8:	2304      	movs	r3, #4
 80067ca:	76fb      	strb	r3, [r7, #27]
 80067cc:	e05d      	b.n	800688a <UART_SetConfig+0x29a>
 80067ce:	2308      	movs	r3, #8
 80067d0:	76fb      	strb	r3, [r7, #27]
 80067d2:	e05a      	b.n	800688a <UART_SetConfig+0x29a>
 80067d4:	2310      	movs	r3, #16
 80067d6:	76fb      	strb	r3, [r7, #27]
 80067d8:	e057      	b.n	800688a <UART_SetConfig+0x29a>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a47      	ldr	r2, [pc, #284]	; (80068fc <UART_SetConfig+0x30c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d125      	bne.n	8006830 <UART_SetConfig+0x240>
 80067e4:	4b41      	ldr	r3, [pc, #260]	; (80068ec <UART_SetConfig+0x2fc>)
 80067e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067f2:	d017      	beq.n	8006824 <UART_SetConfig+0x234>
 80067f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067f8:	d817      	bhi.n	800682a <UART_SetConfig+0x23a>
 80067fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067fe:	d00b      	beq.n	8006818 <UART_SetConfig+0x228>
 8006800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006804:	d811      	bhi.n	800682a <UART_SetConfig+0x23a>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <UART_SetConfig+0x222>
 800680a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800680e:	d006      	beq.n	800681e <UART_SetConfig+0x22e>
 8006810:	e00b      	b.n	800682a <UART_SetConfig+0x23a>
 8006812:	2300      	movs	r3, #0
 8006814:	76fb      	strb	r3, [r7, #27]
 8006816:	e038      	b.n	800688a <UART_SetConfig+0x29a>
 8006818:	2302      	movs	r3, #2
 800681a:	76fb      	strb	r3, [r7, #27]
 800681c:	e035      	b.n	800688a <UART_SetConfig+0x29a>
 800681e:	2304      	movs	r3, #4
 8006820:	76fb      	strb	r3, [r7, #27]
 8006822:	e032      	b.n	800688a <UART_SetConfig+0x29a>
 8006824:	2308      	movs	r3, #8
 8006826:	76fb      	strb	r3, [r7, #27]
 8006828:	e02f      	b.n	800688a <UART_SetConfig+0x29a>
 800682a:	2310      	movs	r3, #16
 800682c:	76fb      	strb	r3, [r7, #27]
 800682e:	e02c      	b.n	800688a <UART_SetConfig+0x29a>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a2b      	ldr	r2, [pc, #172]	; (80068e4 <UART_SetConfig+0x2f4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d125      	bne.n	8006886 <UART_SetConfig+0x296>
 800683a:	4b2c      	ldr	r3, [pc, #176]	; (80068ec <UART_SetConfig+0x2fc>)
 800683c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006840:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006844:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006848:	d017      	beq.n	800687a <UART_SetConfig+0x28a>
 800684a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800684e:	d817      	bhi.n	8006880 <UART_SetConfig+0x290>
 8006850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006854:	d00b      	beq.n	800686e <UART_SetConfig+0x27e>
 8006856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800685a:	d811      	bhi.n	8006880 <UART_SetConfig+0x290>
 800685c:	2b00      	cmp	r3, #0
 800685e:	d003      	beq.n	8006868 <UART_SetConfig+0x278>
 8006860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006864:	d006      	beq.n	8006874 <UART_SetConfig+0x284>
 8006866:	e00b      	b.n	8006880 <UART_SetConfig+0x290>
 8006868:	2300      	movs	r3, #0
 800686a:	76fb      	strb	r3, [r7, #27]
 800686c:	e00d      	b.n	800688a <UART_SetConfig+0x29a>
 800686e:	2302      	movs	r3, #2
 8006870:	76fb      	strb	r3, [r7, #27]
 8006872:	e00a      	b.n	800688a <UART_SetConfig+0x29a>
 8006874:	2304      	movs	r3, #4
 8006876:	76fb      	strb	r3, [r7, #27]
 8006878:	e007      	b.n	800688a <UART_SetConfig+0x29a>
 800687a:	2308      	movs	r3, #8
 800687c:	76fb      	strb	r3, [r7, #27]
 800687e:	e004      	b.n	800688a <UART_SetConfig+0x29a>
 8006880:	2310      	movs	r3, #16
 8006882:	76fb      	strb	r3, [r7, #27]
 8006884:	e001      	b.n	800688a <UART_SetConfig+0x29a>
 8006886:	2310      	movs	r3, #16
 8006888:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a15      	ldr	r2, [pc, #84]	; (80068e4 <UART_SetConfig+0x2f4>)
 8006890:	4293      	cmp	r3, r2
 8006892:	f040 809f 	bne.w	80069d4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006896:	7efb      	ldrb	r3, [r7, #27]
 8006898:	2b08      	cmp	r3, #8
 800689a:	d837      	bhi.n	800690c <UART_SetConfig+0x31c>
 800689c:	a201      	add	r2, pc, #4	; (adr r2, 80068a4 <UART_SetConfig+0x2b4>)
 800689e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a2:	bf00      	nop
 80068a4:	080068c9 	.word	0x080068c9
 80068a8:	0800690d 	.word	0x0800690d
 80068ac:	080068d1 	.word	0x080068d1
 80068b0:	0800690d 	.word	0x0800690d
 80068b4:	080068d7 	.word	0x080068d7
 80068b8:	0800690d 	.word	0x0800690d
 80068bc:	0800690d 	.word	0x0800690d
 80068c0:	0800690d 	.word	0x0800690d
 80068c4:	08006905 	.word	0x08006905
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068c8:	f7fe fcd2 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 80068cc:	6178      	str	r0, [r7, #20]
        break;
 80068ce:	e022      	b.n	8006916 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068d0:	4b0b      	ldr	r3, [pc, #44]	; (8006900 <UART_SetConfig+0x310>)
 80068d2:	617b      	str	r3, [r7, #20]
        break;
 80068d4:	e01f      	b.n	8006916 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068d6:	f7fe fc5d 	bl	8005194 <HAL_RCC_GetSysClockFreq>
 80068da:	6178      	str	r0, [r7, #20]
        break;
 80068dc:	e01b      	b.n	8006916 <UART_SetConfig+0x326>
 80068de:	bf00      	nop
 80068e0:	cfff69f3 	.word	0xcfff69f3
 80068e4:	40008000 	.word	0x40008000
 80068e8:	40013800 	.word	0x40013800
 80068ec:	40021000 	.word	0x40021000
 80068f0:	40004400 	.word	0x40004400
 80068f4:	40004800 	.word	0x40004800
 80068f8:	40004c00 	.word	0x40004c00
 80068fc:	40005000 	.word	0x40005000
 8006900:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006904:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006908:	617b      	str	r3, [r7, #20]
        break;
 800690a:	e004      	b.n	8006916 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	76bb      	strb	r3, [r7, #26]
        break;
 8006914:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 811b 	beq.w	8006b54 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006922:	4a96      	ldr	r2, [pc, #600]	; (8006b7c <UART_SetConfig+0x58c>)
 8006924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006928:	461a      	mov	r2, r3
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006930:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	4613      	mov	r3, r2
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	4413      	add	r3, r2
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	429a      	cmp	r2, r3
 8006940:	d305      	bcc.n	800694e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	429a      	cmp	r2, r3
 800694c:	d902      	bls.n	8006954 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	76bb      	strb	r3, [r7, #26]
 8006952:	e0ff      	b.n	8006b54 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	4618      	mov	r0, r3
 8006958:	f04f 0100 	mov.w	r1, #0
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	4a86      	ldr	r2, [pc, #536]	; (8006b7c <UART_SetConfig+0x58c>)
 8006962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006966:	b29a      	uxth	r2, r3
 8006968:	f04f 0300 	mov.w	r3, #0
 800696c:	f7f9 fca8 	bl	80002c0 <__aeabi_uldivmod>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	4610      	mov	r0, r2
 8006976:	4619      	mov	r1, r3
 8006978:	f04f 0200 	mov.w	r2, #0
 800697c:	f04f 0300 	mov.w	r3, #0
 8006980:	020b      	lsls	r3, r1, #8
 8006982:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006986:	0202      	lsls	r2, r0, #8
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	6849      	ldr	r1, [r1, #4]
 800698c:	0849      	lsrs	r1, r1, #1
 800698e:	4608      	mov	r0, r1
 8006990:	f04f 0100 	mov.w	r1, #0
 8006994:	1814      	adds	r4, r2, r0
 8006996:	eb43 0501 	adc.w	r5, r3, r1
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	461a      	mov	r2, r3
 80069a0:	f04f 0300 	mov.w	r3, #0
 80069a4:	4620      	mov	r0, r4
 80069a6:	4629      	mov	r1, r5
 80069a8:	f7f9 fc8a 	bl	80002c0 <__aeabi_uldivmod>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4613      	mov	r3, r2
 80069b2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069ba:	d308      	bcc.n	80069ce <UART_SetConfig+0x3de>
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069c2:	d204      	bcs.n	80069ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	60da      	str	r2, [r3, #12]
 80069cc:	e0c2      	b.n	8006b54 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	76bb      	strb	r3, [r7, #26]
 80069d2:	e0bf      	b.n	8006b54 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	69db      	ldr	r3, [r3, #28]
 80069d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069dc:	d165      	bne.n	8006aaa <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80069de:	7efb      	ldrb	r3, [r7, #27]
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d828      	bhi.n	8006a36 <UART_SetConfig+0x446>
 80069e4:	a201      	add	r2, pc, #4	; (adr r2, 80069ec <UART_SetConfig+0x3fc>)
 80069e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ea:	bf00      	nop
 80069ec:	08006a11 	.word	0x08006a11
 80069f0:	08006a19 	.word	0x08006a19
 80069f4:	08006a21 	.word	0x08006a21
 80069f8:	08006a37 	.word	0x08006a37
 80069fc:	08006a27 	.word	0x08006a27
 8006a00:	08006a37 	.word	0x08006a37
 8006a04:	08006a37 	.word	0x08006a37
 8006a08:	08006a37 	.word	0x08006a37
 8006a0c:	08006a2f 	.word	0x08006a2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a10:	f7fe fc2e 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8006a14:	6178      	str	r0, [r7, #20]
        break;
 8006a16:	e013      	b.n	8006a40 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a18:	f7fe fc40 	bl	800529c <HAL_RCC_GetPCLK2Freq>
 8006a1c:	6178      	str	r0, [r7, #20]
        break;
 8006a1e:	e00f      	b.n	8006a40 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a20:	4b57      	ldr	r3, [pc, #348]	; (8006b80 <UART_SetConfig+0x590>)
 8006a22:	617b      	str	r3, [r7, #20]
        break;
 8006a24:	e00c      	b.n	8006a40 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a26:	f7fe fbb5 	bl	8005194 <HAL_RCC_GetSysClockFreq>
 8006a2a:	6178      	str	r0, [r7, #20]
        break;
 8006a2c:	e008      	b.n	8006a40 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a32:	617b      	str	r3, [r7, #20]
        break;
 8006a34:	e004      	b.n	8006a40 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8006a36:	2300      	movs	r3, #0
 8006a38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	76bb      	strb	r3, [r7, #26]
        break;
 8006a3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 8086 	beq.w	8006b54 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	4a4b      	ldr	r2, [pc, #300]	; (8006b7c <UART_SetConfig+0x58c>)
 8006a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a52:	461a      	mov	r2, r3
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a5a:	005a      	lsls	r2, r3, #1
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	085b      	lsrs	r3, r3, #1
 8006a62:	441a      	add	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	2b0f      	cmp	r3, #15
 8006a74:	d916      	bls.n	8006aa4 <UART_SetConfig+0x4b4>
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a7c:	d212      	bcs.n	8006aa4 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	f023 030f 	bic.w	r3, r3, #15
 8006a86:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	085b      	lsrs	r3, r3, #1
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	89fb      	ldrh	r3, [r7, #14]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	89fa      	ldrh	r2, [r7, #14]
 8006aa0:	60da      	str	r2, [r3, #12]
 8006aa2:	e057      	b.n	8006b54 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	76bb      	strb	r3, [r7, #26]
 8006aa8:	e054      	b.n	8006b54 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006aaa:	7efb      	ldrb	r3, [r7, #27]
 8006aac:	2b08      	cmp	r3, #8
 8006aae:	d828      	bhi.n	8006b02 <UART_SetConfig+0x512>
 8006ab0:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <UART_SetConfig+0x4c8>)
 8006ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab6:	bf00      	nop
 8006ab8:	08006add 	.word	0x08006add
 8006abc:	08006ae5 	.word	0x08006ae5
 8006ac0:	08006aed 	.word	0x08006aed
 8006ac4:	08006b03 	.word	0x08006b03
 8006ac8:	08006af3 	.word	0x08006af3
 8006acc:	08006b03 	.word	0x08006b03
 8006ad0:	08006b03 	.word	0x08006b03
 8006ad4:	08006b03 	.word	0x08006b03
 8006ad8:	08006afb 	.word	0x08006afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006adc:	f7fe fbc8 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8006ae0:	6178      	str	r0, [r7, #20]
        break;
 8006ae2:	e013      	b.n	8006b0c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ae4:	f7fe fbda 	bl	800529c <HAL_RCC_GetPCLK2Freq>
 8006ae8:	6178      	str	r0, [r7, #20]
        break;
 8006aea:	e00f      	b.n	8006b0c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006aec:	4b24      	ldr	r3, [pc, #144]	; (8006b80 <UART_SetConfig+0x590>)
 8006aee:	617b      	str	r3, [r7, #20]
        break;
 8006af0:	e00c      	b.n	8006b0c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006af2:	f7fe fb4f 	bl	8005194 <HAL_RCC_GetSysClockFreq>
 8006af6:	6178      	str	r0, [r7, #20]
        break;
 8006af8:	e008      	b.n	8006b0c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006afe:	617b      	str	r3, [r7, #20]
        break;
 8006b00:	e004      	b.n	8006b0c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	76bb      	strb	r3, [r7, #26]
        break;
 8006b0a:	bf00      	nop
    }

    if (pclk != 0U)
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d020      	beq.n	8006b54 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	4a19      	ldr	r2, [pc, #100]	; (8006b7c <UART_SetConfig+0x58c>)
 8006b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	085b      	lsrs	r3, r3, #1
 8006b2a:	441a      	add	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	2b0f      	cmp	r3, #15
 8006b3c:	d908      	bls.n	8006b50 <UART_SetConfig+0x560>
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b44:	d204      	bcs.n	8006b50 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	60da      	str	r2, [r3, #12]
 8006b4e:	e001      	b.n	8006b54 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006b70:	7ebb      	ldrb	r3, [r7, #26]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3720      	adds	r7, #32
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bdb0      	pop	{r4, r5, r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	0800c7d0 	.word	0x0800c7d0
 8006b80:	00f42400 	.word	0x00f42400

08006b84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00a      	beq.n	8006bae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00a      	beq.n	8006bd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd4:	f003 0304 	and.w	r3, r3, #4
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00a      	beq.n	8006bf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf6:	f003 0308 	and.w	r3, r3, #8
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c18:	f003 0310 	and.w	r3, r3, #16
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00a      	beq.n	8006c36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3a:	f003 0320 	and.w	r3, r3, #32
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d01a      	beq.n	8006c9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c82:	d10a      	bne.n	8006c9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00a      	beq.n	8006cbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	605a      	str	r2, [r3, #4]
  }
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af02      	add	r7, sp, #8
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cd8:	f7fa fe5a 	bl	8001990 <HAL_GetTick>
 8006cdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0308 	and.w	r3, r3, #8
 8006ce8:	2b08      	cmp	r3, #8
 8006cea:	d10e      	bne.n	8006d0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f82f 	bl	8006d5e <UART_WaitOnFlagUntilTimeout>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e025      	b.n	8006d56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0304 	and.w	r3, r3, #4
 8006d14:	2b04      	cmp	r3, #4
 8006d16:	d10e      	bne.n	8006d36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f819 	bl	8006d5e <UART_WaitOnFlagUntilTimeout>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e00f      	b.n	8006d56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	603b      	str	r3, [r7, #0]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d6e:	e062      	b.n	8006e36 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d76:	d05e      	beq.n	8006e36 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d78:	f7fa fe0a 	bl	8001990 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d302      	bcc.n	8006d8e <UART_WaitOnFlagUntilTimeout+0x30>
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d11d      	bne.n	8006dca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d9c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689a      	ldr	r2, [r3, #8]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 0201 	bic.w	r2, r2, #1
 8006dac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2220      	movs	r2, #32
 8006db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2220      	movs	r2, #32
 8006dba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e045      	b.n	8006e56 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d02e      	beq.n	8006e36 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006de6:	d126      	bne.n	8006e36 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006df0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e00:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0201 	bic.w	r2, r2, #1
 8006e10:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2220      	movs	r2, #32
 8006e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2220      	movs	r2, #32
 8006e26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e00f      	b.n	8006e56 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	69da      	ldr	r2, [r3, #28]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	bf0c      	ite	eq
 8006e46:	2301      	moveq	r3, #1
 8006e48:	2300      	movne	r3, #0
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	79fb      	ldrb	r3, [r7, #7]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d08d      	beq.n	8006d70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
	...

08006e60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	88fa      	ldrh	r2, [r7, #6]
 8006e78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2222      	movs	r2, #34	; 0x22
 8006e88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d02c      	beq.n	8006eee <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e98:	4a25      	ldr	r2, [pc, #148]	; (8006f30 <UART_Start_Receive_DMA+0xd0>)
 8006e9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ea0:	4a24      	ldr	r2, [pc, #144]	; (8006f34 <UART_Start_Receive_DMA+0xd4>)
 8006ea2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ea8:	4a23      	ldr	r2, [pc, #140]	; (8006f38 <UART_Start_Receive_DMA+0xd8>)
 8006eaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3324      	adds	r3, #36	; 0x24
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	88fb      	ldrh	r3, [r7, #6]
 8006ec8:	f7fc fcf4 	bl	80038b4 <HAL_DMA_Start_IT>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00d      	beq.n	8006eee <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2210      	movs	r2, #16
 8006ed6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e01c      	b.n	8006f28 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f04:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	689a      	ldr	r2, [r3, #8]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f042 0201 	orr.w	r2, r2, #1
 8006f14:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f24:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	08006fdd 	.word	0x08006fdd
 8006f34:	08007077 	.word	0x08007077
 8006f38:	080070af 	.word	0x080070af

08006f3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006f52:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689a      	ldr	r2, [r3, #8]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006f62:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f8e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6812      	ldr	r2, [r2, #0]
 8006f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f9e:	f023 0301 	bic.w	r3, r3, #1
 8006fa2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d107      	bne.n	8006fbc <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 0210 	bic.w	r2, r2, #16
 8006fba:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0320 	and.w	r3, r3, #32
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d12b      	bne.n	8007050 <UART_DMAReceiveCplt+0x74>
  {
    huart->RxXferCount = 0U;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800700e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f022 0201 	bic.w	r2, r2, #1
 800701e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689a      	ldr	r2, [r3, #8]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800702e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2220      	movs	r2, #32
 8007034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800703c:	2b01      	cmp	r3, #1
 800703e:	d107      	bne.n	8007050 <UART_DMAReceiveCplt+0x74>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0210 	bic.w	r2, r2, #16
 800704e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007054:	2b01      	cmp	r3, #1
 8007056:	d107      	bne.n	8007068 <UART_DMAReceiveCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800705e:	4619      	mov	r1, r3
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f7ff fab9 	bl	80065d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007066:	e002      	b.n	800706e <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f7fa f804 	bl	8001076 <HAL_UART_RxCpltCallback>
}
 800706e:	bf00      	nop
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b084      	sub	sp, #16
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007082:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007088:	2b01      	cmp	r3, #1
 800708a:	d109      	bne.n	80070a0 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007092:	085b      	lsrs	r3, r3, #1
 8007094:	b29b      	uxth	r3, r3
 8007096:	4619      	mov	r1, r3
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f7ff fa9d 	bl	80065d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800709e:	e002      	b.n	80070a6 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f7ff fa85 	bl	80065b0 <HAL_UART_RxHalfCpltCallback>
}
 80070a6:	bf00      	nop
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b086      	sub	sp, #24
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070c2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d6:	2b80      	cmp	r3, #128	; 0x80
 80070d8:	d109      	bne.n	80070ee <UART_DMAError+0x40>
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	2b21      	cmp	r3, #33	; 0x21
 80070de:	d106      	bne.n	80070ee <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80070e8:	6978      	ldr	r0, [r7, #20]
 80070ea:	f7ff ff27 	bl	8006f3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f8:	2b40      	cmp	r3, #64	; 0x40
 80070fa:	d109      	bne.n	8007110 <UART_DMAError+0x62>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b22      	cmp	r3, #34	; 0x22
 8007100:	d106      	bne.n	8007110 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2200      	movs	r2, #0
 8007106:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800710a:	6978      	ldr	r0, [r7, #20]
 800710c:	f7ff ff34 	bl	8006f78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007116:	f043 0210 	orr.w	r2, r3, #16
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007120:	6978      	ldr	r0, [r7, #20]
 8007122:	f7ff fa4f 	bl	80065c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007126:	bf00      	nop
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800713c:	2b01      	cmp	r3, #1
 800713e:	d101      	bne.n	8007144 <HAL_UARTEx_EnableFifoMode+0x16>
 8007140:	2302      	movs	r3, #2
 8007142:	e02b      	b.n	800719c <HAL_UARTEx_EnableFifoMode+0x6e>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2224      	movs	r2, #36	; 0x24
 8007150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0201 	bic.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007172:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800717a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f889 	bl	800729c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2220      	movs	r2, #32
 800718e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d101      	bne.n	80071bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071b8:	2302      	movs	r3, #2
 80071ba:	e02d      	b.n	8007218 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2224      	movs	r2, #36	; 0x24
 80071c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0201 	bic.w	r2, r2, #1
 80071e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f84f 	bl	800729c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2220      	movs	r2, #32
 800720a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007234:	2302      	movs	r3, #2
 8007236:	e02d      	b.n	8007294 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2224      	movs	r2, #36	; 0x24
 8007244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 0201 	bic.w	r2, r2, #1
 800725e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	430a      	orrs	r2, r1
 8007272:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f811 	bl	800729c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2220      	movs	r2, #32
 8007286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d108      	bne.n	80072be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072bc:	e031      	b.n	8007322 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072be:	2308      	movs	r3, #8
 80072c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072c2:	2308      	movs	r3, #8
 80072c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	0e5b      	lsrs	r3, r3, #25
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	f003 0307 	and.w	r3, r3, #7
 80072d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	0f5b      	lsrs	r3, r3, #29
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	f003 0307 	and.w	r3, r3, #7
 80072e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072e6:	7bbb      	ldrb	r3, [r7, #14]
 80072e8:	7b3a      	ldrb	r2, [r7, #12]
 80072ea:	4911      	ldr	r1, [pc, #68]	; (8007330 <UARTEx_SetNbDataToProcess+0x94>)
 80072ec:	5c8a      	ldrb	r2, [r1, r2]
 80072ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072f2:	7b3a      	ldrb	r2, [r7, #12]
 80072f4:	490f      	ldr	r1, [pc, #60]	; (8007334 <UARTEx_SetNbDataToProcess+0x98>)
 80072f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	7b7a      	ldrb	r2, [r7, #13]
 8007308:	4909      	ldr	r1, [pc, #36]	; (8007330 <UARTEx_SetNbDataToProcess+0x94>)
 800730a:	5c8a      	ldrb	r2, [r1, r2]
 800730c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007310:	7b7a      	ldrb	r2, [r7, #13]
 8007312:	4908      	ldr	r1, [pc, #32]	; (8007334 <UARTEx_SetNbDataToProcess+0x98>)
 8007314:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007316:	fb93 f3f2 	sdiv	r3, r3, r2
 800731a:	b29a      	uxth	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007322:	bf00      	nop
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	0800c7e8 	.word	0x0800c7e8
 8007334:	0800c7f0 	.word	0x0800c7f0

08007338 <__NVIC_SetPriority>:
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	4603      	mov	r3, r0
 8007340:	6039      	str	r1, [r7, #0]
 8007342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007348:	2b00      	cmp	r3, #0
 800734a:	db0a      	blt.n	8007362 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	b2da      	uxtb	r2, r3
 8007350:	490c      	ldr	r1, [pc, #48]	; (8007384 <__NVIC_SetPriority+0x4c>)
 8007352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007356:	0112      	lsls	r2, r2, #4
 8007358:	b2d2      	uxtb	r2, r2
 800735a:	440b      	add	r3, r1
 800735c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007360:	e00a      	b.n	8007378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	b2da      	uxtb	r2, r3
 8007366:	4908      	ldr	r1, [pc, #32]	; (8007388 <__NVIC_SetPriority+0x50>)
 8007368:	79fb      	ldrb	r3, [r7, #7]
 800736a:	f003 030f 	and.w	r3, r3, #15
 800736e:	3b04      	subs	r3, #4
 8007370:	0112      	lsls	r2, r2, #4
 8007372:	b2d2      	uxtb	r2, r2
 8007374:	440b      	add	r3, r1
 8007376:	761a      	strb	r2, [r3, #24]
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	e000e100 	.word	0xe000e100
 8007388:	e000ed00 	.word	0xe000ed00

0800738c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800738c:	b580      	push	{r7, lr}
 800738e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007390:	4b05      	ldr	r3, [pc, #20]	; (80073a8 <SysTick_Handler+0x1c>)
 8007392:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007394:	f002 f93e 	bl	8009614 <xTaskGetSchedulerState>
 8007398:	4603      	mov	r3, r0
 800739a:	2b01      	cmp	r3, #1
 800739c:	d001      	beq.n	80073a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800739e:	f003 f823 	bl	800a3e8 <xPortSysTickHandler>
  }
}
 80073a2:	bf00      	nop
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	e000e010 	.word	0xe000e010

080073ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80073ac:	b580      	push	{r7, lr}
 80073ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80073b0:	2100      	movs	r1, #0
 80073b2:	f06f 0004 	mvn.w	r0, #4
 80073b6:	f7ff ffbf 	bl	8007338 <__NVIC_SetPriority>
#endif
}
 80073ba:	bf00      	nop
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073c6:	f3ef 8305 	mrs	r3, IPSR
 80073ca:	603b      	str	r3, [r7, #0]
  return(result);
 80073cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80073d2:	f06f 0305 	mvn.w	r3, #5
 80073d6:	607b      	str	r3, [r7, #4]
 80073d8:	e00c      	b.n	80073f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80073da:	4b0a      	ldr	r3, [pc, #40]	; (8007404 <osKernelInitialize+0x44>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d105      	bne.n	80073ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80073e2:	4b08      	ldr	r3, [pc, #32]	; (8007404 <osKernelInitialize+0x44>)
 80073e4:	2201      	movs	r2, #1
 80073e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	607b      	str	r3, [r7, #4]
 80073ec:	e002      	b.n	80073f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80073ee:	f04f 33ff 	mov.w	r3, #4294967295
 80073f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073f4:	687b      	ldr	r3, [r7, #4]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	200005a0 	.word	0x200005a0

08007408 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800740e:	f3ef 8305 	mrs	r3, IPSR
 8007412:	603b      	str	r3, [r7, #0]
  return(result);
 8007414:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <osKernelStart+0x1a>
    stat = osErrorISR;
 800741a:	f06f 0305 	mvn.w	r3, #5
 800741e:	607b      	str	r3, [r7, #4]
 8007420:	e010      	b.n	8007444 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007422:	4b0b      	ldr	r3, [pc, #44]	; (8007450 <osKernelStart+0x48>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d109      	bne.n	800743e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800742a:	f7ff ffbf 	bl	80073ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800742e:	4b08      	ldr	r3, [pc, #32]	; (8007450 <osKernelStart+0x48>)
 8007430:	2202      	movs	r2, #2
 8007432:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007434:	f001 fca6 	bl	8008d84 <vTaskStartScheduler>
      stat = osOK;
 8007438:	2300      	movs	r3, #0
 800743a:	607b      	str	r3, [r7, #4]
 800743c:	e002      	b.n	8007444 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800743e:	f04f 33ff 	mov.w	r3, #4294967295
 8007442:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007444:	687b      	ldr	r3, [r7, #4]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	200005a0 	.word	0x200005a0

08007454 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007454:	b580      	push	{r7, lr}
 8007456:	b08e      	sub	sp, #56	; 0x38
 8007458:	af04      	add	r7, sp, #16
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007460:	2300      	movs	r3, #0
 8007462:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007464:	f3ef 8305 	mrs	r3, IPSR
 8007468:	617b      	str	r3, [r7, #20]
  return(result);
 800746a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800746c:	2b00      	cmp	r3, #0
 800746e:	d17e      	bne.n	800756e <osThreadNew+0x11a>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d07b      	beq.n	800756e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007476:	2380      	movs	r3, #128	; 0x80
 8007478:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800747a:	2318      	movs	r3, #24
 800747c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800747e:	2300      	movs	r3, #0
 8007480:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007482:	f04f 33ff 	mov.w	r3, #4294967295
 8007486:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d045      	beq.n	800751a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <osThreadNew+0x48>
        name = attr->name;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d008      	beq.n	80074c2 <osThreadNew+0x6e>
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	2b38      	cmp	r3, #56	; 0x38
 80074b4:	d805      	bhi.n	80074c2 <osThreadNew+0x6e>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <osThreadNew+0x72>
        return (NULL);
 80074c2:	2300      	movs	r3, #0
 80074c4:	e054      	b.n	8007570 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	089b      	lsrs	r3, r3, #2
 80074d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00e      	beq.n	80074fc <osThreadNew+0xa8>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	2b5b      	cmp	r3, #91	; 0x5b
 80074e4:	d90a      	bls.n	80074fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d006      	beq.n	80074fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d002      	beq.n	80074fc <osThreadNew+0xa8>
        mem = 1;
 80074f6:	2301      	movs	r3, #1
 80074f8:	61bb      	str	r3, [r7, #24]
 80074fa:	e010      	b.n	800751e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10c      	bne.n	800751e <osThreadNew+0xca>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d108      	bne.n	800751e <osThreadNew+0xca>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d104      	bne.n	800751e <osThreadNew+0xca>
          mem = 0;
 8007514:	2300      	movs	r3, #0
 8007516:	61bb      	str	r3, [r7, #24]
 8007518:	e001      	b.n	800751e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800751a:	2300      	movs	r3, #0
 800751c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d110      	bne.n	8007546 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800752c:	9202      	str	r2, [sp, #8]
 800752e:	9301      	str	r3, [sp, #4]
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	6a3a      	ldr	r2, [r7, #32]
 8007538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f001 fa4c 	bl	80089d8 <xTaskCreateStatic>
 8007540:	4603      	mov	r3, r0
 8007542:	613b      	str	r3, [r7, #16]
 8007544:	e013      	b.n	800756e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d110      	bne.n	800756e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	b29a      	uxth	r2, r3
 8007550:	f107 0310 	add.w	r3, r7, #16
 8007554:	9301      	str	r3, [sp, #4]
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f001 fa97 	bl	8008a92 <xTaskCreate>
 8007564:	4603      	mov	r3, r0
 8007566:	2b01      	cmp	r3, #1
 8007568:	d001      	beq.n	800756e <osThreadNew+0x11a>
            hTask = NULL;
 800756a:	2300      	movs	r3, #0
 800756c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800756e:	693b      	ldr	r3, [r7, #16]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3728      	adds	r7, #40	; 0x28
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007580:	f3ef 8305 	mrs	r3, IPSR
 8007584:	60bb      	str	r3, [r7, #8]
  return(result);
 8007586:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <osDelay+0x1c>
    stat = osErrorISR;
 800758c:	f06f 0305 	mvn.w	r3, #5
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	e007      	b.n	80075a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007594:	2300      	movs	r3, #0
 8007596:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f001 fbbc 	bl	8008d1c <vTaskDelay>
    }
  }

  return (stat);
 80075a4:	68fb      	ldr	r3, [r7, #12]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b08a      	sub	sp, #40	; 0x28
 80075b2:	af02      	add	r7, sp, #8
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	60b9      	str	r1, [r7, #8]
 80075b8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80075ba:	2300      	movs	r3, #0
 80075bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075be:	f3ef 8305 	mrs	r3, IPSR
 80075c2:	613b      	str	r3, [r7, #16]
  return(result);
 80075c4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d175      	bne.n	80076b6 <osSemaphoreNew+0x108>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d072      	beq.n	80076b6 <osSemaphoreNew+0x108>
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d86e      	bhi.n	80076b6 <osSemaphoreNew+0x108>
    mem = -1;
 80075d8:	f04f 33ff 	mov.w	r3, #4294967295
 80075dc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d015      	beq.n	8007610 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d006      	beq.n	80075fa <osSemaphoreNew+0x4c>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	2b4f      	cmp	r3, #79	; 0x4f
 80075f2:	d902      	bls.n	80075fa <osSemaphoreNew+0x4c>
        mem = 1;
 80075f4:	2301      	movs	r3, #1
 80075f6:	61bb      	str	r3, [r7, #24]
 80075f8:	e00c      	b.n	8007614 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d108      	bne.n	8007614 <osSemaphoreNew+0x66>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d104      	bne.n	8007614 <osSemaphoreNew+0x66>
          mem = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	61bb      	str	r3, [r7, #24]
 800760e:	e001      	b.n	8007614 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007610:	2300      	movs	r3, #0
 8007612:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800761a:	d04c      	beq.n	80076b6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d128      	bne.n	8007674 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d10a      	bne.n	800763e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	2203      	movs	r2, #3
 800762e:	9200      	str	r2, [sp, #0]
 8007630:	2200      	movs	r2, #0
 8007632:	2100      	movs	r1, #0
 8007634:	2001      	movs	r0, #1
 8007636:	f000 fa29 	bl	8007a8c <xQueueGenericCreateStatic>
 800763a:	61f8      	str	r0, [r7, #28]
 800763c:	e005      	b.n	800764a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800763e:	2203      	movs	r2, #3
 8007640:	2100      	movs	r1, #0
 8007642:	2001      	movs	r0, #1
 8007644:	f000 fa9a 	bl	8007b7c <xQueueGenericCreate>
 8007648:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d022      	beq.n	8007696 <osSemaphoreNew+0xe8>
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d01f      	beq.n	8007696 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007656:	2300      	movs	r3, #0
 8007658:	2200      	movs	r2, #0
 800765a:	2100      	movs	r1, #0
 800765c:	69f8      	ldr	r0, [r7, #28]
 800765e:	f000 fb55 	bl	8007d0c <xQueueGenericSend>
 8007662:	4603      	mov	r3, r0
 8007664:	2b01      	cmp	r3, #1
 8007666:	d016      	beq.n	8007696 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007668:	69f8      	ldr	r0, [r7, #28]
 800766a:	f000 ffe1 	bl	8008630 <vQueueDelete>
            hSemaphore = NULL;
 800766e:	2300      	movs	r3, #0
 8007670:	61fb      	str	r3, [r7, #28]
 8007672:	e010      	b.n	8007696 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d108      	bne.n	800768c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	461a      	mov	r2, r3
 8007680:	68b9      	ldr	r1, [r7, #8]
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 fad7 	bl	8007c36 <xQueueCreateCountingSemaphoreStatic>
 8007688:	61f8      	str	r0, [r7, #28]
 800768a:	e004      	b.n	8007696 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800768c:	68b9      	ldr	r1, [r7, #8]
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 fb08 	bl	8007ca4 <xQueueCreateCountingSemaphore>
 8007694:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00c      	beq.n	80076b6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <osSemaphoreNew+0xfc>
          name = attr->name;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	e001      	b.n	80076ae <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80076ae:	6979      	ldr	r1, [r7, #20]
 80076b0:	69f8      	ldr	r0, [r7, #28]
 80076b2:	f001 f909 	bl	80088c8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80076b6:	69fb      	ldr	r3, [r7, #28]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3720      	adds	r7, #32
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d103      	bne.n	80076e0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80076d8:	f06f 0303 	mvn.w	r3, #3
 80076dc:	617b      	str	r3, [r7, #20]
 80076de:	e039      	b.n	8007754 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076e0:	f3ef 8305 	mrs	r3, IPSR
 80076e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80076e6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d022      	beq.n	8007732 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80076f2:	f06f 0303 	mvn.w	r3, #3
 80076f6:	617b      	str	r3, [r7, #20]
 80076f8:	e02c      	b.n	8007754 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80076fe:	f107 0308 	add.w	r3, r7, #8
 8007702:	461a      	mov	r2, r3
 8007704:	2100      	movs	r1, #0
 8007706:	6938      	ldr	r0, [r7, #16]
 8007708:	f000 ff12 	bl	8008530 <xQueueReceiveFromISR>
 800770c:	4603      	mov	r3, r0
 800770e:	2b01      	cmp	r3, #1
 8007710:	d003      	beq.n	800771a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8007712:	f06f 0302 	mvn.w	r3, #2
 8007716:	617b      	str	r3, [r7, #20]
 8007718:	e01c      	b.n	8007754 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d019      	beq.n	8007754 <osSemaphoreAcquire+0x94>
 8007720:	4b0f      	ldr	r3, [pc, #60]	; (8007760 <osSemaphoreAcquire+0xa0>)
 8007722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007726:	601a      	str	r2, [r3, #0]
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	e010      	b.n	8007754 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007732:	6839      	ldr	r1, [r7, #0]
 8007734:	6938      	ldr	r0, [r7, #16]
 8007736:	f000 fdef 	bl	8008318 <xQueueSemaphoreTake>
 800773a:	4603      	mov	r3, r0
 800773c:	2b01      	cmp	r3, #1
 800773e:	d009      	beq.n	8007754 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8007746:	f06f 0301 	mvn.w	r3, #1
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	e002      	b.n	8007754 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800774e:	f06f 0302 	mvn.w	r3, #2
 8007752:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007754:	697b      	ldr	r3, [r7, #20]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3718      	adds	r7, #24
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	e000ed04 	.word	0xe000ed04

08007764 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007770:	2300      	movs	r3, #0
 8007772:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d103      	bne.n	8007782 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800777a:	f06f 0303 	mvn.w	r3, #3
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	e02c      	b.n	80077dc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007782:	f3ef 8305 	mrs	r3, IPSR
 8007786:	60fb      	str	r3, [r7, #12]
  return(result);
 8007788:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800778a:	2b00      	cmp	r3, #0
 800778c:	d01a      	beq.n	80077c4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800778e:	2300      	movs	r3, #0
 8007790:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007792:	f107 0308 	add.w	r3, r7, #8
 8007796:	4619      	mov	r1, r3
 8007798:	6938      	ldr	r0, [r7, #16]
 800779a:	f000 fc50 	bl	800803e <xQueueGiveFromISR>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d003      	beq.n	80077ac <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80077a4:	f06f 0302 	mvn.w	r3, #2
 80077a8:	617b      	str	r3, [r7, #20]
 80077aa:	e017      	b.n	80077dc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d014      	beq.n	80077dc <osSemaphoreRelease+0x78>
 80077b2:	4b0d      	ldr	r3, [pc, #52]	; (80077e8 <osSemaphoreRelease+0x84>)
 80077b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077b8:	601a      	str	r2, [r3, #0]
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	e00b      	b.n	80077dc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80077c4:	2300      	movs	r3, #0
 80077c6:	2200      	movs	r2, #0
 80077c8:	2100      	movs	r1, #0
 80077ca:	6938      	ldr	r0, [r7, #16]
 80077cc:	f000 fa9e 	bl	8007d0c <xQueueGenericSend>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d002      	beq.n	80077dc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80077d6:	f06f 0302 	mvn.w	r3, #2
 80077da:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80077dc:	697b      	ldr	r3, [r7, #20]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	e000ed04 	.word	0xe000ed04

080077ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4a07      	ldr	r2, [pc, #28]	; (8007818 <vApplicationGetIdleTaskMemory+0x2c>)
 80077fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	4a06      	ldr	r2, [pc, #24]	; (800781c <vApplicationGetIdleTaskMemory+0x30>)
 8007802:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2280      	movs	r2, #128	; 0x80
 8007808:	601a      	str	r2, [r3, #0]
}
 800780a:	bf00      	nop
 800780c:	3714      	adds	r7, #20
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	200005a4 	.word	0x200005a4
 800781c:	20000600 	.word	0x20000600

08007820 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4a07      	ldr	r2, [pc, #28]	; (800784c <vApplicationGetTimerTaskMemory+0x2c>)
 8007830:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	4a06      	ldr	r2, [pc, #24]	; (8007850 <vApplicationGetTimerTaskMemory+0x30>)
 8007836:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800783e:	601a      	str	r2, [r3, #0]
}
 8007840:	bf00      	nop
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	20000800 	.word	0x20000800
 8007850:	2000085c 	.word	0x2000085c

08007854 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f103 0208 	add.w	r2, r3, #8
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f04f 32ff 	mov.w	r2, #4294967295
 800786c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f103 0208 	add.w	r2, r3, #8
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f103 0208 	add.w	r2, r3, #8
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80078a2:	bf00      	nop
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078ae:	b480      	push	{r7}
 80078b0:	b085      	sub	sp, #20
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	1c5a      	adds	r2, r3, #1
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	601a      	str	r2, [r3, #0]
}
 80078ea:	bf00      	nop
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078f6:	b480      	push	{r7}
 80078f8:	b085      	sub	sp, #20
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790c:	d103      	bne.n	8007916 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	e00c      	b.n	8007930 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	3308      	adds	r3, #8
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	e002      	b.n	8007924 <vListInsert+0x2e>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	429a      	cmp	r2, r3
 800792e:	d2f6      	bcs.n	800791e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	601a      	str	r2, [r3, #0]
}
 800795c:	bf00      	nop
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	6892      	ldr	r2, [r2, #8]
 800797e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	6852      	ldr	r2, [r2, #4]
 8007988:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	429a      	cmp	r2, r3
 8007992:	d103      	bne.n	800799c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689a      	ldr	r2, [r3, #8]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	1e5a      	subs	r2, r3, #1
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10a      	bne.n	80079e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80079e2:	bf00      	nop
 80079e4:	e7fe      	b.n	80079e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80079e6:	f002 fc6d 	bl	800a2c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f2:	68f9      	ldr	r1, [r7, #12]
 80079f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80079f6:	fb01 f303 	mul.w	r3, r1, r3
 80079fa:	441a      	add	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a16:	3b01      	subs	r3, #1
 8007a18:	68f9      	ldr	r1, [r7, #12]
 8007a1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a1c:	fb01 f303 	mul.w	r3, r1, r3
 8007a20:	441a      	add	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	22ff      	movs	r2, #255	; 0xff
 8007a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	22ff      	movs	r2, #255	; 0xff
 8007a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d114      	bne.n	8007a66 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d01a      	beq.n	8007a7a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	3310      	adds	r3, #16
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f001 fc25 	bl	8009298 <xTaskRemoveFromEventList>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d012      	beq.n	8007a7a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007a54:	4b0c      	ldr	r3, [pc, #48]	; (8007a88 <xQueueGenericReset+0xcc>)
 8007a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	f3bf 8f6f 	isb	sy
 8007a64:	e009      	b.n	8007a7a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	3310      	adds	r3, #16
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7ff fef2 	bl	8007854 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	3324      	adds	r3, #36	; 0x24
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7ff feed 	bl	8007854 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a7a:	f002 fc53 	bl	800a324 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007a7e:	2301      	movs	r3, #1
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	e000ed04 	.word	0xe000ed04

08007a8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b08e      	sub	sp, #56	; 0x38
 8007a90:	af02      	add	r7, sp, #8
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
 8007a98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10a      	bne.n	8007ab6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ab2:	bf00      	nop
 8007ab4:	e7fe      	b.n	8007ab4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10a      	bne.n	8007ad2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ace:	bf00      	nop
 8007ad0:	e7fe      	b.n	8007ad0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <xQueueGenericCreateStatic+0x52>
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <xQueueGenericCreateStatic+0x56>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e000      	b.n	8007ae4 <xQueueGenericCreateStatic+0x58>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10a      	bne.n	8007afe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	623b      	str	r3, [r7, #32]
}
 8007afa:	bf00      	nop
 8007afc:	e7fe      	b.n	8007afc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d102      	bne.n	8007b0a <xQueueGenericCreateStatic+0x7e>
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <xQueueGenericCreateStatic+0x82>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e000      	b.n	8007b10 <xQueueGenericCreateStatic+0x84>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10a      	bne.n	8007b2a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	61fb      	str	r3, [r7, #28]
}
 8007b26:	bf00      	nop
 8007b28:	e7fe      	b.n	8007b28 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b2a:	2350      	movs	r3, #80	; 0x50
 8007b2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2b50      	cmp	r3, #80	; 0x50
 8007b32:	d00a      	beq.n	8007b4a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b38:	f383 8811 	msr	BASEPRI, r3
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	61bb      	str	r3, [r7, #24]
}
 8007b46:	bf00      	nop
 8007b48:	e7fe      	b.n	8007b48 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007b4a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00d      	beq.n	8007b72 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	4613      	mov	r3, r2
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	68b9      	ldr	r1, [r7, #8]
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 f83f 	bl	8007bf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3730      	adds	r7, #48	; 0x30
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b08a      	sub	sp, #40	; 0x28
 8007b80:	af02      	add	r7, sp, #8
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	4613      	mov	r3, r2
 8007b88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10a      	bne.n	8007ba6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	613b      	str	r3, [r7, #16]
}
 8007ba2:	bf00      	nop
 8007ba4:	e7fe      	b.n	8007ba4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	fb02 f303 	mul.w	r3, r2, r3
 8007bae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	3350      	adds	r3, #80	; 0x50
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f002 fca7 	bl	800a508 <pvPortMalloc>
 8007bba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d011      	beq.n	8007be6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	3350      	adds	r3, #80	; 0x50
 8007bca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bd4:	79fa      	ldrb	r2, [r7, #7]
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	68b9      	ldr	r1, [r7, #8]
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 f805 	bl	8007bf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007be6:	69bb      	ldr	r3, [r7, #24]
	}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3720      	adds	r7, #32
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d103      	bne.n	8007c0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	e002      	b.n	8007c12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c1e:	2101      	movs	r1, #1
 8007c20:	69b8      	ldr	r0, [r7, #24]
 8007c22:	f7ff fecb 	bl	80079bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	78fa      	ldrb	r2, [r7, #3]
 8007c2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c2e:	bf00      	nop
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b08a      	sub	sp, #40	; 0x28
 8007c3a:	af02      	add	r7, sp, #8
 8007c3c:	60f8      	str	r0, [r7, #12]
 8007c3e:	60b9      	str	r1, [r7, #8]
 8007c40:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10a      	bne.n	8007c5e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4c:	f383 8811 	msr	BASEPRI, r3
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f3bf 8f4f 	dsb	sy
 8007c58:	61bb      	str	r3, [r7, #24]
}
 8007c5a:	bf00      	nop
 8007c5c:	e7fe      	b.n	8007c5c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d90a      	bls.n	8007c7c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6a:	f383 8811 	msr	BASEPRI, r3
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	617b      	str	r3, [r7, #20]
}
 8007c78:	bf00      	nop
 8007c7a:	e7fe      	b.n	8007c7a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	2100      	movs	r1, #0
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f7ff ff00 	bl	8007a8c <xQueueGenericCreateStatic>
 8007c8c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007c9a:	69fb      	ldr	r3, [r7, #28]
	}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3720      	adds	r7, #32
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10a      	bne.n	8007cca <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	613b      	str	r3, [r7, #16]
}
 8007cc6:	bf00      	nop
 8007cc8:	e7fe      	b.n	8007cc8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d90a      	bls.n	8007ce8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	60fb      	str	r3, [r7, #12]
}
 8007ce4:	bf00      	nop
 8007ce6:	e7fe      	b.n	8007ce6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007ce8:	2202      	movs	r2, #2
 8007cea:	2100      	movs	r1, #0
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f7ff ff45 	bl	8007b7c <xQueueGenericCreate>
 8007cf2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d002      	beq.n	8007d00 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007d00:	697b      	ldr	r3, [r7, #20]
	}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
	...

08007d0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b08e      	sub	sp, #56	; 0x38
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
 8007d18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10a      	bne.n	8007d3e <xQueueGenericSend+0x32>
	__asm volatile
 8007d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2c:	f383 8811 	msr	BASEPRI, r3
 8007d30:	f3bf 8f6f 	isb	sy
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d3a:	bf00      	nop
 8007d3c:	e7fe      	b.n	8007d3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d103      	bne.n	8007d4c <xQueueGenericSend+0x40>
 8007d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <xQueueGenericSend+0x44>
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e000      	b.n	8007d52 <xQueueGenericSend+0x46>
 8007d50:	2300      	movs	r3, #0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10a      	bne.n	8007d6c <xQueueGenericSend+0x60>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d68:	bf00      	nop
 8007d6a:	e7fe      	b.n	8007d6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d103      	bne.n	8007d7a <xQueueGenericSend+0x6e>
 8007d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d101      	bne.n	8007d7e <xQueueGenericSend+0x72>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e000      	b.n	8007d80 <xQueueGenericSend+0x74>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10a      	bne.n	8007d9a <xQueueGenericSend+0x8e>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	623b      	str	r3, [r7, #32]
}
 8007d96:	bf00      	nop
 8007d98:	e7fe      	b.n	8007d98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d9a:	f001 fc3b 	bl	8009614 <xTaskGetSchedulerState>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d102      	bne.n	8007daa <xQueueGenericSend+0x9e>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <xQueueGenericSend+0xa2>
 8007daa:	2301      	movs	r3, #1
 8007dac:	e000      	b.n	8007db0 <xQueueGenericSend+0xa4>
 8007dae:	2300      	movs	r3, #0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10a      	bne.n	8007dca <xQueueGenericSend+0xbe>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	61fb      	str	r3, [r7, #28]
}
 8007dc6:	bf00      	nop
 8007dc8:	e7fe      	b.n	8007dc8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dca:	f002 fa7b 	bl	800a2c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d302      	bcc.n	8007de0 <xQueueGenericSend+0xd4>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d129      	bne.n	8007e34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	68b9      	ldr	r1, [r7, #8]
 8007de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007de6:	f000 fc5e 	bl	80086a6 <prvCopyDataToQueue>
 8007dea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d010      	beq.n	8007e16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df6:	3324      	adds	r3, #36	; 0x24
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f001 fa4d 	bl	8009298 <xTaskRemoveFromEventList>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d013      	beq.n	8007e2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e04:	4b3f      	ldr	r3, [pc, #252]	; (8007f04 <xQueueGenericSend+0x1f8>)
 8007e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	e00a      	b.n	8007e2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d007      	beq.n	8007e2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e1c:	4b39      	ldr	r3, [pc, #228]	; (8007f04 <xQueueGenericSend+0x1f8>)
 8007e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e2c:	f002 fa7a 	bl	800a324 <vPortExitCritical>
				return pdPASS;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e063      	b.n	8007efc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d103      	bne.n	8007e42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e3a:	f002 fa73 	bl	800a324 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	e05c      	b.n	8007efc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d106      	bne.n	8007e56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e48:	f107 0314 	add.w	r3, r7, #20
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f001 fa87 	bl	8009360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e52:	2301      	movs	r3, #1
 8007e54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e56:	f002 fa65 	bl	800a324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e5a:	f000 fff9 	bl	8008e50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e5e:	f002 fa31 	bl	800a2c4 <vPortEnterCritical>
 8007e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e68:	b25b      	sxtb	r3, r3
 8007e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6e:	d103      	bne.n	8007e78 <xQueueGenericSend+0x16c>
 8007e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e7e:	b25b      	sxtb	r3, r3
 8007e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e84:	d103      	bne.n	8007e8e <xQueueGenericSend+0x182>
 8007e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e8e:	f002 fa49 	bl	800a324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e92:	1d3a      	adds	r2, r7, #4
 8007e94:	f107 0314 	add.w	r3, r7, #20
 8007e98:	4611      	mov	r1, r2
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f001 fa76 	bl	800938c <xTaskCheckForTimeOut>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d124      	bne.n	8007ef0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ea6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ea8:	f000 fcf5 	bl	8008896 <prvIsQueueFull>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d018      	beq.n	8007ee4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	3310      	adds	r3, #16
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	4611      	mov	r1, r2
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f001 f99c 	bl	80091f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ec2:	f000 fc80 	bl	80087c6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007ec6:	f000 ffd1 	bl	8008e6c <xTaskResumeAll>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f47f af7c 	bne.w	8007dca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007ed2:	4b0c      	ldr	r3, [pc, #48]	; (8007f04 <xQueueGenericSend+0x1f8>)
 8007ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	e772      	b.n	8007dca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ee6:	f000 fc6e 	bl	80087c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007eea:	f000 ffbf 	bl	8008e6c <xTaskResumeAll>
 8007eee:	e76c      	b.n	8007dca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ef2:	f000 fc68 	bl	80087c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ef6:	f000 ffb9 	bl	8008e6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007efa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3738      	adds	r7, #56	; 0x38
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	e000ed04 	.word	0xe000ed04

08007f08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b090      	sub	sp, #64	; 0x40
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10a      	bne.n	8007f36 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f32:	bf00      	nop
 8007f34:	e7fe      	b.n	8007f34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d103      	bne.n	8007f44 <xQueueGenericSendFromISR+0x3c>
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d101      	bne.n	8007f48 <xQueueGenericSendFromISR+0x40>
 8007f44:	2301      	movs	r3, #1
 8007f46:	e000      	b.n	8007f4a <xQueueGenericSendFromISR+0x42>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10a      	bne.n	8007f64 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f60:	bf00      	nop
 8007f62:	e7fe      	b.n	8007f62 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d103      	bne.n	8007f72 <xQueueGenericSendFromISR+0x6a>
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d101      	bne.n	8007f76 <xQueueGenericSendFromISR+0x6e>
 8007f72:	2301      	movs	r3, #1
 8007f74:	e000      	b.n	8007f78 <xQueueGenericSendFromISR+0x70>
 8007f76:	2300      	movs	r3, #0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	623b      	str	r3, [r7, #32]
}
 8007f8e:	bf00      	nop
 8007f90:	e7fe      	b.n	8007f90 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f92:	f002 fa79 	bl	800a488 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f96:	f3ef 8211 	mrs	r2, BASEPRI
 8007f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	61fa      	str	r2, [r7, #28]
 8007fac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007fae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fb0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d302      	bcc.n	8007fc4 <xQueueGenericSendFromISR+0xbc>
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d12f      	bne.n	8008024 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	68b9      	ldr	r1, [r7, #8]
 8007fd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007fda:	f000 fb64 	bl	80086a6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007fde:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe6:	d112      	bne.n	800800e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d016      	beq.n	800801e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff2:	3324      	adds	r3, #36	; 0x24
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f001 f94f 	bl	8009298 <xTaskRemoveFromEventList>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00e      	beq.n	800801e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00b      	beq.n	800801e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	e007      	b.n	800801e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800800e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008012:	3301      	adds	r3, #1
 8008014:	b2db      	uxtb	r3, r3
 8008016:	b25a      	sxtb	r2, r3
 8008018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800801e:	2301      	movs	r3, #1
 8008020:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008022:	e001      	b.n	8008028 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008024:	2300      	movs	r3, #0
 8008026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008032:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008036:	4618      	mov	r0, r3
 8008038:	3740      	adds	r7, #64	; 0x40
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b08e      	sub	sp, #56	; 0x38
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800804c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10a      	bne.n	8008068 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	623b      	str	r3, [r7, #32]
}
 8008064:	bf00      	nop
 8008066:	e7fe      	b.n	8008066 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00a      	beq.n	8008086 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	61fb      	str	r3, [r7, #28]
}
 8008082:	bf00      	nop
 8008084:	e7fe      	b.n	8008084 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d103      	bne.n	8008096 <xQueueGiveFromISR+0x58>
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <xQueueGiveFromISR+0x5c>
 8008096:	2301      	movs	r3, #1
 8008098:	e000      	b.n	800809c <xQueueGiveFromISR+0x5e>
 800809a:	2300      	movs	r3, #0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10a      	bne.n	80080b6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	61bb      	str	r3, [r7, #24]
}
 80080b2:	bf00      	nop
 80080b4:	e7fe      	b.n	80080b4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080b6:	f002 f9e7 	bl	800a488 <vPortValidateInterruptPriority>
	__asm volatile
 80080ba:	f3ef 8211 	mrs	r2, BASEPRI
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	617a      	str	r2, [r7, #20]
 80080d0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80080d2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80080d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80080dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d22b      	bcs.n	800813e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80080f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f2:	1c5a      	adds	r2, r3, #1
 80080f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80080f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008100:	d112      	bne.n	8008128 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	2b00      	cmp	r3, #0
 8008108:	d016      	beq.n	8008138 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800810a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810c:	3324      	adds	r3, #36	; 0x24
 800810e:	4618      	mov	r0, r3
 8008110:	f001 f8c2 	bl	8009298 <xTaskRemoveFromEventList>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00e      	beq.n	8008138 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00b      	beq.n	8008138 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	2201      	movs	r2, #1
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	e007      	b.n	8008138 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800812c:	3301      	adds	r3, #1
 800812e:	b2db      	uxtb	r3, r3
 8008130:	b25a      	sxtb	r2, r3
 8008132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008138:	2301      	movs	r3, #1
 800813a:	637b      	str	r3, [r7, #52]	; 0x34
 800813c:	e001      	b.n	8008142 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800813e:	2300      	movs	r3, #0
 8008140:	637b      	str	r3, [r7, #52]	; 0x34
 8008142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008144:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f383 8811 	msr	BASEPRI, r3
}
 800814c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800814e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008150:	4618      	mov	r0, r3
 8008152:	3738      	adds	r7, #56	; 0x38
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b08c      	sub	sp, #48	; 0x30
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008164:	2300      	movs	r3, #0
 8008166:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800816c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10a      	bne.n	8008188 <xQueueReceive+0x30>
	__asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	623b      	str	r3, [r7, #32]
}
 8008184:	bf00      	nop
 8008186:	e7fe      	b.n	8008186 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d103      	bne.n	8008196 <xQueueReceive+0x3e>
 800818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <xQueueReceive+0x42>
 8008196:	2301      	movs	r3, #1
 8008198:	e000      	b.n	800819c <xQueueReceive+0x44>
 800819a:	2300      	movs	r3, #0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10a      	bne.n	80081b6 <xQueueReceive+0x5e>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	61fb      	str	r3, [r7, #28]
}
 80081b2:	bf00      	nop
 80081b4:	e7fe      	b.n	80081b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081b6:	f001 fa2d 	bl	8009614 <xTaskGetSchedulerState>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d102      	bne.n	80081c6 <xQueueReceive+0x6e>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d101      	bne.n	80081ca <xQueueReceive+0x72>
 80081c6:	2301      	movs	r3, #1
 80081c8:	e000      	b.n	80081cc <xQueueReceive+0x74>
 80081ca:	2300      	movs	r3, #0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10a      	bne.n	80081e6 <xQueueReceive+0x8e>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	61bb      	str	r3, [r7, #24]
}
 80081e2:	bf00      	nop
 80081e4:	e7fe      	b.n	80081e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081e6:	f002 f86d 	bl	800a2c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d01f      	beq.n	8008236 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80081f6:	68b9      	ldr	r1, [r7, #8]
 80081f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081fa:	f000 fabe 	bl	800877a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	1e5a      	subs	r2, r3, #1
 8008202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008204:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00f      	beq.n	800822e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800820e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008210:	3310      	adds	r3, #16
 8008212:	4618      	mov	r0, r3
 8008214:	f001 f840 	bl	8009298 <xTaskRemoveFromEventList>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d007      	beq.n	800822e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800821e:	4b3d      	ldr	r3, [pc, #244]	; (8008314 <xQueueReceive+0x1bc>)
 8008220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008224:	601a      	str	r2, [r3, #0]
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800822e:	f002 f879 	bl	800a324 <vPortExitCritical>
				return pdPASS;
 8008232:	2301      	movs	r3, #1
 8008234:	e069      	b.n	800830a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d103      	bne.n	8008244 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800823c:	f002 f872 	bl	800a324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008240:	2300      	movs	r3, #0
 8008242:	e062      	b.n	800830a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008246:	2b00      	cmp	r3, #0
 8008248:	d106      	bne.n	8008258 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800824a:	f107 0310 	add.w	r3, r7, #16
 800824e:	4618      	mov	r0, r3
 8008250:	f001 f886 	bl	8009360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008254:	2301      	movs	r3, #1
 8008256:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008258:	f002 f864 	bl	800a324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800825c:	f000 fdf8 	bl	8008e50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008260:	f002 f830 	bl	800a2c4 <vPortEnterCritical>
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800826a:	b25b      	sxtb	r3, r3
 800826c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008270:	d103      	bne.n	800827a <xQueueReceive+0x122>
 8008272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800827a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008280:	b25b      	sxtb	r3, r3
 8008282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008286:	d103      	bne.n	8008290 <xQueueReceive+0x138>
 8008288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828a:	2200      	movs	r2, #0
 800828c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008290:	f002 f848 	bl	800a324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008294:	1d3a      	adds	r2, r7, #4
 8008296:	f107 0310 	add.w	r3, r7, #16
 800829a:	4611      	mov	r1, r2
 800829c:	4618      	mov	r0, r3
 800829e:	f001 f875 	bl	800938c <xTaskCheckForTimeOut>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d123      	bne.n	80082f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082aa:	f000 fade 	bl	800886a <prvIsQueueEmpty>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d017      	beq.n	80082e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	3324      	adds	r3, #36	; 0x24
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	4611      	mov	r1, r2
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 ff9b 	bl	80091f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80082c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082c4:	f000 fa7f 	bl	80087c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80082c8:	f000 fdd0 	bl	8008e6c <xTaskResumeAll>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d189      	bne.n	80081e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80082d2:	4b10      	ldr	r3, [pc, #64]	; (8008314 <xQueueReceive+0x1bc>)
 80082d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	e780      	b.n	80081e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80082e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082e6:	f000 fa6e 	bl	80087c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082ea:	f000 fdbf 	bl	8008e6c <xTaskResumeAll>
 80082ee:	e77a      	b.n	80081e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80082f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082f2:	f000 fa68 	bl	80087c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082f6:	f000 fdb9 	bl	8008e6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082fc:	f000 fab5 	bl	800886a <prvIsQueueEmpty>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	f43f af6f 	beq.w	80081e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008308:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800830a:	4618      	mov	r0, r3
 800830c:	3730      	adds	r7, #48	; 0x30
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	e000ed04 	.word	0xe000ed04

08008318 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08e      	sub	sp, #56	; 0x38
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008322:	2300      	movs	r3, #0
 8008324:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800832a:	2300      	movs	r3, #0
 800832c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800832e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10a      	bne.n	800834a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	623b      	str	r3, [r7, #32]
}
 8008346:	bf00      	nop
 8008348:	e7fe      	b.n	8008348 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800834a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00a      	beq.n	8008368 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	61fb      	str	r3, [r7, #28]
}
 8008364:	bf00      	nop
 8008366:	e7fe      	b.n	8008366 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008368:	f001 f954 	bl	8009614 <xTaskGetSchedulerState>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d102      	bne.n	8008378 <xQueueSemaphoreTake+0x60>
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d101      	bne.n	800837c <xQueueSemaphoreTake+0x64>
 8008378:	2301      	movs	r3, #1
 800837a:	e000      	b.n	800837e <xQueueSemaphoreTake+0x66>
 800837c:	2300      	movs	r3, #0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10a      	bne.n	8008398 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	61bb      	str	r3, [r7, #24]
}
 8008394:	bf00      	nop
 8008396:	e7fe      	b.n	8008396 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008398:	f001 ff94 	bl	800a2c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800839c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80083a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d024      	beq.n	80083f2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80083a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083aa:	1e5a      	subs	r2, r3, #1
 80083ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d104      	bne.n	80083c2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80083b8:	f001 faa2 	bl	8009900 <pvTaskIncrementMutexHeldCount>
 80083bc:	4602      	mov	r2, r0
 80083be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00f      	beq.n	80083ea <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083cc:	3310      	adds	r3, #16
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 ff62 	bl	8009298 <xTaskRemoveFromEventList>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d007      	beq.n	80083ea <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083da:	4b54      	ldr	r3, [pc, #336]	; (800852c <xQueueSemaphoreTake+0x214>)
 80083dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083e0:	601a      	str	r2, [r3, #0]
 80083e2:	f3bf 8f4f 	dsb	sy
 80083e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083ea:	f001 ff9b 	bl	800a324 <vPortExitCritical>
				return pdPASS;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e097      	b.n	8008522 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d111      	bne.n	800841c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00a      	beq.n	8008414 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	617b      	str	r3, [r7, #20]
}
 8008410:	bf00      	nop
 8008412:	e7fe      	b.n	8008412 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008414:	f001 ff86 	bl	800a324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008418:	2300      	movs	r3, #0
 800841a:	e082      	b.n	8008522 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800841c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841e:	2b00      	cmp	r3, #0
 8008420:	d106      	bne.n	8008430 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008422:	f107 030c 	add.w	r3, r7, #12
 8008426:	4618      	mov	r0, r3
 8008428:	f000 ff9a 	bl	8009360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800842c:	2301      	movs	r3, #1
 800842e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008430:	f001 ff78 	bl	800a324 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008434:	f000 fd0c 	bl	8008e50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008438:	f001 ff44 	bl	800a2c4 <vPortEnterCritical>
 800843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008442:	b25b      	sxtb	r3, r3
 8008444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008448:	d103      	bne.n	8008452 <xQueueSemaphoreTake+0x13a>
 800844a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008454:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008458:	b25b      	sxtb	r3, r3
 800845a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845e:	d103      	bne.n	8008468 <xQueueSemaphoreTake+0x150>
 8008460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008468:	f001 ff5c 	bl	800a324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800846c:	463a      	mov	r2, r7
 800846e:	f107 030c 	add.w	r3, r7, #12
 8008472:	4611      	mov	r1, r2
 8008474:	4618      	mov	r0, r3
 8008476:	f000 ff89 	bl	800938c <xTaskCheckForTimeOut>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d132      	bne.n	80084e6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008480:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008482:	f000 f9f2 	bl	800886a <prvIsQueueEmpty>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d026      	beq.n	80084da <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800848c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d109      	bne.n	80084a8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008494:	f001 ff16 	bl	800a2c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	4618      	mov	r0, r3
 800849e:	f001 f8d7 	bl	8009650 <xTaskPriorityInherit>
 80084a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80084a4:	f001 ff3e 	bl	800a324 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084aa:	3324      	adds	r3, #36	; 0x24
 80084ac:	683a      	ldr	r2, [r7, #0]
 80084ae:	4611      	mov	r1, r2
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 fea1 	bl	80091f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084b8:	f000 f985 	bl	80087c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084bc:	f000 fcd6 	bl	8008e6c <xTaskResumeAll>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f47f af68 	bne.w	8008398 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80084c8:	4b18      	ldr	r3, [pc, #96]	; (800852c <xQueueSemaphoreTake+0x214>)
 80084ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	e75e      	b.n	8008398 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80084da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084dc:	f000 f973 	bl	80087c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084e0:	f000 fcc4 	bl	8008e6c <xTaskResumeAll>
 80084e4:	e758      	b.n	8008398 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80084e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084e8:	f000 f96d 	bl	80087c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084ec:	f000 fcbe 	bl	8008e6c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084f2:	f000 f9ba 	bl	800886a <prvIsQueueEmpty>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f43f af4d 	beq.w	8008398 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00d      	beq.n	8008520 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008504:	f001 fede 	bl	800a2c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008508:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800850a:	f000 f8b4 	bl	8008676 <prvGetDisinheritPriorityAfterTimeout>
 800850e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008516:	4618      	mov	r0, r3
 8008518:	f001 f970 	bl	80097fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800851c:	f001 ff02 	bl	800a324 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008520:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008522:	4618      	mov	r0, r3
 8008524:	3738      	adds	r7, #56	; 0x38
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	e000ed04 	.word	0xe000ed04

08008530 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b08e      	sub	sp, #56	; 0x38
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008542:	2b00      	cmp	r3, #0
 8008544:	d10a      	bne.n	800855c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854a:	f383 8811 	msr	BASEPRI, r3
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f3bf 8f4f 	dsb	sy
 8008556:	623b      	str	r3, [r7, #32]
}
 8008558:	bf00      	nop
 800855a:	e7fe      	b.n	800855a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d103      	bne.n	800856a <xQueueReceiveFromISR+0x3a>
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008566:	2b00      	cmp	r3, #0
 8008568:	d101      	bne.n	800856e <xQueueReceiveFromISR+0x3e>
 800856a:	2301      	movs	r3, #1
 800856c:	e000      	b.n	8008570 <xQueueReceiveFromISR+0x40>
 800856e:	2300      	movs	r3, #0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10a      	bne.n	800858a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	61fb      	str	r3, [r7, #28]
}
 8008586:	bf00      	nop
 8008588:	e7fe      	b.n	8008588 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800858a:	f001 ff7d 	bl	800a488 <vPortValidateInterruptPriority>
	__asm volatile
 800858e:	f3ef 8211 	mrs	r2, BASEPRI
 8008592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	61ba      	str	r2, [r7, #24]
 80085a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80085a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d02f      	beq.n	8008616 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80085b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085c0:	68b9      	ldr	r1, [r7, #8]
 80085c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085c4:	f000 f8d9 	bl	800877a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ca:	1e5a      	subs	r2, r3, #1
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80085d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d8:	d112      	bne.n	8008600 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d016      	beq.n	8008610 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e4:	3310      	adds	r3, #16
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 fe56 	bl	8009298 <xTaskRemoveFromEventList>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00e      	beq.n	8008610 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00b      	beq.n	8008610 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	e007      	b.n	8008610 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008604:	3301      	adds	r3, #1
 8008606:	b2db      	uxtb	r3, r3
 8008608:	b25a      	sxtb	r2, r3
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008610:	2301      	movs	r3, #1
 8008612:	637b      	str	r3, [r7, #52]	; 0x34
 8008614:	e001      	b.n	800861a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008616:	2300      	movs	r3, #0
 8008618:	637b      	str	r3, [r7, #52]	; 0x34
 800861a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	f383 8811 	msr	BASEPRI, r3
}
 8008624:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008628:	4618      	mov	r0, r3
 800862a:	3738      	adds	r7, #56	; 0x38
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10a      	bne.n	8008658 <vQueueDelete+0x28>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	60bb      	str	r3, [r7, #8]
}
 8008654:	bf00      	nop
 8008656:	e7fe      	b.n	8008656 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 f95f 	bl	800891c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008664:	2b00      	cmp	r3, #0
 8008666:	d102      	bne.n	800866e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f002 f819 	bl	800a6a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800866e:	bf00      	nop
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008676:	b480      	push	{r7}
 8008678:	b085      	sub	sp, #20
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008682:	2b00      	cmp	r3, #0
 8008684:	d006      	beq.n	8008694 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008690:	60fb      	str	r3, [r7, #12]
 8008692:	e001      	b.n	8008698 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008694:	2300      	movs	r3, #0
 8008696:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008698:	68fb      	ldr	r3, [r7, #12]
	}
 800869a:	4618      	mov	r0, r3
 800869c:	3714      	adds	r7, #20
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b086      	sub	sp, #24
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	60f8      	str	r0, [r7, #12]
 80086ae:	60b9      	str	r1, [r7, #8]
 80086b0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80086b2:	2300      	movs	r3, #0
 80086b4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10d      	bne.n	80086e0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d14d      	bne.n	8008768 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f001 f825 	bl	8009720 <xTaskPriorityDisinherit>
 80086d6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	609a      	str	r2, [r3, #8]
 80086de:	e043      	b.n	8008768 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d119      	bne.n	800871a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6858      	ldr	r0, [r3, #4]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ee:	461a      	mov	r2, r3
 80086f0:	68b9      	ldr	r1, [r7, #8]
 80086f2:	f002 f91d 	bl	800a930 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fe:	441a      	add	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	429a      	cmp	r2, r3
 800870e:	d32b      	bcc.n	8008768 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	605a      	str	r2, [r3, #4]
 8008718:	e026      	b.n	8008768 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	68d8      	ldr	r0, [r3, #12]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008722:	461a      	mov	r2, r3
 8008724:	68b9      	ldr	r1, [r7, #8]
 8008726:	f002 f903 	bl	800a930 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	68da      	ldr	r2, [r3, #12]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008732:	425b      	negs	r3, r3
 8008734:	441a      	add	r2, r3
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	68da      	ldr	r2, [r3, #12]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	429a      	cmp	r2, r3
 8008744:	d207      	bcs.n	8008756 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	689a      	ldr	r2, [r3, #8]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874e:	425b      	negs	r3, r3
 8008750:	441a      	add	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b02      	cmp	r3, #2
 800875a:	d105      	bne.n	8008768 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d002      	beq.n	8008768 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	3b01      	subs	r3, #1
 8008766:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	1c5a      	adds	r2, r3, #1
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008770:	697b      	ldr	r3, [r7, #20]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3718      	adds	r7, #24
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b082      	sub	sp, #8
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008788:	2b00      	cmp	r3, #0
 800878a:	d018      	beq.n	80087be <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	68da      	ldr	r2, [r3, #12]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008794:	441a      	add	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	68da      	ldr	r2, [r3, #12]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d303      	bcc.n	80087ae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68d9      	ldr	r1, [r3, #12]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b6:	461a      	mov	r2, r3
 80087b8:	6838      	ldr	r0, [r7, #0]
 80087ba:	f002 f8b9 	bl	800a930 <memcpy>
	}
}
 80087be:	bf00      	nop
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b084      	sub	sp, #16
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80087ce:	f001 fd79 	bl	800a2c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087d8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087da:	e011      	b.n	8008800 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d012      	beq.n	800880a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	3324      	adds	r3, #36	; 0x24
 80087e8:	4618      	mov	r0, r3
 80087ea:	f000 fd55 	bl	8009298 <xTaskRemoveFromEventList>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80087f4:	f000 fe2c 	bl	8009450 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
 80087fa:	3b01      	subs	r3, #1
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008804:	2b00      	cmp	r3, #0
 8008806:	dce9      	bgt.n	80087dc <prvUnlockQueue+0x16>
 8008808:	e000      	b.n	800880c <prvUnlockQueue+0x46>
					break;
 800880a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	22ff      	movs	r2, #255	; 0xff
 8008810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008814:	f001 fd86 	bl	800a324 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008818:	f001 fd54 	bl	800a2c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008822:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008824:	e011      	b.n	800884a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d012      	beq.n	8008854 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	3310      	adds	r3, #16
 8008832:	4618      	mov	r0, r3
 8008834:	f000 fd30 	bl	8009298 <xTaskRemoveFromEventList>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d001      	beq.n	8008842 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800883e:	f000 fe07 	bl	8009450 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008842:	7bbb      	ldrb	r3, [r7, #14]
 8008844:	3b01      	subs	r3, #1
 8008846:	b2db      	uxtb	r3, r3
 8008848:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800884a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800884e:	2b00      	cmp	r3, #0
 8008850:	dce9      	bgt.n	8008826 <prvUnlockQueue+0x60>
 8008852:	e000      	b.n	8008856 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008854:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	22ff      	movs	r2, #255	; 0xff
 800885a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800885e:	f001 fd61 	bl	800a324 <vPortExitCritical>
}
 8008862:	bf00      	nop
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008872:	f001 fd27 	bl	800a2c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887a:	2b00      	cmp	r3, #0
 800887c:	d102      	bne.n	8008884 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800887e:	2301      	movs	r3, #1
 8008880:	60fb      	str	r3, [r7, #12]
 8008882:	e001      	b.n	8008888 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008884:	2300      	movs	r3, #0
 8008886:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008888:	f001 fd4c 	bl	800a324 <vPortExitCritical>

	return xReturn;
 800888c:	68fb      	ldr	r3, [r7, #12]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800889e:	f001 fd11 	bl	800a2c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d102      	bne.n	80088b4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80088ae:	2301      	movs	r3, #1
 80088b0:	60fb      	str	r3, [r7, #12]
 80088b2:	e001      	b.n	80088b8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80088b4:	2300      	movs	r3, #0
 80088b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088b8:	f001 fd34 	bl	800a324 <vPortExitCritical>

	return xReturn;
 80088bc:	68fb      	ldr	r3, [r7, #12]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
	...

080088c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088d2:	2300      	movs	r3, #0
 80088d4:	60fb      	str	r3, [r7, #12]
 80088d6:	e014      	b.n	8008902 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80088d8:	4a0f      	ldr	r2, [pc, #60]	; (8008918 <vQueueAddToRegistry+0x50>)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d10b      	bne.n	80088fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80088e4:	490c      	ldr	r1, [pc, #48]	; (8008918 <vQueueAddToRegistry+0x50>)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80088ee:	4a0a      	ldr	r2, [pc, #40]	; (8008918 <vQueueAddToRegistry+0x50>)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	00db      	lsls	r3, r3, #3
 80088f4:	4413      	add	r3, r2
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80088fa:	e006      	b.n	800890a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	3301      	adds	r3, #1
 8008900:	60fb      	str	r3, [r7, #12]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2b07      	cmp	r3, #7
 8008906:	d9e7      	bls.n	80088d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008908:	bf00      	nop
 800890a:	bf00      	nop
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	20002188 	.word	0x20002188

0800891c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008924:	2300      	movs	r3, #0
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	e016      	b.n	8008958 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800892a:	4a10      	ldr	r2, [pc, #64]	; (800896c <vQueueUnregisterQueue+0x50>)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	00db      	lsls	r3, r3, #3
 8008930:	4413      	add	r3, r2
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	429a      	cmp	r2, r3
 8008938:	d10b      	bne.n	8008952 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800893a:	4a0c      	ldr	r2, [pc, #48]	; (800896c <vQueueUnregisterQueue+0x50>)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2100      	movs	r1, #0
 8008940:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008944:	4a09      	ldr	r2, [pc, #36]	; (800896c <vQueueUnregisterQueue+0x50>)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	00db      	lsls	r3, r3, #3
 800894a:	4413      	add	r3, r2
 800894c:	2200      	movs	r2, #0
 800894e:	605a      	str	r2, [r3, #4]
				break;
 8008950:	e006      	b.n	8008960 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3301      	adds	r3, #1
 8008956:	60fb      	str	r3, [r7, #12]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2b07      	cmp	r3, #7
 800895c:	d9e5      	bls.n	800892a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800895e:	bf00      	nop
 8008960:	bf00      	nop
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	20002188 	.word	0x20002188

08008970 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008980:	f001 fca0 	bl	800a2c4 <vPortEnterCritical>
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800898a:	b25b      	sxtb	r3, r3
 800898c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008990:	d103      	bne.n	800899a <vQueueWaitForMessageRestricted+0x2a>
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2200      	movs	r2, #0
 8008996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089a0:	b25b      	sxtb	r3, r3
 80089a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a6:	d103      	bne.n	80089b0 <vQueueWaitForMessageRestricted+0x40>
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089b0:	f001 fcb8 	bl	800a324 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d106      	bne.n	80089ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	3324      	adds	r3, #36	; 0x24
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	68b9      	ldr	r1, [r7, #8]
 80089c4:	4618      	mov	r0, r3
 80089c6:	f000 fc3b 	bl	8009240 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80089ca:	6978      	ldr	r0, [r7, #20]
 80089cc:	f7ff fefb 	bl	80087c6 <prvUnlockQueue>
	}
 80089d0:	bf00      	nop
 80089d2:	3718      	adds	r7, #24
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b08e      	sub	sp, #56	; 0x38
 80089dc:	af04      	add	r7, sp, #16
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
 80089e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80089e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10a      	bne.n	8008a02 <xTaskCreateStatic+0x2a>
	__asm volatile
 80089ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	623b      	str	r3, [r7, #32]
}
 80089fe:	bf00      	nop
 8008a00:	e7fe      	b.n	8008a00 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d10a      	bne.n	8008a1e <xTaskCreateStatic+0x46>
	__asm volatile
 8008a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	61fb      	str	r3, [r7, #28]
}
 8008a1a:	bf00      	nop
 8008a1c:	e7fe      	b.n	8008a1c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a1e:	235c      	movs	r3, #92	; 0x5c
 8008a20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	2b5c      	cmp	r3, #92	; 0x5c
 8008a26:	d00a      	beq.n	8008a3e <xTaskCreateStatic+0x66>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	61bb      	str	r3, [r7, #24]
}
 8008a3a:	bf00      	nop
 8008a3c:	e7fe      	b.n	8008a3c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008a3e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d01e      	beq.n	8008a84 <xTaskCreateStatic+0xac>
 8008a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d01b      	beq.n	8008a84 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a54:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	2202      	movs	r2, #2
 8008a5a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a5e:	2300      	movs	r3, #0
 8008a60:	9303      	str	r3, [sp, #12]
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	9302      	str	r3, [sp, #8]
 8008a66:	f107 0314 	add.w	r3, r7, #20
 8008a6a:	9301      	str	r3, [sp, #4]
 8008a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6e:	9300      	str	r3, [sp, #0]
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	68b9      	ldr	r1, [r7, #8]
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f000 f850 	bl	8008b1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a7e:	f000 f8dd 	bl	8008c3c <prvAddNewTaskToReadyList>
 8008a82:	e001      	b.n	8008a88 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008a84:	2300      	movs	r3, #0
 8008a86:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a88:	697b      	ldr	r3, [r7, #20]
	}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3728      	adds	r7, #40	; 0x28
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b08c      	sub	sp, #48	; 0x30
 8008a96:	af04      	add	r7, sp, #16
 8008a98:	60f8      	str	r0, [r7, #12]
 8008a9a:	60b9      	str	r1, [r7, #8]
 8008a9c:	603b      	str	r3, [r7, #0]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008aa2:	88fb      	ldrh	r3, [r7, #6]
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f001 fd2e 	bl	800a508 <pvPortMalloc>
 8008aac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00e      	beq.n	8008ad2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ab4:	205c      	movs	r0, #92	; 0x5c
 8008ab6:	f001 fd27 	bl	800a508 <pvPortMalloc>
 8008aba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d003      	beq.n	8008aca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	631a      	str	r2, [r3, #48]	; 0x30
 8008ac8:	e005      	b.n	8008ad6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008aca:	6978      	ldr	r0, [r7, #20]
 8008acc:	f001 fde8 	bl	800a6a0 <vPortFree>
 8008ad0:	e001      	b.n	8008ad6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d017      	beq.n	8008b0c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ae4:	88fa      	ldrh	r2, [r7, #6]
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	9303      	str	r3, [sp, #12]
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	9302      	str	r3, [sp, #8]
 8008aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af0:	9301      	str	r3, [sp, #4]
 8008af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	68b9      	ldr	r1, [r7, #8]
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f000 f80e 	bl	8008b1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b00:	69f8      	ldr	r0, [r7, #28]
 8008b02:	f000 f89b 	bl	8008c3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b06:	2301      	movs	r3, #1
 8008b08:	61bb      	str	r3, [r7, #24]
 8008b0a:	e002      	b.n	8008b12 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b10:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b12:	69bb      	ldr	r3, [r7, #24]
	}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3720      	adds	r7, #32
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b088      	sub	sp, #32
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
 8008b28:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	461a      	mov	r2, r3
 8008b34:	21a5      	movs	r1, #165	; 0xa5
 8008b36:	f001 ff23 	bl	800a980 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b44:	3b01      	subs	r3, #1
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4413      	add	r3, r2
 8008b4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	f023 0307 	bic.w	r3, r3, #7
 8008b52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	f003 0307 	and.w	r3, r3, #7
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00a      	beq.n	8008b74 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	617b      	str	r3, [r7, #20]
}
 8008b70:	bf00      	nop
 8008b72:	e7fe      	b.n	8008b72 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d01f      	beq.n	8008bba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	61fb      	str	r3, [r7, #28]
 8008b7e:	e012      	b.n	8008ba6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	4413      	add	r3, r2
 8008b86:	7819      	ldrb	r1, [r3, #0]
 8008b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	3334      	adds	r3, #52	; 0x34
 8008b90:	460a      	mov	r2, r1
 8008b92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	4413      	add	r3, r2
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d006      	beq.n	8008bae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	61fb      	str	r3, [r7, #28]
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	2b0f      	cmp	r3, #15
 8008baa:	d9e9      	bls.n	8008b80 <prvInitialiseNewTask+0x64>
 8008bac:	e000      	b.n	8008bb0 <prvInitialiseNewTask+0x94>
			{
				break;
 8008bae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bb8:	e003      	b.n	8008bc2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc4:	2b37      	cmp	r3, #55	; 0x37
 8008bc6:	d901      	bls.n	8008bcc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008bc8:	2337      	movs	r3, #55	; 0x37
 8008bca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bd0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bd6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bda:	2200      	movs	r2, #0
 8008bdc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be0:	3304      	adds	r3, #4
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7fe fe56 	bl	8007894 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bea:	3318      	adds	r3, #24
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fe fe51 	bl	8007894 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bf6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c10:	2200      	movs	r2, #0
 8008c12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	68f9      	ldr	r1, [r7, #12]
 8008c1a:	69b8      	ldr	r0, [r7, #24]
 8008c1c:	f001 fa26 	bl	800a06c <pxPortInitialiseStack>
 8008c20:	4602      	mov	r2, r0
 8008c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d002      	beq.n	8008c32 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c32:	bf00      	nop
 8008c34:	3720      	adds	r7, #32
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
	...

08008c3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c44:	f001 fb3e 	bl	800a2c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c48:	4b2d      	ldr	r3, [pc, #180]	; (8008d00 <prvAddNewTaskToReadyList+0xc4>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	4a2c      	ldr	r2, [pc, #176]	; (8008d00 <prvAddNewTaskToReadyList+0xc4>)
 8008c50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c52:	4b2c      	ldr	r3, [pc, #176]	; (8008d04 <prvAddNewTaskToReadyList+0xc8>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d109      	bne.n	8008c6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c5a:	4a2a      	ldr	r2, [pc, #168]	; (8008d04 <prvAddNewTaskToReadyList+0xc8>)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c60:	4b27      	ldr	r3, [pc, #156]	; (8008d00 <prvAddNewTaskToReadyList+0xc4>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d110      	bne.n	8008c8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008c68:	f000 fc16 	bl	8009498 <prvInitialiseTaskLists>
 8008c6c:	e00d      	b.n	8008c8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008c6e:	4b26      	ldr	r3, [pc, #152]	; (8008d08 <prvAddNewTaskToReadyList+0xcc>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d109      	bne.n	8008c8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c76:	4b23      	ldr	r3, [pc, #140]	; (8008d04 <prvAddNewTaskToReadyList+0xc8>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d802      	bhi.n	8008c8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c84:	4a1f      	ldr	r2, [pc, #124]	; (8008d04 <prvAddNewTaskToReadyList+0xc8>)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c8a:	4b20      	ldr	r3, [pc, #128]	; (8008d0c <prvAddNewTaskToReadyList+0xd0>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	4a1e      	ldr	r2, [pc, #120]	; (8008d0c <prvAddNewTaskToReadyList+0xd0>)
 8008c92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c94:	4b1d      	ldr	r3, [pc, #116]	; (8008d0c <prvAddNewTaskToReadyList+0xd0>)
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca0:	4b1b      	ldr	r3, [pc, #108]	; (8008d10 <prvAddNewTaskToReadyList+0xd4>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d903      	bls.n	8008cb0 <prvAddNewTaskToReadyList+0x74>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cac:	4a18      	ldr	r2, [pc, #96]	; (8008d10 <prvAddNewTaskToReadyList+0xd4>)
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4a15      	ldr	r2, [pc, #84]	; (8008d14 <prvAddNewTaskToReadyList+0xd8>)
 8008cbe:	441a      	add	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	4610      	mov	r0, r2
 8008cc8:	f7fe fdf1 	bl	80078ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ccc:	f001 fb2a 	bl	800a324 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008cd0:	4b0d      	ldr	r3, [pc, #52]	; (8008d08 <prvAddNewTaskToReadyList+0xcc>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00e      	beq.n	8008cf6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008cd8:	4b0a      	ldr	r3, [pc, #40]	; (8008d04 <prvAddNewTaskToReadyList+0xc8>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d207      	bcs.n	8008cf6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ce6:	4b0c      	ldr	r3, [pc, #48]	; (8008d18 <prvAddNewTaskToReadyList+0xdc>)
 8008ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cec:	601a      	str	r2, [r3, #0]
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cf6:	bf00      	nop
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	20001130 	.word	0x20001130
 8008d04:	20000c5c 	.word	0x20000c5c
 8008d08:	2000113c 	.word	0x2000113c
 8008d0c:	2000114c 	.word	0x2000114c
 8008d10:	20001138 	.word	0x20001138
 8008d14:	20000c60 	.word	0x20000c60
 8008d18:	e000ed04 	.word	0xe000ed04

08008d1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d24:	2300      	movs	r3, #0
 8008d26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d017      	beq.n	8008d5e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d2e:	4b13      	ldr	r3, [pc, #76]	; (8008d7c <vTaskDelay+0x60>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00a      	beq.n	8008d4c <vTaskDelay+0x30>
	__asm volatile
 8008d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3a:	f383 8811 	msr	BASEPRI, r3
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	60bb      	str	r3, [r7, #8]
}
 8008d48:	bf00      	nop
 8008d4a:	e7fe      	b.n	8008d4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008d4c:	f000 f880 	bl	8008e50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d50:	2100      	movs	r1, #0
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 fde8 	bl	8009928 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d58:	f000 f888 	bl	8008e6c <xTaskResumeAll>
 8008d5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d107      	bne.n	8008d74 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008d64:	4b06      	ldr	r3, [pc, #24]	; (8008d80 <vTaskDelay+0x64>)
 8008d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d6a:	601a      	str	r2, [r3, #0]
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d74:	bf00      	nop
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	20001158 	.word	0x20001158
 8008d80:	e000ed04 	.word	0xe000ed04

08008d84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b08a      	sub	sp, #40	; 0x28
 8008d88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d92:	463a      	mov	r2, r7
 8008d94:	1d39      	adds	r1, r7, #4
 8008d96:	f107 0308 	add.w	r3, r7, #8
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fe fd26 	bl	80077ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	9202      	str	r2, [sp, #8]
 8008da8:	9301      	str	r3, [sp, #4]
 8008daa:	2300      	movs	r3, #0
 8008dac:	9300      	str	r3, [sp, #0]
 8008dae:	2300      	movs	r3, #0
 8008db0:	460a      	mov	r2, r1
 8008db2:	4921      	ldr	r1, [pc, #132]	; (8008e38 <vTaskStartScheduler+0xb4>)
 8008db4:	4821      	ldr	r0, [pc, #132]	; (8008e3c <vTaskStartScheduler+0xb8>)
 8008db6:	f7ff fe0f 	bl	80089d8 <xTaskCreateStatic>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	4a20      	ldr	r2, [pc, #128]	; (8008e40 <vTaskStartScheduler+0xbc>)
 8008dbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008dc0:	4b1f      	ldr	r3, [pc, #124]	; (8008e40 <vTaskStartScheduler+0xbc>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	617b      	str	r3, [r7, #20]
 8008dcc:	e001      	b.n	8008dd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d102      	bne.n	8008dde <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008dd8:	f000 fdfa 	bl	80099d0 <xTimerCreateTimerTask>
 8008ddc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d116      	bne.n	8008e12 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	613b      	str	r3, [r7, #16]
}
 8008df6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008df8:	4b12      	ldr	r3, [pc, #72]	; (8008e44 <vTaskStartScheduler+0xc0>)
 8008dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8008dfe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e00:	4b11      	ldr	r3, [pc, #68]	; (8008e48 <vTaskStartScheduler+0xc4>)
 8008e02:	2201      	movs	r2, #1
 8008e04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008e06:	4b11      	ldr	r3, [pc, #68]	; (8008e4c <vTaskStartScheduler+0xc8>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e0c:	f001 f9b8 	bl	800a180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e10:	e00e      	b.n	8008e30 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e18:	d10a      	bne.n	8008e30 <vTaskStartScheduler+0xac>
	__asm volatile
 8008e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	60fb      	str	r3, [r7, #12]
}
 8008e2c:	bf00      	nop
 8008e2e:	e7fe      	b.n	8008e2e <vTaskStartScheduler+0xaa>
}
 8008e30:	bf00      	nop
 8008e32:	3718      	adds	r7, #24
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	0800b24c 	.word	0x0800b24c
 8008e3c:	08009469 	.word	0x08009469
 8008e40:	20001154 	.word	0x20001154
 8008e44:	20001150 	.word	0x20001150
 8008e48:	2000113c 	.word	0x2000113c
 8008e4c:	20001134 	.word	0x20001134

08008e50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e50:	b480      	push	{r7}
 8008e52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008e54:	4b04      	ldr	r3, [pc, #16]	; (8008e68 <vTaskSuspendAll+0x18>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	4a03      	ldr	r2, [pc, #12]	; (8008e68 <vTaskSuspendAll+0x18>)
 8008e5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008e5e:	bf00      	nop
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	20001158 	.word	0x20001158

08008e6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e72:	2300      	movs	r3, #0
 8008e74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e7a:	4b42      	ldr	r3, [pc, #264]	; (8008f84 <xTaskResumeAll+0x118>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10a      	bne.n	8008e98 <xTaskResumeAll+0x2c>
	__asm volatile
 8008e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	603b      	str	r3, [r7, #0]
}
 8008e94:	bf00      	nop
 8008e96:	e7fe      	b.n	8008e96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e98:	f001 fa14 	bl	800a2c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e9c:	4b39      	ldr	r3, [pc, #228]	; (8008f84 <xTaskResumeAll+0x118>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	4a38      	ldr	r2, [pc, #224]	; (8008f84 <xTaskResumeAll+0x118>)
 8008ea4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ea6:	4b37      	ldr	r3, [pc, #220]	; (8008f84 <xTaskResumeAll+0x118>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d162      	bne.n	8008f74 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008eae:	4b36      	ldr	r3, [pc, #216]	; (8008f88 <xTaskResumeAll+0x11c>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d05e      	beq.n	8008f74 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008eb6:	e02f      	b.n	8008f18 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eb8:	4b34      	ldr	r3, [pc, #208]	; (8008f8c <xTaskResumeAll+0x120>)
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	3318      	adds	r3, #24
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7fe fd4f 	bl	8007968 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	3304      	adds	r3, #4
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe fd4a 	bl	8007968 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed8:	4b2d      	ldr	r3, [pc, #180]	; (8008f90 <xTaskResumeAll+0x124>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d903      	bls.n	8008ee8 <xTaskResumeAll+0x7c>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee4:	4a2a      	ldr	r2, [pc, #168]	; (8008f90 <xTaskResumeAll+0x124>)
 8008ee6:	6013      	str	r3, [r2, #0]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eec:	4613      	mov	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	4413      	add	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4a27      	ldr	r2, [pc, #156]	; (8008f94 <xTaskResumeAll+0x128>)
 8008ef6:	441a      	add	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	3304      	adds	r3, #4
 8008efc:	4619      	mov	r1, r3
 8008efe:	4610      	mov	r0, r2
 8008f00:	f7fe fcd5 	bl	80078ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f08:	4b23      	ldr	r3, [pc, #140]	; (8008f98 <xTaskResumeAll+0x12c>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d302      	bcc.n	8008f18 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008f12:	4b22      	ldr	r3, [pc, #136]	; (8008f9c <xTaskResumeAll+0x130>)
 8008f14:	2201      	movs	r2, #1
 8008f16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f18:	4b1c      	ldr	r3, [pc, #112]	; (8008f8c <xTaskResumeAll+0x120>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1cb      	bne.n	8008eb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d001      	beq.n	8008f2a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f26:	f000 fb55 	bl	80095d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f2a:	4b1d      	ldr	r3, [pc, #116]	; (8008fa0 <xTaskResumeAll+0x134>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d010      	beq.n	8008f58 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f36:	f000 f847 	bl	8008fc8 <xTaskIncrementTick>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008f40:	4b16      	ldr	r3, [pc, #88]	; (8008f9c <xTaskResumeAll+0x130>)
 8008f42:	2201      	movs	r2, #1
 8008f44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1f1      	bne.n	8008f36 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008f52:	4b13      	ldr	r3, [pc, #76]	; (8008fa0 <xTaskResumeAll+0x134>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f58:	4b10      	ldr	r3, [pc, #64]	; (8008f9c <xTaskResumeAll+0x130>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d009      	beq.n	8008f74 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f60:	2301      	movs	r3, #1
 8008f62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f64:	4b0f      	ldr	r3, [pc, #60]	; (8008fa4 <xTaskResumeAll+0x138>)
 8008f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f6a:	601a      	str	r2, [r3, #0]
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f74:	f001 f9d6 	bl	800a324 <vPortExitCritical>

	return xAlreadyYielded;
 8008f78:	68bb      	ldr	r3, [r7, #8]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	20001158 	.word	0x20001158
 8008f88:	20001130 	.word	0x20001130
 8008f8c:	200010f0 	.word	0x200010f0
 8008f90:	20001138 	.word	0x20001138
 8008f94:	20000c60 	.word	0x20000c60
 8008f98:	20000c5c 	.word	0x20000c5c
 8008f9c:	20001144 	.word	0x20001144
 8008fa0:	20001140 	.word	0x20001140
 8008fa4:	e000ed04 	.word	0xe000ed04

08008fa8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008fae:	4b05      	ldr	r3, [pc, #20]	; (8008fc4 <xTaskGetTickCount+0x1c>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008fb4:	687b      	ldr	r3, [r7, #4]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	20001134 	.word	0x20001134

08008fc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fd2:	4b4f      	ldr	r3, [pc, #316]	; (8009110 <xTaskIncrementTick+0x148>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f040 808f 	bne.w	80090fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fdc:	4b4d      	ldr	r3, [pc, #308]	; (8009114 <xTaskIncrementTick+0x14c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008fe4:	4a4b      	ldr	r2, [pc, #300]	; (8009114 <xTaskIncrementTick+0x14c>)
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d120      	bne.n	8009032 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ff0:	4b49      	ldr	r3, [pc, #292]	; (8009118 <xTaskIncrementTick+0x150>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00a      	beq.n	8009010 <xTaskIncrementTick+0x48>
	__asm volatile
 8008ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	603b      	str	r3, [r7, #0]
}
 800900c:	bf00      	nop
 800900e:	e7fe      	b.n	800900e <xTaskIncrementTick+0x46>
 8009010:	4b41      	ldr	r3, [pc, #260]	; (8009118 <xTaskIncrementTick+0x150>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	60fb      	str	r3, [r7, #12]
 8009016:	4b41      	ldr	r3, [pc, #260]	; (800911c <xTaskIncrementTick+0x154>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a3f      	ldr	r2, [pc, #252]	; (8009118 <xTaskIncrementTick+0x150>)
 800901c:	6013      	str	r3, [r2, #0]
 800901e:	4a3f      	ldr	r2, [pc, #252]	; (800911c <xTaskIncrementTick+0x154>)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6013      	str	r3, [r2, #0]
 8009024:	4b3e      	ldr	r3, [pc, #248]	; (8009120 <xTaskIncrementTick+0x158>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	3301      	adds	r3, #1
 800902a:	4a3d      	ldr	r2, [pc, #244]	; (8009120 <xTaskIncrementTick+0x158>)
 800902c:	6013      	str	r3, [r2, #0]
 800902e:	f000 fad1 	bl	80095d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009032:	4b3c      	ldr	r3, [pc, #240]	; (8009124 <xTaskIncrementTick+0x15c>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	693a      	ldr	r2, [r7, #16]
 8009038:	429a      	cmp	r2, r3
 800903a:	d349      	bcc.n	80090d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800903c:	4b36      	ldr	r3, [pc, #216]	; (8009118 <xTaskIncrementTick+0x150>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d104      	bne.n	8009050 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009046:	4b37      	ldr	r3, [pc, #220]	; (8009124 <xTaskIncrementTick+0x15c>)
 8009048:	f04f 32ff 	mov.w	r2, #4294967295
 800904c:	601a      	str	r2, [r3, #0]
					break;
 800904e:	e03f      	b.n	80090d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009050:	4b31      	ldr	r3, [pc, #196]	; (8009118 <xTaskIncrementTick+0x150>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009060:	693a      	ldr	r2, [r7, #16]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	429a      	cmp	r2, r3
 8009066:	d203      	bcs.n	8009070 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009068:	4a2e      	ldr	r2, [pc, #184]	; (8009124 <xTaskIncrementTick+0x15c>)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800906e:	e02f      	b.n	80090d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	3304      	adds	r3, #4
 8009074:	4618      	mov	r0, r3
 8009076:	f7fe fc77 	bl	8007968 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907e:	2b00      	cmp	r3, #0
 8009080:	d004      	beq.n	800908c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	3318      	adds	r3, #24
 8009086:	4618      	mov	r0, r3
 8009088:	f7fe fc6e 	bl	8007968 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009090:	4b25      	ldr	r3, [pc, #148]	; (8009128 <xTaskIncrementTick+0x160>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	429a      	cmp	r2, r3
 8009096:	d903      	bls.n	80090a0 <xTaskIncrementTick+0xd8>
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909c:	4a22      	ldr	r2, [pc, #136]	; (8009128 <xTaskIncrementTick+0x160>)
 800909e:	6013      	str	r3, [r2, #0]
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a4:	4613      	mov	r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4413      	add	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4a1f      	ldr	r2, [pc, #124]	; (800912c <xTaskIncrementTick+0x164>)
 80090ae:	441a      	add	r2, r3
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	3304      	adds	r3, #4
 80090b4:	4619      	mov	r1, r3
 80090b6:	4610      	mov	r0, r2
 80090b8:	f7fe fbf9 	bl	80078ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c0:	4b1b      	ldr	r3, [pc, #108]	; (8009130 <xTaskIncrementTick+0x168>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d3b8      	bcc.n	800903c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80090ca:	2301      	movs	r3, #1
 80090cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090ce:	e7b5      	b.n	800903c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090d0:	4b17      	ldr	r3, [pc, #92]	; (8009130 <xTaskIncrementTick+0x168>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d6:	4915      	ldr	r1, [pc, #84]	; (800912c <xTaskIncrementTick+0x164>)
 80090d8:	4613      	mov	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	440b      	add	r3, r1
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d901      	bls.n	80090ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80090e8:	2301      	movs	r3, #1
 80090ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80090ec:	4b11      	ldr	r3, [pc, #68]	; (8009134 <xTaskIncrementTick+0x16c>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d007      	beq.n	8009104 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80090f4:	2301      	movs	r3, #1
 80090f6:	617b      	str	r3, [r7, #20]
 80090f8:	e004      	b.n	8009104 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80090fa:	4b0f      	ldr	r3, [pc, #60]	; (8009138 <xTaskIncrementTick+0x170>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3301      	adds	r3, #1
 8009100:	4a0d      	ldr	r2, [pc, #52]	; (8009138 <xTaskIncrementTick+0x170>)
 8009102:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009104:	697b      	ldr	r3, [r7, #20]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	20001158 	.word	0x20001158
 8009114:	20001134 	.word	0x20001134
 8009118:	200010e8 	.word	0x200010e8
 800911c:	200010ec 	.word	0x200010ec
 8009120:	20001148 	.word	0x20001148
 8009124:	20001150 	.word	0x20001150
 8009128:	20001138 	.word	0x20001138
 800912c:	20000c60 	.word	0x20000c60
 8009130:	20000c5c 	.word	0x20000c5c
 8009134:	20001144 	.word	0x20001144
 8009138:	20001140 	.word	0x20001140

0800913c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009142:	4b28      	ldr	r3, [pc, #160]	; (80091e4 <vTaskSwitchContext+0xa8>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d003      	beq.n	8009152 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800914a:	4b27      	ldr	r3, [pc, #156]	; (80091e8 <vTaskSwitchContext+0xac>)
 800914c:	2201      	movs	r2, #1
 800914e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009150:	e041      	b.n	80091d6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009152:	4b25      	ldr	r3, [pc, #148]	; (80091e8 <vTaskSwitchContext+0xac>)
 8009154:	2200      	movs	r2, #0
 8009156:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009158:	4b24      	ldr	r3, [pc, #144]	; (80091ec <vTaskSwitchContext+0xb0>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	60fb      	str	r3, [r7, #12]
 800915e:	e010      	b.n	8009182 <vTaskSwitchContext+0x46>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d10a      	bne.n	800917c <vTaskSwitchContext+0x40>
	__asm volatile
 8009166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	607b      	str	r3, [r7, #4]
}
 8009178:	bf00      	nop
 800917a:	e7fe      	b.n	800917a <vTaskSwitchContext+0x3e>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	3b01      	subs	r3, #1
 8009180:	60fb      	str	r3, [r7, #12]
 8009182:	491b      	ldr	r1, [pc, #108]	; (80091f0 <vTaskSwitchContext+0xb4>)
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	4613      	mov	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	440b      	add	r3, r1
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0e4      	beq.n	8009160 <vTaskSwitchContext+0x24>
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	4613      	mov	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	4a13      	ldr	r2, [pc, #76]	; (80091f0 <vTaskSwitchContext+0xb4>)
 80091a2:	4413      	add	r3, r2
 80091a4:	60bb      	str	r3, [r7, #8]
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	605a      	str	r2, [r3, #4]
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	685a      	ldr	r2, [r3, #4]
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	3308      	adds	r3, #8
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d104      	bne.n	80091c6 <vTaskSwitchContext+0x8a>
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	605a      	str	r2, [r3, #4]
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	4a09      	ldr	r2, [pc, #36]	; (80091f4 <vTaskSwitchContext+0xb8>)
 80091ce:	6013      	str	r3, [r2, #0]
 80091d0:	4a06      	ldr	r2, [pc, #24]	; (80091ec <vTaskSwitchContext+0xb0>)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6013      	str	r3, [r2, #0]
}
 80091d6:	bf00      	nop
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	20001158 	.word	0x20001158
 80091e8:	20001144 	.word	0x20001144
 80091ec:	20001138 	.word	0x20001138
 80091f0:	20000c60 	.word	0x20000c60
 80091f4:	20000c5c 	.word	0x20000c5c

080091f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10a      	bne.n	800921e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920c:	f383 8811 	msr	BASEPRI, r3
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	60fb      	str	r3, [r7, #12]
}
 800921a:	bf00      	nop
 800921c:	e7fe      	b.n	800921c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800921e:	4b07      	ldr	r3, [pc, #28]	; (800923c <vTaskPlaceOnEventList+0x44>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3318      	adds	r3, #24
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7fe fb65 	bl	80078f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800922c:	2101      	movs	r1, #1
 800922e:	6838      	ldr	r0, [r7, #0]
 8009230:	f000 fb7a 	bl	8009928 <prvAddCurrentTaskToDelayedList>
}
 8009234:	bf00      	nop
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	20000c5c 	.word	0x20000c5c

08009240 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10a      	bne.n	8009268 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	617b      	str	r3, [r7, #20]
}
 8009264:	bf00      	nop
 8009266:	e7fe      	b.n	8009266 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009268:	4b0a      	ldr	r3, [pc, #40]	; (8009294 <vTaskPlaceOnEventListRestricted+0x54>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3318      	adds	r3, #24
 800926e:	4619      	mov	r1, r3
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f7fe fb1c 	bl	80078ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d002      	beq.n	8009282 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800927c:	f04f 33ff 	mov.w	r3, #4294967295
 8009280:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009282:	6879      	ldr	r1, [r7, #4]
 8009284:	68b8      	ldr	r0, [r7, #8]
 8009286:	f000 fb4f 	bl	8009928 <prvAddCurrentTaskToDelayedList>
	}
 800928a:	bf00      	nop
 800928c:	3718      	adds	r7, #24
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	20000c5c 	.word	0x20000c5c

08009298 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b086      	sub	sp, #24
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10a      	bne.n	80092c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	60fb      	str	r3, [r7, #12]
}
 80092c0:	bf00      	nop
 80092c2:	e7fe      	b.n	80092c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	3318      	adds	r3, #24
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7fe fb4d 	bl	8007968 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092ce:	4b1e      	ldr	r3, [pc, #120]	; (8009348 <xTaskRemoveFromEventList+0xb0>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d11d      	bne.n	8009312 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	3304      	adds	r3, #4
 80092da:	4618      	mov	r0, r3
 80092dc:	f7fe fb44 	bl	8007968 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e4:	4b19      	ldr	r3, [pc, #100]	; (800934c <xTaskRemoveFromEventList+0xb4>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d903      	bls.n	80092f4 <xTaskRemoveFromEventList+0x5c>
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f0:	4a16      	ldr	r2, [pc, #88]	; (800934c <xTaskRemoveFromEventList+0xb4>)
 80092f2:	6013      	str	r3, [r2, #0]
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f8:	4613      	mov	r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4413      	add	r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	4a13      	ldr	r2, [pc, #76]	; (8009350 <xTaskRemoveFromEventList+0xb8>)
 8009302:	441a      	add	r2, r3
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	3304      	adds	r3, #4
 8009308:	4619      	mov	r1, r3
 800930a:	4610      	mov	r0, r2
 800930c:	f7fe facf 	bl	80078ae <vListInsertEnd>
 8009310:	e005      	b.n	800931e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	3318      	adds	r3, #24
 8009316:	4619      	mov	r1, r3
 8009318:	480e      	ldr	r0, [pc, #56]	; (8009354 <xTaskRemoveFromEventList+0xbc>)
 800931a:	f7fe fac8 	bl	80078ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009322:	4b0d      	ldr	r3, [pc, #52]	; (8009358 <xTaskRemoveFromEventList+0xc0>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009328:	429a      	cmp	r2, r3
 800932a:	d905      	bls.n	8009338 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800932c:	2301      	movs	r3, #1
 800932e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009330:	4b0a      	ldr	r3, [pc, #40]	; (800935c <xTaskRemoveFromEventList+0xc4>)
 8009332:	2201      	movs	r2, #1
 8009334:	601a      	str	r2, [r3, #0]
 8009336:	e001      	b.n	800933c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009338:	2300      	movs	r3, #0
 800933a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800933c:	697b      	ldr	r3, [r7, #20]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3718      	adds	r7, #24
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	20001158 	.word	0x20001158
 800934c:	20001138 	.word	0x20001138
 8009350:	20000c60 	.word	0x20000c60
 8009354:	200010f0 	.word	0x200010f0
 8009358:	20000c5c 	.word	0x20000c5c
 800935c:	20001144 	.word	0x20001144

08009360 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009368:	4b06      	ldr	r3, [pc, #24]	; (8009384 <vTaskInternalSetTimeOutState+0x24>)
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009370:	4b05      	ldr	r3, [pc, #20]	; (8009388 <vTaskInternalSetTimeOutState+0x28>)
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	605a      	str	r2, [r3, #4]
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	20001148 	.word	0x20001148
 8009388:	20001134 	.word	0x20001134

0800938c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b088      	sub	sp, #32
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10a      	bne.n	80093b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800939c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	613b      	str	r3, [r7, #16]
}
 80093ae:	bf00      	nop
 80093b0:	e7fe      	b.n	80093b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10a      	bne.n	80093ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	60fb      	str	r3, [r7, #12]
}
 80093ca:	bf00      	nop
 80093cc:	e7fe      	b.n	80093cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80093ce:	f000 ff79 	bl	800a2c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80093d2:	4b1d      	ldr	r3, [pc, #116]	; (8009448 <xTaskCheckForTimeOut+0xbc>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	69ba      	ldr	r2, [r7, #24]
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ea:	d102      	bne.n	80093f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80093ec:	2300      	movs	r3, #0
 80093ee:	61fb      	str	r3, [r7, #28]
 80093f0:	e023      	b.n	800943a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	4b15      	ldr	r3, [pc, #84]	; (800944c <xTaskCheckForTimeOut+0xc0>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d007      	beq.n	800940e <xTaskCheckForTimeOut+0x82>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	69ba      	ldr	r2, [r7, #24]
 8009404:	429a      	cmp	r2, r3
 8009406:	d302      	bcc.n	800940e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009408:	2301      	movs	r3, #1
 800940a:	61fb      	str	r3, [r7, #28]
 800940c:	e015      	b.n	800943a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	697a      	ldr	r2, [r7, #20]
 8009414:	429a      	cmp	r2, r3
 8009416:	d20b      	bcs.n	8009430 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	1ad2      	subs	r2, r2, r3
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7ff ff9b 	bl	8009360 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800942a:	2300      	movs	r3, #0
 800942c:	61fb      	str	r3, [r7, #28]
 800942e:	e004      	b.n	800943a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	2200      	movs	r2, #0
 8009434:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009436:	2301      	movs	r3, #1
 8009438:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800943a:	f000 ff73 	bl	800a324 <vPortExitCritical>

	return xReturn;
 800943e:	69fb      	ldr	r3, [r7, #28]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3720      	adds	r7, #32
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	20001134 	.word	0x20001134
 800944c:	20001148 	.word	0x20001148

08009450 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009450:	b480      	push	{r7}
 8009452:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009454:	4b03      	ldr	r3, [pc, #12]	; (8009464 <vTaskMissedYield+0x14>)
 8009456:	2201      	movs	r2, #1
 8009458:	601a      	str	r2, [r3, #0]
}
 800945a:	bf00      	nop
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	20001144 	.word	0x20001144

08009468 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009470:	f000 f852 	bl	8009518 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009474:	4b06      	ldr	r3, [pc, #24]	; (8009490 <prvIdleTask+0x28>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d9f9      	bls.n	8009470 <prvIdleTask+0x8>
			{
				taskYIELD();
 800947c:	4b05      	ldr	r3, [pc, #20]	; (8009494 <prvIdleTask+0x2c>)
 800947e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800948c:	e7f0      	b.n	8009470 <prvIdleTask+0x8>
 800948e:	bf00      	nop
 8009490:	20000c60 	.word	0x20000c60
 8009494:	e000ed04 	.word	0xe000ed04

08009498 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800949e:	2300      	movs	r3, #0
 80094a0:	607b      	str	r3, [r7, #4]
 80094a2:	e00c      	b.n	80094be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	4613      	mov	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	4413      	add	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4a12      	ldr	r2, [pc, #72]	; (80094f8 <prvInitialiseTaskLists+0x60>)
 80094b0:	4413      	add	r3, r2
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fe f9ce 	bl	8007854 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	3301      	adds	r3, #1
 80094bc:	607b      	str	r3, [r7, #4]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b37      	cmp	r3, #55	; 0x37
 80094c2:	d9ef      	bls.n	80094a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80094c4:	480d      	ldr	r0, [pc, #52]	; (80094fc <prvInitialiseTaskLists+0x64>)
 80094c6:	f7fe f9c5 	bl	8007854 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80094ca:	480d      	ldr	r0, [pc, #52]	; (8009500 <prvInitialiseTaskLists+0x68>)
 80094cc:	f7fe f9c2 	bl	8007854 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80094d0:	480c      	ldr	r0, [pc, #48]	; (8009504 <prvInitialiseTaskLists+0x6c>)
 80094d2:	f7fe f9bf 	bl	8007854 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80094d6:	480c      	ldr	r0, [pc, #48]	; (8009508 <prvInitialiseTaskLists+0x70>)
 80094d8:	f7fe f9bc 	bl	8007854 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80094dc:	480b      	ldr	r0, [pc, #44]	; (800950c <prvInitialiseTaskLists+0x74>)
 80094de:	f7fe f9b9 	bl	8007854 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80094e2:	4b0b      	ldr	r3, [pc, #44]	; (8009510 <prvInitialiseTaskLists+0x78>)
 80094e4:	4a05      	ldr	r2, [pc, #20]	; (80094fc <prvInitialiseTaskLists+0x64>)
 80094e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80094e8:	4b0a      	ldr	r3, [pc, #40]	; (8009514 <prvInitialiseTaskLists+0x7c>)
 80094ea:	4a05      	ldr	r2, [pc, #20]	; (8009500 <prvInitialiseTaskLists+0x68>)
 80094ec:	601a      	str	r2, [r3, #0]
}
 80094ee:	bf00      	nop
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20000c60 	.word	0x20000c60
 80094fc:	200010c0 	.word	0x200010c0
 8009500:	200010d4 	.word	0x200010d4
 8009504:	200010f0 	.word	0x200010f0
 8009508:	20001104 	.word	0x20001104
 800950c:	2000111c 	.word	0x2000111c
 8009510:	200010e8 	.word	0x200010e8
 8009514:	200010ec 	.word	0x200010ec

08009518 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800951e:	e019      	b.n	8009554 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009520:	f000 fed0 	bl	800a2c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009524:	4b10      	ldr	r3, [pc, #64]	; (8009568 <prvCheckTasksWaitingTermination+0x50>)
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	3304      	adds	r3, #4
 8009530:	4618      	mov	r0, r3
 8009532:	f7fe fa19 	bl	8007968 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009536:	4b0d      	ldr	r3, [pc, #52]	; (800956c <prvCheckTasksWaitingTermination+0x54>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3b01      	subs	r3, #1
 800953c:	4a0b      	ldr	r2, [pc, #44]	; (800956c <prvCheckTasksWaitingTermination+0x54>)
 800953e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009540:	4b0b      	ldr	r3, [pc, #44]	; (8009570 <prvCheckTasksWaitingTermination+0x58>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	3b01      	subs	r3, #1
 8009546:	4a0a      	ldr	r2, [pc, #40]	; (8009570 <prvCheckTasksWaitingTermination+0x58>)
 8009548:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800954a:	f000 feeb 	bl	800a324 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f810 	bl	8009574 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009554:	4b06      	ldr	r3, [pc, #24]	; (8009570 <prvCheckTasksWaitingTermination+0x58>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1e1      	bne.n	8009520 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800955c:	bf00      	nop
 800955e:	bf00      	nop
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	20001104 	.word	0x20001104
 800956c:	20001130 	.word	0x20001130
 8009570:	20001118 	.word	0x20001118

08009574 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009582:	2b00      	cmp	r3, #0
 8009584:	d108      	bne.n	8009598 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958a:	4618      	mov	r0, r3
 800958c:	f001 f888 	bl	800a6a0 <vPortFree>
				vPortFree( pxTCB );
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f001 f885 	bl	800a6a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009596:	e018      	b.n	80095ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d103      	bne.n	80095aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f001 f87c 	bl	800a6a0 <vPortFree>
	}
 80095a8:	e00f      	b.n	80095ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d00a      	beq.n	80095ca <prvDeleteTCB+0x56>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	60fb      	str	r3, [r7, #12]
}
 80095c6:	bf00      	nop
 80095c8:	e7fe      	b.n	80095c8 <prvDeleteTCB+0x54>
	}
 80095ca:	bf00      	nop
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
	...

080095d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095da:	4b0c      	ldr	r3, [pc, #48]	; (800960c <prvResetNextTaskUnblockTime+0x38>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d104      	bne.n	80095ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80095e4:	4b0a      	ldr	r3, [pc, #40]	; (8009610 <prvResetNextTaskUnblockTime+0x3c>)
 80095e6:	f04f 32ff 	mov.w	r2, #4294967295
 80095ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80095ec:	e008      	b.n	8009600 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095ee:	4b07      	ldr	r3, [pc, #28]	; (800960c <prvResetNextTaskUnblockTime+0x38>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	4a04      	ldr	r2, [pc, #16]	; (8009610 <prvResetNextTaskUnblockTime+0x3c>)
 80095fe:	6013      	str	r3, [r2, #0]
}
 8009600:	bf00      	nop
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	200010e8 	.word	0x200010e8
 8009610:	20001150 	.word	0x20001150

08009614 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800961a:	4b0b      	ldr	r3, [pc, #44]	; (8009648 <xTaskGetSchedulerState+0x34>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d102      	bne.n	8009628 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009622:	2301      	movs	r3, #1
 8009624:	607b      	str	r3, [r7, #4]
 8009626:	e008      	b.n	800963a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009628:	4b08      	ldr	r3, [pc, #32]	; (800964c <xTaskGetSchedulerState+0x38>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d102      	bne.n	8009636 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009630:	2302      	movs	r3, #2
 8009632:	607b      	str	r3, [r7, #4]
 8009634:	e001      	b.n	800963a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009636:	2300      	movs	r3, #0
 8009638:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800963a:	687b      	ldr	r3, [r7, #4]
	}
 800963c:	4618      	mov	r0, r3
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr
 8009648:	2000113c 	.word	0x2000113c
 800964c:	20001158 	.word	0x20001158

08009650 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800965c:	2300      	movs	r3, #0
 800965e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d051      	beq.n	800970a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800966a:	4b2a      	ldr	r3, [pc, #168]	; (8009714 <xTaskPriorityInherit+0xc4>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009670:	429a      	cmp	r2, r3
 8009672:	d241      	bcs.n	80096f8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	2b00      	cmp	r3, #0
 800967a:	db06      	blt.n	800968a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800967c:	4b25      	ldr	r3, [pc, #148]	; (8009714 <xTaskPriorityInherit+0xc4>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009682:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	6959      	ldr	r1, [r3, #20]
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009692:	4613      	mov	r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4a1f      	ldr	r2, [pc, #124]	; (8009718 <xTaskPriorityInherit+0xc8>)
 800969c:	4413      	add	r3, r2
 800969e:	4299      	cmp	r1, r3
 80096a0:	d122      	bne.n	80096e8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	3304      	adds	r3, #4
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fe f95e 	bl	8007968 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80096ac:	4b19      	ldr	r3, [pc, #100]	; (8009714 <xTaskPriorityInherit+0xc4>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ba:	4b18      	ldr	r3, [pc, #96]	; (800971c <xTaskPriorityInherit+0xcc>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d903      	bls.n	80096ca <xTaskPriorityInherit+0x7a>
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c6:	4a15      	ldr	r2, [pc, #84]	; (800971c <xTaskPriorityInherit+0xcc>)
 80096c8:	6013      	str	r3, [r2, #0]
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ce:	4613      	mov	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4a10      	ldr	r2, [pc, #64]	; (8009718 <xTaskPriorityInherit+0xc8>)
 80096d8:	441a      	add	r2, r3
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	3304      	adds	r3, #4
 80096de:	4619      	mov	r1, r3
 80096e0:	4610      	mov	r0, r2
 80096e2:	f7fe f8e4 	bl	80078ae <vListInsertEnd>
 80096e6:	e004      	b.n	80096f2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80096e8:	4b0a      	ldr	r3, [pc, #40]	; (8009714 <xTaskPriorityInherit+0xc4>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80096f2:	2301      	movs	r3, #1
 80096f4:	60fb      	str	r3, [r7, #12]
 80096f6:	e008      	b.n	800970a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096fc:	4b05      	ldr	r3, [pc, #20]	; (8009714 <xTaskPriorityInherit+0xc4>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009702:	429a      	cmp	r2, r3
 8009704:	d201      	bcs.n	800970a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009706:	2301      	movs	r3, #1
 8009708:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800970a:	68fb      	ldr	r3, [r7, #12]
	}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	20000c5c 	.word	0x20000c5c
 8009718:	20000c60 	.word	0x20000c60
 800971c:	20001138 	.word	0x20001138

08009720 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009720:	b580      	push	{r7, lr}
 8009722:	b086      	sub	sp, #24
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800972c:	2300      	movs	r3, #0
 800972e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d056      	beq.n	80097e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009736:	4b2e      	ldr	r3, [pc, #184]	; (80097f0 <xTaskPriorityDisinherit+0xd0>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	693a      	ldr	r2, [r7, #16]
 800973c:	429a      	cmp	r2, r3
 800973e:	d00a      	beq.n	8009756 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	60fb      	str	r3, [r7, #12]
}
 8009752:	bf00      	nop
 8009754:	e7fe      	b.n	8009754 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800975a:	2b00      	cmp	r3, #0
 800975c:	d10a      	bne.n	8009774 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	60bb      	str	r3, [r7, #8]
}
 8009770:	bf00      	nop
 8009772:	e7fe      	b.n	8009772 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009778:	1e5a      	subs	r2, r3, #1
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009786:	429a      	cmp	r2, r3
 8009788:	d02c      	beq.n	80097e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800978e:	2b00      	cmp	r3, #0
 8009790:	d128      	bne.n	80097e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	3304      	adds	r3, #4
 8009796:	4618      	mov	r0, r3
 8009798:	f7fe f8e6 	bl	8007968 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b4:	4b0f      	ldr	r3, [pc, #60]	; (80097f4 <xTaskPriorityDisinherit+0xd4>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d903      	bls.n	80097c4 <xTaskPriorityDisinherit+0xa4>
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c0:	4a0c      	ldr	r2, [pc, #48]	; (80097f4 <xTaskPriorityDisinherit+0xd4>)
 80097c2:	6013      	str	r3, [r2, #0]
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c8:	4613      	mov	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4413      	add	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4a09      	ldr	r2, [pc, #36]	; (80097f8 <xTaskPriorityDisinherit+0xd8>)
 80097d2:	441a      	add	r2, r3
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	3304      	adds	r3, #4
 80097d8:	4619      	mov	r1, r3
 80097da:	4610      	mov	r0, r2
 80097dc:	f7fe f867 	bl	80078ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80097e0:	2301      	movs	r3, #1
 80097e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097e4:	697b      	ldr	r3, [r7, #20]
	}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3718      	adds	r7, #24
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	20000c5c 	.word	0x20000c5c
 80097f4:	20001138 	.word	0x20001138
 80097f8:	20000c60 	.word	0x20000c60

080097fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b088      	sub	sp, #32
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800980a:	2301      	movs	r3, #1
 800980c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d06a      	beq.n	80098ea <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10a      	bne.n	8009832 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800981c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009820:	f383 8811 	msr	BASEPRI, r3
 8009824:	f3bf 8f6f 	isb	sy
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	60fb      	str	r3, [r7, #12]
}
 800982e:	bf00      	nop
 8009830:	e7fe      	b.n	8009830 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	429a      	cmp	r2, r3
 800983a:	d902      	bls.n	8009842 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	61fb      	str	r3, [r7, #28]
 8009840:	e002      	b.n	8009848 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009846:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	69fa      	ldr	r2, [r7, #28]
 800984e:	429a      	cmp	r2, r3
 8009850:	d04b      	beq.n	80098ea <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	429a      	cmp	r2, r3
 800985a:	d146      	bne.n	80098ea <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800985c:	4b25      	ldr	r3, [pc, #148]	; (80098f4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	69ba      	ldr	r2, [r7, #24]
 8009862:	429a      	cmp	r2, r3
 8009864:	d10a      	bne.n	800987c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	60bb      	str	r3, [r7, #8]
}
 8009878:	bf00      	nop
 800987a:	e7fe      	b.n	800987a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009880:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	69fa      	ldr	r2, [r7, #28]
 8009886:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	699b      	ldr	r3, [r3, #24]
 800988c:	2b00      	cmp	r3, #0
 800988e:	db04      	blt.n	800989a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	6959      	ldr	r1, [r3, #20]
 800989e:	693a      	ldr	r2, [r7, #16]
 80098a0:	4613      	mov	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	4413      	add	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4a13      	ldr	r2, [pc, #76]	; (80098f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80098aa:	4413      	add	r3, r2
 80098ac:	4299      	cmp	r1, r3
 80098ae:	d11c      	bne.n	80098ea <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	3304      	adds	r3, #4
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fe f857 	bl	8007968 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098be:	4b0f      	ldr	r3, [pc, #60]	; (80098fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d903      	bls.n	80098ce <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ca:	4a0c      	ldr	r2, [pc, #48]	; (80098fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80098cc:	6013      	str	r3, [r2, #0]
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d2:	4613      	mov	r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4413      	add	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	4a07      	ldr	r2, [pc, #28]	; (80098f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80098dc:	441a      	add	r2, r3
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	3304      	adds	r3, #4
 80098e2:	4619      	mov	r1, r3
 80098e4:	4610      	mov	r0, r2
 80098e6:	f7fd ffe2 	bl	80078ae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80098ea:	bf00      	nop
 80098ec:	3720      	adds	r7, #32
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	20000c5c 	.word	0x20000c5c
 80098f8:	20000c60 	.word	0x20000c60
 80098fc:	20001138 	.word	0x20001138

08009900 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009900:	b480      	push	{r7}
 8009902:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009904:	4b07      	ldr	r3, [pc, #28]	; (8009924 <pvTaskIncrementMutexHeldCount+0x24>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d004      	beq.n	8009916 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800990c:	4b05      	ldr	r3, [pc, #20]	; (8009924 <pvTaskIncrementMutexHeldCount+0x24>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009912:	3201      	adds	r2, #1
 8009914:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009916:	4b03      	ldr	r3, [pc, #12]	; (8009924 <pvTaskIncrementMutexHeldCount+0x24>)
 8009918:	681b      	ldr	r3, [r3, #0]
	}
 800991a:	4618      	mov	r0, r3
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr
 8009924:	20000c5c 	.word	0x20000c5c

08009928 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009932:	4b21      	ldr	r3, [pc, #132]	; (80099b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009938:	4b20      	ldr	r3, [pc, #128]	; (80099bc <prvAddCurrentTaskToDelayedList+0x94>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3304      	adds	r3, #4
 800993e:	4618      	mov	r0, r3
 8009940:	f7fe f812 	bl	8007968 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994a:	d10a      	bne.n	8009962 <prvAddCurrentTaskToDelayedList+0x3a>
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d007      	beq.n	8009962 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009952:	4b1a      	ldr	r3, [pc, #104]	; (80099bc <prvAddCurrentTaskToDelayedList+0x94>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	3304      	adds	r3, #4
 8009958:	4619      	mov	r1, r3
 800995a:	4819      	ldr	r0, [pc, #100]	; (80099c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800995c:	f7fd ffa7 	bl	80078ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009960:	e026      	b.n	80099b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4413      	add	r3, r2
 8009968:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800996a:	4b14      	ldr	r3, [pc, #80]	; (80099bc <prvAddCurrentTaskToDelayedList+0x94>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	429a      	cmp	r2, r3
 8009978:	d209      	bcs.n	800998e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800997a:	4b12      	ldr	r3, [pc, #72]	; (80099c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	4b0f      	ldr	r3, [pc, #60]	; (80099bc <prvAddCurrentTaskToDelayedList+0x94>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3304      	adds	r3, #4
 8009984:	4619      	mov	r1, r3
 8009986:	4610      	mov	r0, r2
 8009988:	f7fd ffb5 	bl	80078f6 <vListInsert>
}
 800998c:	e010      	b.n	80099b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800998e:	4b0e      	ldr	r3, [pc, #56]	; (80099c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	4b0a      	ldr	r3, [pc, #40]	; (80099bc <prvAddCurrentTaskToDelayedList+0x94>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	3304      	adds	r3, #4
 8009998:	4619      	mov	r1, r3
 800999a:	4610      	mov	r0, r2
 800999c:	f7fd ffab 	bl	80078f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80099a0:	4b0a      	ldr	r3, [pc, #40]	; (80099cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d202      	bcs.n	80099b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80099aa:	4a08      	ldr	r2, [pc, #32]	; (80099cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	6013      	str	r3, [r2, #0]
}
 80099b0:	bf00      	nop
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	20001134 	.word	0x20001134
 80099bc:	20000c5c 	.word	0x20000c5c
 80099c0:	2000111c 	.word	0x2000111c
 80099c4:	200010ec 	.word	0x200010ec
 80099c8:	200010e8 	.word	0x200010e8
 80099cc:	20001150 	.word	0x20001150

080099d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b08a      	sub	sp, #40	; 0x28
 80099d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80099d6:	2300      	movs	r3, #0
 80099d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80099da:	f000 fb07 	bl	8009fec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80099de:	4b1c      	ldr	r3, [pc, #112]	; (8009a50 <xTimerCreateTimerTask+0x80>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d021      	beq.n	8009a2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80099e6:	2300      	movs	r3, #0
 80099e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80099ea:	2300      	movs	r3, #0
 80099ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099ee:	1d3a      	adds	r2, r7, #4
 80099f0:	f107 0108 	add.w	r1, r7, #8
 80099f4:	f107 030c 	add.w	r3, r7, #12
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fd ff11 	bl	8007820 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80099fe:	6879      	ldr	r1, [r7, #4]
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	9202      	str	r2, [sp, #8]
 8009a06:	9301      	str	r3, [sp, #4]
 8009a08:	2302      	movs	r3, #2
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	460a      	mov	r2, r1
 8009a10:	4910      	ldr	r1, [pc, #64]	; (8009a54 <xTimerCreateTimerTask+0x84>)
 8009a12:	4811      	ldr	r0, [pc, #68]	; (8009a58 <xTimerCreateTimerTask+0x88>)
 8009a14:	f7fe ffe0 	bl	80089d8 <xTaskCreateStatic>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	4a10      	ldr	r2, [pc, #64]	; (8009a5c <xTimerCreateTimerTask+0x8c>)
 8009a1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a1e:	4b0f      	ldr	r3, [pc, #60]	; (8009a5c <xTimerCreateTimerTask+0x8c>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a26:	2301      	movs	r3, #1
 8009a28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d10a      	bne.n	8009a46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	613b      	str	r3, [r7, #16]
}
 8009a42:	bf00      	nop
 8009a44:	e7fe      	b.n	8009a44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009a46:	697b      	ldr	r3, [r7, #20]
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3718      	adds	r7, #24
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	2000118c 	.word	0x2000118c
 8009a54:	0800b254 	.word	0x0800b254
 8009a58:	08009b95 	.word	0x08009b95
 8009a5c:	20001190 	.word	0x20001190

08009a60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b08a      	sub	sp, #40	; 0x28
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
 8009a6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10a      	bne.n	8009a8e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7c:	f383 8811 	msr	BASEPRI, r3
 8009a80:	f3bf 8f6f 	isb	sy
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	623b      	str	r3, [r7, #32]
}
 8009a8a:	bf00      	nop
 8009a8c:	e7fe      	b.n	8009a8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a8e:	4b1a      	ldr	r3, [pc, #104]	; (8009af8 <xTimerGenericCommand+0x98>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d02a      	beq.n	8009aec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	2b05      	cmp	r3, #5
 8009aa6:	dc18      	bgt.n	8009ada <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009aa8:	f7ff fdb4 	bl	8009614 <xTaskGetSchedulerState>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d109      	bne.n	8009ac6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ab2:	4b11      	ldr	r3, [pc, #68]	; (8009af8 <xTimerGenericCommand+0x98>)
 8009ab4:	6818      	ldr	r0, [r3, #0]
 8009ab6:	f107 0110 	add.w	r1, r7, #16
 8009aba:	2300      	movs	r3, #0
 8009abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009abe:	f7fe f925 	bl	8007d0c <xQueueGenericSend>
 8009ac2:	6278      	str	r0, [r7, #36]	; 0x24
 8009ac4:	e012      	b.n	8009aec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ac6:	4b0c      	ldr	r3, [pc, #48]	; (8009af8 <xTimerGenericCommand+0x98>)
 8009ac8:	6818      	ldr	r0, [r3, #0]
 8009aca:	f107 0110 	add.w	r1, r7, #16
 8009ace:	2300      	movs	r3, #0
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f7fe f91b 	bl	8007d0c <xQueueGenericSend>
 8009ad6:	6278      	str	r0, [r7, #36]	; 0x24
 8009ad8:	e008      	b.n	8009aec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ada:	4b07      	ldr	r3, [pc, #28]	; (8009af8 <xTimerGenericCommand+0x98>)
 8009adc:	6818      	ldr	r0, [r3, #0]
 8009ade:	f107 0110 	add.w	r1, r7, #16
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	683a      	ldr	r2, [r7, #0]
 8009ae6:	f7fe fa0f 	bl	8007f08 <xQueueGenericSendFromISR>
 8009aea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3728      	adds	r7, #40	; 0x28
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	2000118c 	.word	0x2000118c

08009afc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b088      	sub	sp, #32
 8009b00:	af02      	add	r7, sp, #8
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b06:	4b22      	ldr	r3, [pc, #136]	; (8009b90 <prvProcessExpiredTimer+0x94>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	3304      	adds	r3, #4
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fd ff27 	bl	8007968 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b20:	f003 0304 	and.w	r3, r3, #4
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d022      	beq.n	8009b6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	699a      	ldr	r2, [r3, #24]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	18d1      	adds	r1, r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	683a      	ldr	r2, [r7, #0]
 8009b34:	6978      	ldr	r0, [r7, #20]
 8009b36:	f000 f8d1 	bl	8009cdc <prvInsertTimerInActiveList>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d01f      	beq.n	8009b80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b40:	2300      	movs	r3, #0
 8009b42:	9300      	str	r3, [sp, #0]
 8009b44:	2300      	movs	r3, #0
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	2100      	movs	r1, #0
 8009b4a:	6978      	ldr	r0, [r7, #20]
 8009b4c:	f7ff ff88 	bl	8009a60 <xTimerGenericCommand>
 8009b50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d113      	bne.n	8009b80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5c:	f383 8811 	msr	BASEPRI, r3
 8009b60:	f3bf 8f6f 	isb	sy
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	60fb      	str	r3, [r7, #12]
}
 8009b6a:	bf00      	nop
 8009b6c:	e7fe      	b.n	8009b6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b74:	f023 0301 	bic.w	r3, r3, #1
 8009b78:	b2da      	uxtb	r2, r3
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	6a1b      	ldr	r3, [r3, #32]
 8009b84:	6978      	ldr	r0, [r7, #20]
 8009b86:	4798      	blx	r3
}
 8009b88:	bf00      	nop
 8009b8a:	3718      	adds	r7, #24
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	20001184 	.word	0x20001184

08009b94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b9c:	f107 0308 	add.w	r3, r7, #8
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f000 f857 	bl	8009c54 <prvGetNextExpireTime>
 8009ba6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	4619      	mov	r1, r3
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 f803 	bl	8009bb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009bb2:	f000 f8d5 	bl	8009d60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009bb6:	e7f1      	b.n	8009b9c <prvTimerTask+0x8>

08009bb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009bc2:	f7ff f945 	bl	8008e50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bc6:	f107 0308 	add.w	r3, r7, #8
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 f866 	bl	8009c9c <prvSampleTimeNow>
 8009bd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d130      	bne.n	8009c3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10a      	bne.n	8009bf4 <prvProcessTimerOrBlockTask+0x3c>
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d806      	bhi.n	8009bf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009be6:	f7ff f941 	bl	8008e6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009bea:	68f9      	ldr	r1, [r7, #12]
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f7ff ff85 	bl	8009afc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009bf2:	e024      	b.n	8009c3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d008      	beq.n	8009c0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009bfa:	4b13      	ldr	r3, [pc, #76]	; (8009c48 <prvProcessTimerOrBlockTask+0x90>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d101      	bne.n	8009c08 <prvProcessTimerOrBlockTask+0x50>
 8009c04:	2301      	movs	r3, #1
 8009c06:	e000      	b.n	8009c0a <prvProcessTimerOrBlockTask+0x52>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c0c:	4b0f      	ldr	r3, [pc, #60]	; (8009c4c <prvProcessTimerOrBlockTask+0x94>)
 8009c0e:	6818      	ldr	r0, [r3, #0]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	4619      	mov	r1, r3
 8009c1a:	f7fe fea9 	bl	8008970 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c1e:	f7ff f925 	bl	8008e6c <xTaskResumeAll>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10a      	bne.n	8009c3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c28:	4b09      	ldr	r3, [pc, #36]	; (8009c50 <prvProcessTimerOrBlockTask+0x98>)
 8009c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c2e:	601a      	str	r2, [r3, #0]
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	f3bf 8f6f 	isb	sy
}
 8009c38:	e001      	b.n	8009c3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c3a:	f7ff f917 	bl	8008e6c <xTaskResumeAll>
}
 8009c3e:	bf00      	nop
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	20001188 	.word	0x20001188
 8009c4c:	2000118c 	.word	0x2000118c
 8009c50:	e000ed04 	.word	0xe000ed04

08009c54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c5c:	4b0e      	ldr	r3, [pc, #56]	; (8009c98 <prvGetNextExpireTime+0x44>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d101      	bne.n	8009c6a <prvGetNextExpireTime+0x16>
 8009c66:	2201      	movs	r2, #1
 8009c68:	e000      	b.n	8009c6c <prvGetNextExpireTime+0x18>
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d105      	bne.n	8009c84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c78:	4b07      	ldr	r3, [pc, #28]	; (8009c98 <prvGetNextExpireTime+0x44>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	60fb      	str	r3, [r7, #12]
 8009c82:	e001      	b.n	8009c88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009c84:	2300      	movs	r3, #0
 8009c86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c88:	68fb      	ldr	r3, [r7, #12]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3714      	adds	r7, #20
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	20001184 	.word	0x20001184

08009c9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009ca4:	f7ff f980 	bl	8008fa8 <xTaskGetTickCount>
 8009ca8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009caa:	4b0b      	ldr	r3, [pc, #44]	; (8009cd8 <prvSampleTimeNow+0x3c>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d205      	bcs.n	8009cc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009cb4:	f000 f936 	bl	8009f24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	601a      	str	r2, [r3, #0]
 8009cbe:	e002      	b.n	8009cc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009cc6:	4a04      	ldr	r2, [pc, #16]	; (8009cd8 <prvSampleTimeNow+0x3c>)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20001194 	.word	0x20001194

08009cdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b086      	sub	sp, #24
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
 8009ce8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009cea:	2300      	movs	r3, #0
 8009cec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d812      	bhi.n	8009d28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	1ad2      	subs	r2, r2, r3
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	699b      	ldr	r3, [r3, #24]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d302      	bcc.n	8009d16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d10:	2301      	movs	r3, #1
 8009d12:	617b      	str	r3, [r7, #20]
 8009d14:	e01b      	b.n	8009d4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d16:	4b10      	ldr	r3, [pc, #64]	; (8009d58 <prvInsertTimerInActiveList+0x7c>)
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	3304      	adds	r3, #4
 8009d1e:	4619      	mov	r1, r3
 8009d20:	4610      	mov	r0, r2
 8009d22:	f7fd fde8 	bl	80078f6 <vListInsert>
 8009d26:	e012      	b.n	8009d4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d206      	bcs.n	8009d3e <prvInsertTimerInActiveList+0x62>
 8009d30:	68ba      	ldr	r2, [r7, #8]
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d302      	bcc.n	8009d3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	617b      	str	r3, [r7, #20]
 8009d3c:	e007      	b.n	8009d4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d3e:	4b07      	ldr	r3, [pc, #28]	; (8009d5c <prvInsertTimerInActiveList+0x80>)
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	3304      	adds	r3, #4
 8009d46:	4619      	mov	r1, r3
 8009d48:	4610      	mov	r0, r2
 8009d4a:	f7fd fdd4 	bl	80078f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d4e:	697b      	ldr	r3, [r7, #20]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3718      	adds	r7, #24
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	20001188 	.word	0x20001188
 8009d5c:	20001184 	.word	0x20001184

08009d60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b08e      	sub	sp, #56	; 0x38
 8009d64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d66:	e0ca      	b.n	8009efe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	da18      	bge.n	8009da0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009d6e:	1d3b      	adds	r3, r7, #4
 8009d70:	3304      	adds	r3, #4
 8009d72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d10a      	bne.n	8009d90 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7e:	f383 8811 	msr	BASEPRI, r3
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	f3bf 8f4f 	dsb	sy
 8009d8a:	61fb      	str	r3, [r7, #28]
}
 8009d8c:	bf00      	nop
 8009d8e:	e7fe      	b.n	8009d8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d96:	6850      	ldr	r0, [r2, #4]
 8009d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d9a:	6892      	ldr	r2, [r2, #8]
 8009d9c:	4611      	mov	r1, r2
 8009d9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f2c0 80aa 	blt.w	8009efc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dae:	695b      	ldr	r3, [r3, #20]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d004      	beq.n	8009dbe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db6:	3304      	adds	r3, #4
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7fd fdd5 	bl	8007968 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dbe:	463b      	mov	r3, r7
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7ff ff6b 	bl	8009c9c <prvSampleTimeNow>
 8009dc6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2b09      	cmp	r3, #9
 8009dcc:	f200 8097 	bhi.w	8009efe <prvProcessReceivedCommands+0x19e>
 8009dd0:	a201      	add	r2, pc, #4	; (adr r2, 8009dd8 <prvProcessReceivedCommands+0x78>)
 8009dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd6:	bf00      	nop
 8009dd8:	08009e01 	.word	0x08009e01
 8009ddc:	08009e01 	.word	0x08009e01
 8009de0:	08009e01 	.word	0x08009e01
 8009de4:	08009e75 	.word	0x08009e75
 8009de8:	08009e89 	.word	0x08009e89
 8009dec:	08009ed3 	.word	0x08009ed3
 8009df0:	08009e01 	.word	0x08009e01
 8009df4:	08009e01 	.word	0x08009e01
 8009df8:	08009e75 	.word	0x08009e75
 8009dfc:	08009e89 	.word	0x08009e89
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e06:	f043 0301 	orr.w	r3, r3, #1
 8009e0a:	b2da      	uxtb	r2, r3
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	18d1      	adds	r1, r2, r3
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e20:	f7ff ff5c 	bl	8009cdc <prvInsertTimerInActiveList>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d069      	beq.n	8009efe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2c:	6a1b      	ldr	r3, [r3, #32]
 8009e2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e38:	f003 0304 	and.w	r3, r3, #4
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d05e      	beq.n	8009efe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e40:	68ba      	ldr	r2, [r7, #8]
 8009e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e44:	699b      	ldr	r3, [r3, #24]
 8009e46:	441a      	add	r2, r3
 8009e48:	2300      	movs	r3, #0
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	2100      	movs	r1, #0
 8009e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e52:	f7ff fe05 	bl	8009a60 <xTimerGenericCommand>
 8009e56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e58:	6a3b      	ldr	r3, [r7, #32]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d14f      	bne.n	8009efe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	61bb      	str	r3, [r7, #24]
}
 8009e70:	bf00      	nop
 8009e72:	e7fe      	b.n	8009e72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e7a:	f023 0301 	bic.w	r3, r3, #1
 8009e7e:	b2da      	uxtb	r2, r3
 8009e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009e86:	e03a      	b.n	8009efe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e8e:	f043 0301 	orr.w	r3, r3, #1
 8009e92:	b2da      	uxtb	r2, r3
 8009e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea2:	699b      	ldr	r3, [r3, #24]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10a      	bne.n	8009ebe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eac:	f383 8811 	msr	BASEPRI, r3
 8009eb0:	f3bf 8f6f 	isb	sy
 8009eb4:	f3bf 8f4f 	dsb	sy
 8009eb8:	617b      	str	r3, [r7, #20]
}
 8009eba:	bf00      	nop
 8009ebc:	e7fe      	b.n	8009ebc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec0:	699a      	ldr	r2, [r3, #24]
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec4:	18d1      	adds	r1, r2, r3
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ecc:	f7ff ff06 	bl	8009cdc <prvInsertTimerInActiveList>
					break;
 8009ed0:	e015      	b.n	8009efe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ed8:	f003 0302 	and.w	r3, r3, #2
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d103      	bne.n	8009ee8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ee2:	f000 fbdd 	bl	800a6a0 <vPortFree>
 8009ee6:	e00a      	b.n	8009efe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eee:	f023 0301 	bic.w	r3, r3, #1
 8009ef2:	b2da      	uxtb	r2, r3
 8009ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009efa:	e000      	b.n	8009efe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009efc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009efe:	4b08      	ldr	r3, [pc, #32]	; (8009f20 <prvProcessReceivedCommands+0x1c0>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	1d39      	adds	r1, r7, #4
 8009f04:	2200      	movs	r2, #0
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fe f926 	bl	8008158 <xQueueReceive>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f47f af2a 	bne.w	8009d68 <prvProcessReceivedCommands+0x8>
	}
}
 8009f14:	bf00      	nop
 8009f16:	bf00      	nop
 8009f18:	3730      	adds	r7, #48	; 0x30
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	2000118c 	.word	0x2000118c

08009f24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b088      	sub	sp, #32
 8009f28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f2a:	e048      	b.n	8009fbe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f2c:	4b2d      	ldr	r3, [pc, #180]	; (8009fe4 <prvSwitchTimerLists+0xc0>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f36:	4b2b      	ldr	r3, [pc, #172]	; (8009fe4 <prvSwitchTimerLists+0xc0>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	3304      	adds	r3, #4
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7fd fd0f 	bl	8007968 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6a1b      	ldr	r3, [r3, #32]
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f58:	f003 0304 	and.w	r3, r3, #4
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d02e      	beq.n	8009fbe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	699b      	ldr	r3, [r3, #24]
 8009f64:	693a      	ldr	r2, [r7, #16]
 8009f66:	4413      	add	r3, r2
 8009f68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d90e      	bls.n	8009f90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	68ba      	ldr	r2, [r7, #8]
 8009f76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f7e:	4b19      	ldr	r3, [pc, #100]	; (8009fe4 <prvSwitchTimerLists+0xc0>)
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	3304      	adds	r3, #4
 8009f86:	4619      	mov	r1, r3
 8009f88:	4610      	mov	r0, r2
 8009f8a:	f7fd fcb4 	bl	80078f6 <vListInsert>
 8009f8e:	e016      	b.n	8009fbe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f90:	2300      	movs	r3, #0
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	2300      	movs	r3, #0
 8009f96:	693a      	ldr	r2, [r7, #16]
 8009f98:	2100      	movs	r1, #0
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f7ff fd60 	bl	8009a60 <xTimerGenericCommand>
 8009fa0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d10a      	bne.n	8009fbe <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fac:	f383 8811 	msr	BASEPRI, r3
 8009fb0:	f3bf 8f6f 	isb	sy
 8009fb4:	f3bf 8f4f 	dsb	sy
 8009fb8:	603b      	str	r3, [r7, #0]
}
 8009fba:	bf00      	nop
 8009fbc:	e7fe      	b.n	8009fbc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fbe:	4b09      	ldr	r3, [pc, #36]	; (8009fe4 <prvSwitchTimerLists+0xc0>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1b1      	bne.n	8009f2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009fc8:	4b06      	ldr	r3, [pc, #24]	; (8009fe4 <prvSwitchTimerLists+0xc0>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009fce:	4b06      	ldr	r3, [pc, #24]	; (8009fe8 <prvSwitchTimerLists+0xc4>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a04      	ldr	r2, [pc, #16]	; (8009fe4 <prvSwitchTimerLists+0xc0>)
 8009fd4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009fd6:	4a04      	ldr	r2, [pc, #16]	; (8009fe8 <prvSwitchTimerLists+0xc4>)
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	6013      	str	r3, [r2, #0]
}
 8009fdc:	bf00      	nop
 8009fde:	3718      	adds	r7, #24
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	20001184 	.word	0x20001184
 8009fe8:	20001188 	.word	0x20001188

08009fec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009ff2:	f000 f967 	bl	800a2c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009ff6:	4b15      	ldr	r3, [pc, #84]	; (800a04c <prvCheckForValidListAndQueue+0x60>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d120      	bne.n	800a040 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009ffe:	4814      	ldr	r0, [pc, #80]	; (800a050 <prvCheckForValidListAndQueue+0x64>)
 800a000:	f7fd fc28 	bl	8007854 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a004:	4813      	ldr	r0, [pc, #76]	; (800a054 <prvCheckForValidListAndQueue+0x68>)
 800a006:	f7fd fc25 	bl	8007854 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a00a:	4b13      	ldr	r3, [pc, #76]	; (800a058 <prvCheckForValidListAndQueue+0x6c>)
 800a00c:	4a10      	ldr	r2, [pc, #64]	; (800a050 <prvCheckForValidListAndQueue+0x64>)
 800a00e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a010:	4b12      	ldr	r3, [pc, #72]	; (800a05c <prvCheckForValidListAndQueue+0x70>)
 800a012:	4a10      	ldr	r2, [pc, #64]	; (800a054 <prvCheckForValidListAndQueue+0x68>)
 800a014:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a016:	2300      	movs	r3, #0
 800a018:	9300      	str	r3, [sp, #0]
 800a01a:	4b11      	ldr	r3, [pc, #68]	; (800a060 <prvCheckForValidListAndQueue+0x74>)
 800a01c:	4a11      	ldr	r2, [pc, #68]	; (800a064 <prvCheckForValidListAndQueue+0x78>)
 800a01e:	2110      	movs	r1, #16
 800a020:	200a      	movs	r0, #10
 800a022:	f7fd fd33 	bl	8007a8c <xQueueGenericCreateStatic>
 800a026:	4603      	mov	r3, r0
 800a028:	4a08      	ldr	r2, [pc, #32]	; (800a04c <prvCheckForValidListAndQueue+0x60>)
 800a02a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a02c:	4b07      	ldr	r3, [pc, #28]	; (800a04c <prvCheckForValidListAndQueue+0x60>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d005      	beq.n	800a040 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a034:	4b05      	ldr	r3, [pc, #20]	; (800a04c <prvCheckForValidListAndQueue+0x60>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	490b      	ldr	r1, [pc, #44]	; (800a068 <prvCheckForValidListAndQueue+0x7c>)
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fe fc44 	bl	80088c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a040:	f000 f970 	bl	800a324 <vPortExitCritical>
}
 800a044:	bf00      	nop
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	2000118c 	.word	0x2000118c
 800a050:	2000115c 	.word	0x2000115c
 800a054:	20001170 	.word	0x20001170
 800a058:	20001184 	.word	0x20001184
 800a05c:	20001188 	.word	0x20001188
 800a060:	20001238 	.word	0x20001238
 800a064:	20001198 	.word	0x20001198
 800a068:	0800b25c 	.word	0x0800b25c

0800a06c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	3b04      	subs	r3, #4
 800a07c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a084:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	3b04      	subs	r3, #4
 800a08a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	f023 0201 	bic.w	r2, r3, #1
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	3b04      	subs	r3, #4
 800a09a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a09c:	4a0c      	ldr	r2, [pc, #48]	; (800a0d0 <pxPortInitialiseStack+0x64>)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	3b14      	subs	r3, #20
 800a0a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	3b04      	subs	r3, #4
 800a0b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f06f 0202 	mvn.w	r2, #2
 800a0ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	3b20      	subs	r3, #32
 800a0c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr
 800a0d0:	0800a0d5 	.word	0x0800a0d5

0800a0d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a0de:	4b12      	ldr	r3, [pc, #72]	; (800a128 <prvTaskExitError+0x54>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e6:	d00a      	beq.n	800a0fe <prvTaskExitError+0x2a>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	60fb      	str	r3, [r7, #12]
}
 800a0fa:	bf00      	nop
 800a0fc:	e7fe      	b.n	800a0fc <prvTaskExitError+0x28>
	__asm volatile
 800a0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a102:	f383 8811 	msr	BASEPRI, r3
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	60bb      	str	r3, [r7, #8]
}
 800a110:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a112:	bf00      	nop
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d0fc      	beq.n	800a114 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a11a:	bf00      	nop
 800a11c:	bf00      	nop
 800a11e:	3714      	adds	r7, #20
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr
 800a128:	2000003c 	.word	0x2000003c
 800a12c:	00000000 	.word	0x00000000

0800a130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a130:	4b07      	ldr	r3, [pc, #28]	; (800a150 <pxCurrentTCBConst2>)
 800a132:	6819      	ldr	r1, [r3, #0]
 800a134:	6808      	ldr	r0, [r1, #0]
 800a136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13a:	f380 8809 	msr	PSP, r0
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f04f 0000 	mov.w	r0, #0
 800a146:	f380 8811 	msr	BASEPRI, r0
 800a14a:	4770      	bx	lr
 800a14c:	f3af 8000 	nop.w

0800a150 <pxCurrentTCBConst2>:
 800a150:	20000c5c 	.word	0x20000c5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a154:	bf00      	nop
 800a156:	bf00      	nop

0800a158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a158:	4808      	ldr	r0, [pc, #32]	; (800a17c <prvPortStartFirstTask+0x24>)
 800a15a:	6800      	ldr	r0, [r0, #0]
 800a15c:	6800      	ldr	r0, [r0, #0]
 800a15e:	f380 8808 	msr	MSP, r0
 800a162:	f04f 0000 	mov.w	r0, #0
 800a166:	f380 8814 	msr	CONTROL, r0
 800a16a:	b662      	cpsie	i
 800a16c:	b661      	cpsie	f
 800a16e:	f3bf 8f4f 	dsb	sy
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	df00      	svc	0
 800a178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a17a:	bf00      	nop
 800a17c:	e000ed08 	.word	0xe000ed08

0800a180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b086      	sub	sp, #24
 800a184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a186:	4b46      	ldr	r3, [pc, #280]	; (800a2a0 <xPortStartScheduler+0x120>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a46      	ldr	r2, [pc, #280]	; (800a2a4 <xPortStartScheduler+0x124>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d10a      	bne.n	800a1a6 <xPortStartScheduler+0x26>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	613b      	str	r3, [r7, #16]
}
 800a1a2:	bf00      	nop
 800a1a4:	e7fe      	b.n	800a1a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a1a6:	4b3e      	ldr	r3, [pc, #248]	; (800a2a0 <xPortStartScheduler+0x120>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a3f      	ldr	r2, [pc, #252]	; (800a2a8 <xPortStartScheduler+0x128>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d10a      	bne.n	800a1c6 <xPortStartScheduler+0x46>
	__asm volatile
 800a1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b4:	f383 8811 	msr	BASEPRI, r3
 800a1b8:	f3bf 8f6f 	isb	sy
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	60fb      	str	r3, [r7, #12]
}
 800a1c2:	bf00      	nop
 800a1c4:	e7fe      	b.n	800a1c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a1c6:	4b39      	ldr	r3, [pc, #228]	; (800a2ac <xPortStartScheduler+0x12c>)
 800a1c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	22ff      	movs	r2, #255	; 0xff
 800a1d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a1e0:	78fb      	ldrb	r3, [r7, #3]
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a1e8:	b2da      	uxtb	r2, r3
 800a1ea:	4b31      	ldr	r3, [pc, #196]	; (800a2b0 <xPortStartScheduler+0x130>)
 800a1ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a1ee:	4b31      	ldr	r3, [pc, #196]	; (800a2b4 <xPortStartScheduler+0x134>)
 800a1f0:	2207      	movs	r2, #7
 800a1f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1f4:	e009      	b.n	800a20a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a1f6:	4b2f      	ldr	r3, [pc, #188]	; (800a2b4 <xPortStartScheduler+0x134>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	4a2d      	ldr	r2, [pc, #180]	; (800a2b4 <xPortStartScheduler+0x134>)
 800a1fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a200:	78fb      	ldrb	r3, [r7, #3]
 800a202:	b2db      	uxtb	r3, r3
 800a204:	005b      	lsls	r3, r3, #1
 800a206:	b2db      	uxtb	r3, r3
 800a208:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a20a:	78fb      	ldrb	r3, [r7, #3]
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a212:	2b80      	cmp	r3, #128	; 0x80
 800a214:	d0ef      	beq.n	800a1f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a216:	4b27      	ldr	r3, [pc, #156]	; (800a2b4 <xPortStartScheduler+0x134>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f1c3 0307 	rsb	r3, r3, #7
 800a21e:	2b04      	cmp	r3, #4
 800a220:	d00a      	beq.n	800a238 <xPortStartScheduler+0xb8>
	__asm volatile
 800a222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	60bb      	str	r3, [r7, #8]
}
 800a234:	bf00      	nop
 800a236:	e7fe      	b.n	800a236 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a238:	4b1e      	ldr	r3, [pc, #120]	; (800a2b4 <xPortStartScheduler+0x134>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	021b      	lsls	r3, r3, #8
 800a23e:	4a1d      	ldr	r2, [pc, #116]	; (800a2b4 <xPortStartScheduler+0x134>)
 800a240:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a242:	4b1c      	ldr	r3, [pc, #112]	; (800a2b4 <xPortStartScheduler+0x134>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a24a:	4a1a      	ldr	r2, [pc, #104]	; (800a2b4 <xPortStartScheduler+0x134>)
 800a24c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	b2da      	uxtb	r2, r3
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a256:	4b18      	ldr	r3, [pc, #96]	; (800a2b8 <xPortStartScheduler+0x138>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a17      	ldr	r2, [pc, #92]	; (800a2b8 <xPortStartScheduler+0x138>)
 800a25c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a260:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a262:	4b15      	ldr	r3, [pc, #84]	; (800a2b8 <xPortStartScheduler+0x138>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a14      	ldr	r2, [pc, #80]	; (800a2b8 <xPortStartScheduler+0x138>)
 800a268:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a26c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a26e:	f000 f8dd 	bl	800a42c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a272:	4b12      	ldr	r3, [pc, #72]	; (800a2bc <xPortStartScheduler+0x13c>)
 800a274:	2200      	movs	r2, #0
 800a276:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a278:	f000 f8fc 	bl	800a474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a27c:	4b10      	ldr	r3, [pc, #64]	; (800a2c0 <xPortStartScheduler+0x140>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a0f      	ldr	r2, [pc, #60]	; (800a2c0 <xPortStartScheduler+0x140>)
 800a282:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a286:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a288:	f7ff ff66 	bl	800a158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a28c:	f7fe ff56 	bl	800913c <vTaskSwitchContext>
	prvTaskExitError();
 800a290:	f7ff ff20 	bl	800a0d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3718      	adds	r7, #24
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	e000ed00 	.word	0xe000ed00
 800a2a4:	410fc271 	.word	0x410fc271
 800a2a8:	410fc270 	.word	0x410fc270
 800a2ac:	e000e400 	.word	0xe000e400
 800a2b0:	20001288 	.word	0x20001288
 800a2b4:	2000128c 	.word	0x2000128c
 800a2b8:	e000ed20 	.word	0xe000ed20
 800a2bc:	2000003c 	.word	0x2000003c
 800a2c0:	e000ef34 	.word	0xe000ef34

0800a2c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
	__asm volatile
 800a2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ce:	f383 8811 	msr	BASEPRI, r3
 800a2d2:	f3bf 8f6f 	isb	sy
 800a2d6:	f3bf 8f4f 	dsb	sy
 800a2da:	607b      	str	r3, [r7, #4]
}
 800a2dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a2de:	4b0f      	ldr	r3, [pc, #60]	; (800a31c <vPortEnterCritical+0x58>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	4a0d      	ldr	r2, [pc, #52]	; (800a31c <vPortEnterCritical+0x58>)
 800a2e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a2e8:	4b0c      	ldr	r3, [pc, #48]	; (800a31c <vPortEnterCritical+0x58>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d10f      	bne.n	800a310 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a2f0:	4b0b      	ldr	r3, [pc, #44]	; (800a320 <vPortEnterCritical+0x5c>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00a      	beq.n	800a310 <vPortEnterCritical+0x4c>
	__asm volatile
 800a2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fe:	f383 8811 	msr	BASEPRI, r3
 800a302:	f3bf 8f6f 	isb	sy
 800a306:	f3bf 8f4f 	dsb	sy
 800a30a:	603b      	str	r3, [r7, #0]
}
 800a30c:	bf00      	nop
 800a30e:	e7fe      	b.n	800a30e <vPortEnterCritical+0x4a>
	}
}
 800a310:	bf00      	nop
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr
 800a31c:	2000003c 	.word	0x2000003c
 800a320:	e000ed04 	.word	0xe000ed04

0800a324 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a32a:	4b12      	ldr	r3, [pc, #72]	; (800a374 <vPortExitCritical+0x50>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10a      	bne.n	800a348 <vPortExitCritical+0x24>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	607b      	str	r3, [r7, #4]
}
 800a344:	bf00      	nop
 800a346:	e7fe      	b.n	800a346 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a348:	4b0a      	ldr	r3, [pc, #40]	; (800a374 <vPortExitCritical+0x50>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3b01      	subs	r3, #1
 800a34e:	4a09      	ldr	r2, [pc, #36]	; (800a374 <vPortExitCritical+0x50>)
 800a350:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a352:	4b08      	ldr	r3, [pc, #32]	; (800a374 <vPortExitCritical+0x50>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d105      	bne.n	800a366 <vPortExitCritical+0x42>
 800a35a:	2300      	movs	r3, #0
 800a35c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	f383 8811 	msr	BASEPRI, r3
}
 800a364:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a366:	bf00      	nop
 800a368:	370c      	adds	r7, #12
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	2000003c 	.word	0x2000003c
	...

0800a380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a380:	f3ef 8009 	mrs	r0, PSP
 800a384:	f3bf 8f6f 	isb	sy
 800a388:	4b15      	ldr	r3, [pc, #84]	; (800a3e0 <pxCurrentTCBConst>)
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	f01e 0f10 	tst.w	lr, #16
 800a390:	bf08      	it	eq
 800a392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39a:	6010      	str	r0, [r2, #0]
 800a39c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a3a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a3a4:	f380 8811 	msr	BASEPRI, r0
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	f3bf 8f6f 	isb	sy
 800a3b0:	f7fe fec4 	bl	800913c <vTaskSwitchContext>
 800a3b4:	f04f 0000 	mov.w	r0, #0
 800a3b8:	f380 8811 	msr	BASEPRI, r0
 800a3bc:	bc09      	pop	{r0, r3}
 800a3be:	6819      	ldr	r1, [r3, #0]
 800a3c0:	6808      	ldr	r0, [r1, #0]
 800a3c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c6:	f01e 0f10 	tst.w	lr, #16
 800a3ca:	bf08      	it	eq
 800a3cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a3d0:	f380 8809 	msr	PSP, r0
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	f3af 8000 	nop.w

0800a3e0 <pxCurrentTCBConst>:
 800a3e0:	20000c5c 	.word	0x20000c5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a3e4:	bf00      	nop
 800a3e6:	bf00      	nop

0800a3e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	607b      	str	r3, [r7, #4]
}
 800a400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a402:	f7fe fde1 	bl	8008fc8 <xTaskIncrementTick>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d003      	beq.n	800a414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a40c:	4b06      	ldr	r3, [pc, #24]	; (800a428 <xPortSysTickHandler+0x40>)
 800a40e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a412:	601a      	str	r2, [r3, #0]
 800a414:	2300      	movs	r3, #0
 800a416:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	f383 8811 	msr	BASEPRI, r3
}
 800a41e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a420:	bf00      	nop
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	e000ed04 	.word	0xe000ed04

0800a42c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a42c:	b480      	push	{r7}
 800a42e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a430:	4b0b      	ldr	r3, [pc, #44]	; (800a460 <vPortSetupTimerInterrupt+0x34>)
 800a432:	2200      	movs	r2, #0
 800a434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a436:	4b0b      	ldr	r3, [pc, #44]	; (800a464 <vPortSetupTimerInterrupt+0x38>)
 800a438:	2200      	movs	r2, #0
 800a43a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a43c:	4b0a      	ldr	r3, [pc, #40]	; (800a468 <vPortSetupTimerInterrupt+0x3c>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a0a      	ldr	r2, [pc, #40]	; (800a46c <vPortSetupTimerInterrupt+0x40>)
 800a442:	fba2 2303 	umull	r2, r3, r2, r3
 800a446:	099b      	lsrs	r3, r3, #6
 800a448:	4a09      	ldr	r2, [pc, #36]	; (800a470 <vPortSetupTimerInterrupt+0x44>)
 800a44a:	3b01      	subs	r3, #1
 800a44c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a44e:	4b04      	ldr	r3, [pc, #16]	; (800a460 <vPortSetupTimerInterrupt+0x34>)
 800a450:	2207      	movs	r2, #7
 800a452:	601a      	str	r2, [r3, #0]
}
 800a454:	bf00      	nop
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	e000e010 	.word	0xe000e010
 800a464:	e000e018 	.word	0xe000e018
 800a468:	20000010 	.word	0x20000010
 800a46c:	10624dd3 	.word	0x10624dd3
 800a470:	e000e014 	.word	0xe000e014

0800a474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a474:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a484 <vPortEnableVFP+0x10>
 800a478:	6801      	ldr	r1, [r0, #0]
 800a47a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a47e:	6001      	str	r1, [r0, #0]
 800a480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a482:	bf00      	nop
 800a484:	e000ed88 	.word	0xe000ed88

0800a488 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a48e:	f3ef 8305 	mrs	r3, IPSR
 800a492:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2b0f      	cmp	r3, #15
 800a498:	d914      	bls.n	800a4c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a49a:	4a17      	ldr	r2, [pc, #92]	; (800a4f8 <vPortValidateInterruptPriority+0x70>)
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	4413      	add	r3, r2
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a4a4:	4b15      	ldr	r3, [pc, #84]	; (800a4fc <vPortValidateInterruptPriority+0x74>)
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	7afa      	ldrb	r2, [r7, #11]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d20a      	bcs.n	800a4c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	607b      	str	r3, [r7, #4]
}
 800a4c0:	bf00      	nop
 800a4c2:	e7fe      	b.n	800a4c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a4c4:	4b0e      	ldr	r3, [pc, #56]	; (800a500 <vPortValidateInterruptPriority+0x78>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a4cc:	4b0d      	ldr	r3, [pc, #52]	; (800a504 <vPortValidateInterruptPriority+0x7c>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d90a      	bls.n	800a4ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	603b      	str	r3, [r7, #0]
}
 800a4e6:	bf00      	nop
 800a4e8:	e7fe      	b.n	800a4e8 <vPortValidateInterruptPriority+0x60>
	}
 800a4ea:	bf00      	nop
 800a4ec:	3714      	adds	r7, #20
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr
 800a4f6:	bf00      	nop
 800a4f8:	e000e3f0 	.word	0xe000e3f0
 800a4fc:	20001288 	.word	0x20001288
 800a500:	e000ed0c 	.word	0xe000ed0c
 800a504:	2000128c 	.word	0x2000128c

0800a508 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b08a      	sub	sp, #40	; 0x28
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a510:	2300      	movs	r3, #0
 800a512:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a514:	f7fe fc9c 	bl	8008e50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a518:	4b5b      	ldr	r3, [pc, #364]	; (800a688 <pvPortMalloc+0x180>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d101      	bne.n	800a524 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a520:	f000 f920 	bl	800a764 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a524:	4b59      	ldr	r3, [pc, #356]	; (800a68c <pvPortMalloc+0x184>)
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	4013      	ands	r3, r2
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f040 8093 	bne.w	800a658 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d01d      	beq.n	800a574 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a538:	2208      	movs	r2, #8
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4413      	add	r3, r2
 800a53e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f003 0307 	and.w	r3, r3, #7
 800a546:	2b00      	cmp	r3, #0
 800a548:	d014      	beq.n	800a574 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f023 0307 	bic.w	r3, r3, #7
 800a550:	3308      	adds	r3, #8
 800a552:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f003 0307 	and.w	r3, r3, #7
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00a      	beq.n	800a574 <pvPortMalloc+0x6c>
	__asm volatile
 800a55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	617b      	str	r3, [r7, #20]
}
 800a570:	bf00      	nop
 800a572:	e7fe      	b.n	800a572 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d06e      	beq.n	800a658 <pvPortMalloc+0x150>
 800a57a:	4b45      	ldr	r3, [pc, #276]	; (800a690 <pvPortMalloc+0x188>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	429a      	cmp	r2, r3
 800a582:	d869      	bhi.n	800a658 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a584:	4b43      	ldr	r3, [pc, #268]	; (800a694 <pvPortMalloc+0x18c>)
 800a586:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a588:	4b42      	ldr	r3, [pc, #264]	; (800a694 <pvPortMalloc+0x18c>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a58e:	e004      	b.n	800a59a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a592:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d903      	bls.n	800a5ac <pvPortMalloc+0xa4>
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d1f1      	bne.n	800a590 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a5ac:	4b36      	ldr	r3, [pc, #216]	; (800a688 <pvPortMalloc+0x180>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d050      	beq.n	800a658 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a5b6:	6a3b      	ldr	r3, [r7, #32]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2208      	movs	r2, #8
 800a5bc:	4413      	add	r3, r2
 800a5be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	6a3b      	ldr	r3, [r7, #32]
 800a5c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ca:	685a      	ldr	r2, [r3, #4]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	1ad2      	subs	r2, r2, r3
 800a5d0:	2308      	movs	r3, #8
 800a5d2:	005b      	lsls	r3, r3, #1
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d91f      	bls.n	800a618 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a5d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4413      	add	r3, r2
 800a5de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	f003 0307 	and.w	r3, r3, #7
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00a      	beq.n	800a600 <pvPortMalloc+0xf8>
	__asm volatile
 800a5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ee:	f383 8811 	msr	BASEPRI, r3
 800a5f2:	f3bf 8f6f 	isb	sy
 800a5f6:	f3bf 8f4f 	dsb	sy
 800a5fa:	613b      	str	r3, [r7, #16]
}
 800a5fc:	bf00      	nop
 800a5fe:	e7fe      	b.n	800a5fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a602:	685a      	ldr	r2, [r3, #4]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	1ad2      	subs	r2, r2, r3
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a612:	69b8      	ldr	r0, [r7, #24]
 800a614:	f000 f908 	bl	800a828 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a618:	4b1d      	ldr	r3, [pc, #116]	; (800a690 <pvPortMalloc+0x188>)
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	4a1b      	ldr	r2, [pc, #108]	; (800a690 <pvPortMalloc+0x188>)
 800a624:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a626:	4b1a      	ldr	r3, [pc, #104]	; (800a690 <pvPortMalloc+0x188>)
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	4b1b      	ldr	r3, [pc, #108]	; (800a698 <pvPortMalloc+0x190>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d203      	bcs.n	800a63a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a632:	4b17      	ldr	r3, [pc, #92]	; (800a690 <pvPortMalloc+0x188>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a18      	ldr	r2, [pc, #96]	; (800a698 <pvPortMalloc+0x190>)
 800a638:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63c:	685a      	ldr	r2, [r3, #4]
 800a63e:	4b13      	ldr	r3, [pc, #76]	; (800a68c <pvPortMalloc+0x184>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	431a      	orrs	r2, r3
 800a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a646:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64a:	2200      	movs	r2, #0
 800a64c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a64e:	4b13      	ldr	r3, [pc, #76]	; (800a69c <pvPortMalloc+0x194>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	3301      	adds	r3, #1
 800a654:	4a11      	ldr	r2, [pc, #68]	; (800a69c <pvPortMalloc+0x194>)
 800a656:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a658:	f7fe fc08 	bl	8008e6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	f003 0307 	and.w	r3, r3, #7
 800a662:	2b00      	cmp	r3, #0
 800a664:	d00a      	beq.n	800a67c <pvPortMalloc+0x174>
	__asm volatile
 800a666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66a:	f383 8811 	msr	BASEPRI, r3
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	60fb      	str	r3, [r7, #12]
}
 800a678:	bf00      	nop
 800a67a:	e7fe      	b.n	800a67a <pvPortMalloc+0x172>
	return pvReturn;
 800a67c:	69fb      	ldr	r3, [r7, #28]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3728      	adds	r7, #40	; 0x28
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	20001e98 	.word	0x20001e98
 800a68c:	20001eac 	.word	0x20001eac
 800a690:	20001e9c 	.word	0x20001e9c
 800a694:	20001e90 	.word	0x20001e90
 800a698:	20001ea0 	.word	0x20001ea0
 800a69c:	20001ea4 	.word	0x20001ea4

0800a6a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d04d      	beq.n	800a74e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a6b2:	2308      	movs	r3, #8
 800a6b4:	425b      	negs	r3, r3
 800a6b6:	697a      	ldr	r2, [r7, #20]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	685a      	ldr	r2, [r3, #4]
 800a6c4:	4b24      	ldr	r3, [pc, #144]	; (800a758 <vPortFree+0xb8>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10a      	bne.n	800a6e4 <vPortFree+0x44>
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	60fb      	str	r3, [r7, #12]
}
 800a6e0:	bf00      	nop
 800a6e2:	e7fe      	b.n	800a6e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00a      	beq.n	800a702 <vPortFree+0x62>
	__asm volatile
 800a6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f0:	f383 8811 	msr	BASEPRI, r3
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	60bb      	str	r3, [r7, #8]
}
 800a6fe:	bf00      	nop
 800a700:	e7fe      	b.n	800a700 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	685a      	ldr	r2, [r3, #4]
 800a706:	4b14      	ldr	r3, [pc, #80]	; (800a758 <vPortFree+0xb8>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4013      	ands	r3, r2
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d01e      	beq.n	800a74e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d11a      	bne.n	800a74e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	4b0e      	ldr	r3, [pc, #56]	; (800a758 <vPortFree+0xb8>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	43db      	mvns	r3, r3
 800a722:	401a      	ands	r2, r3
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a728:	f7fe fb92 	bl	8008e50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	685a      	ldr	r2, [r3, #4]
 800a730:	4b0a      	ldr	r3, [pc, #40]	; (800a75c <vPortFree+0xbc>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4413      	add	r3, r2
 800a736:	4a09      	ldr	r2, [pc, #36]	; (800a75c <vPortFree+0xbc>)
 800a738:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a73a:	6938      	ldr	r0, [r7, #16]
 800a73c:	f000 f874 	bl	800a828 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a740:	4b07      	ldr	r3, [pc, #28]	; (800a760 <vPortFree+0xc0>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	3301      	adds	r3, #1
 800a746:	4a06      	ldr	r2, [pc, #24]	; (800a760 <vPortFree+0xc0>)
 800a748:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a74a:	f7fe fb8f 	bl	8008e6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a74e:	bf00      	nop
 800a750:	3718      	adds	r7, #24
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	20001eac 	.word	0x20001eac
 800a75c:	20001e9c 	.word	0x20001e9c
 800a760:	20001ea8 	.word	0x20001ea8

0800a764 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a76a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a76e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a770:	4b27      	ldr	r3, [pc, #156]	; (800a810 <prvHeapInit+0xac>)
 800a772:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f003 0307 	and.w	r3, r3, #7
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d00c      	beq.n	800a798 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	3307      	adds	r3, #7
 800a782:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f023 0307 	bic.w	r3, r3, #7
 800a78a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	4a1f      	ldr	r2, [pc, #124]	; (800a810 <prvHeapInit+0xac>)
 800a794:	4413      	add	r3, r2
 800a796:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a79c:	4a1d      	ldr	r2, [pc, #116]	; (800a814 <prvHeapInit+0xb0>)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a7a2:	4b1c      	ldr	r3, [pc, #112]	; (800a814 <prvHeapInit+0xb0>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	68ba      	ldr	r2, [r7, #8]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a7b0:	2208      	movs	r2, #8
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	1a9b      	subs	r3, r3, r2
 800a7b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f023 0307 	bic.w	r3, r3, #7
 800a7be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	4a15      	ldr	r2, [pc, #84]	; (800a818 <prvHeapInit+0xb4>)
 800a7c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a7c6:	4b14      	ldr	r3, [pc, #80]	; (800a818 <prvHeapInit+0xb4>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a7ce:	4b12      	ldr	r3, [pc, #72]	; (800a818 <prvHeapInit+0xb4>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	1ad2      	subs	r2, r2, r3
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a7e4:	4b0c      	ldr	r3, [pc, #48]	; (800a818 <prvHeapInit+0xb4>)
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	4a0a      	ldr	r2, [pc, #40]	; (800a81c <prvHeapInit+0xb8>)
 800a7f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	4a09      	ldr	r2, [pc, #36]	; (800a820 <prvHeapInit+0xbc>)
 800a7fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a7fc:	4b09      	ldr	r3, [pc, #36]	; (800a824 <prvHeapInit+0xc0>)
 800a7fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a802:	601a      	str	r2, [r3, #0]
}
 800a804:	bf00      	nop
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr
 800a810:	20001290 	.word	0x20001290
 800a814:	20001e90 	.word	0x20001e90
 800a818:	20001e98 	.word	0x20001e98
 800a81c:	20001ea0 	.word	0x20001ea0
 800a820:	20001e9c 	.word	0x20001e9c
 800a824:	20001eac 	.word	0x20001eac

0800a828 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a830:	4b28      	ldr	r3, [pc, #160]	; (800a8d4 <prvInsertBlockIntoFreeList+0xac>)
 800a832:	60fb      	str	r3, [r7, #12]
 800a834:	e002      	b.n	800a83c <prvInsertBlockIntoFreeList+0x14>
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	60fb      	str	r3, [r7, #12]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	429a      	cmp	r2, r3
 800a844:	d8f7      	bhi.n	800a836 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	4413      	add	r3, r2
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	429a      	cmp	r2, r3
 800a856:	d108      	bne.n	800a86a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	685a      	ldr	r2, [r3, #4]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	441a      	add	r2, r3
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	441a      	add	r2, r3
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d118      	bne.n	800a8b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	4b15      	ldr	r3, [pc, #84]	; (800a8d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	429a      	cmp	r2, r3
 800a888:	d00d      	beq.n	800a8a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	685a      	ldr	r2, [r3, #4]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	441a      	add	r2, r3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	e008      	b.n	800a8b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a8a6:	4b0c      	ldr	r3, [pc, #48]	; (800a8d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	601a      	str	r2, [r3, #0]
 800a8ae:	e003      	b.n	800a8b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d002      	beq.n	800a8c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8c6:	bf00      	nop
 800a8c8:	3714      	adds	r7, #20
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr
 800a8d2:	bf00      	nop
 800a8d4:	20001e90 	.word	0x20001e90
 800a8d8:	20001e98 	.word	0x20001e98

0800a8dc <__errno>:
 800a8dc:	4b01      	ldr	r3, [pc, #4]	; (800a8e4 <__errno+0x8>)
 800a8de:	6818      	ldr	r0, [r3, #0]
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	20000040 	.word	0x20000040

0800a8e8 <__libc_init_array>:
 800a8e8:	b570      	push	{r4, r5, r6, lr}
 800a8ea:	4d0d      	ldr	r5, [pc, #52]	; (800a920 <__libc_init_array+0x38>)
 800a8ec:	4c0d      	ldr	r4, [pc, #52]	; (800a924 <__libc_init_array+0x3c>)
 800a8ee:	1b64      	subs	r4, r4, r5
 800a8f0:	10a4      	asrs	r4, r4, #2
 800a8f2:	2600      	movs	r6, #0
 800a8f4:	42a6      	cmp	r6, r4
 800a8f6:	d109      	bne.n	800a90c <__libc_init_array+0x24>
 800a8f8:	4d0b      	ldr	r5, [pc, #44]	; (800a928 <__libc_init_array+0x40>)
 800a8fa:	4c0c      	ldr	r4, [pc, #48]	; (800a92c <__libc_init_array+0x44>)
 800a8fc:	f000 fc56 	bl	800b1ac <_init>
 800a900:	1b64      	subs	r4, r4, r5
 800a902:	10a4      	asrs	r4, r4, #2
 800a904:	2600      	movs	r6, #0
 800a906:	42a6      	cmp	r6, r4
 800a908:	d105      	bne.n	800a916 <__libc_init_array+0x2e>
 800a90a:	bd70      	pop	{r4, r5, r6, pc}
 800a90c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a910:	4798      	blx	r3
 800a912:	3601      	adds	r6, #1
 800a914:	e7ee      	b.n	800a8f4 <__libc_init_array+0xc>
 800a916:	f855 3b04 	ldr.w	r3, [r5], #4
 800a91a:	4798      	blx	r3
 800a91c:	3601      	adds	r6, #1
 800a91e:	e7f2      	b.n	800a906 <__libc_init_array+0x1e>
 800a920:	0800c834 	.word	0x0800c834
 800a924:	0800c834 	.word	0x0800c834
 800a928:	0800c834 	.word	0x0800c834
 800a92c:	0800c838 	.word	0x0800c838

0800a930 <memcpy>:
 800a930:	440a      	add	r2, r1
 800a932:	4291      	cmp	r1, r2
 800a934:	f100 33ff 	add.w	r3, r0, #4294967295
 800a938:	d100      	bne.n	800a93c <memcpy+0xc>
 800a93a:	4770      	bx	lr
 800a93c:	b510      	push	{r4, lr}
 800a93e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a942:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a946:	4291      	cmp	r1, r2
 800a948:	d1f9      	bne.n	800a93e <memcpy+0xe>
 800a94a:	bd10      	pop	{r4, pc}

0800a94c <memmove>:
 800a94c:	4288      	cmp	r0, r1
 800a94e:	b510      	push	{r4, lr}
 800a950:	eb01 0402 	add.w	r4, r1, r2
 800a954:	d902      	bls.n	800a95c <memmove+0x10>
 800a956:	4284      	cmp	r4, r0
 800a958:	4623      	mov	r3, r4
 800a95a:	d807      	bhi.n	800a96c <memmove+0x20>
 800a95c:	1e43      	subs	r3, r0, #1
 800a95e:	42a1      	cmp	r1, r4
 800a960:	d008      	beq.n	800a974 <memmove+0x28>
 800a962:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a96a:	e7f8      	b.n	800a95e <memmove+0x12>
 800a96c:	4402      	add	r2, r0
 800a96e:	4601      	mov	r1, r0
 800a970:	428a      	cmp	r2, r1
 800a972:	d100      	bne.n	800a976 <memmove+0x2a>
 800a974:	bd10      	pop	{r4, pc}
 800a976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a97a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a97e:	e7f7      	b.n	800a970 <memmove+0x24>

0800a980 <memset>:
 800a980:	4402      	add	r2, r0
 800a982:	4603      	mov	r3, r0
 800a984:	4293      	cmp	r3, r2
 800a986:	d100      	bne.n	800a98a <memset+0xa>
 800a988:	4770      	bx	lr
 800a98a:	f803 1b01 	strb.w	r1, [r3], #1
 800a98e:	e7f9      	b.n	800a984 <memset+0x4>

0800a990 <siprintf>:
 800a990:	b40e      	push	{r1, r2, r3}
 800a992:	b500      	push	{lr}
 800a994:	b09c      	sub	sp, #112	; 0x70
 800a996:	ab1d      	add	r3, sp, #116	; 0x74
 800a998:	9002      	str	r0, [sp, #8]
 800a99a:	9006      	str	r0, [sp, #24]
 800a99c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a9a0:	4809      	ldr	r0, [pc, #36]	; (800a9c8 <siprintf+0x38>)
 800a9a2:	9107      	str	r1, [sp, #28]
 800a9a4:	9104      	str	r1, [sp, #16]
 800a9a6:	4909      	ldr	r1, [pc, #36]	; (800a9cc <siprintf+0x3c>)
 800a9a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ac:	9105      	str	r1, [sp, #20]
 800a9ae:	6800      	ldr	r0, [r0, #0]
 800a9b0:	9301      	str	r3, [sp, #4]
 800a9b2:	a902      	add	r1, sp, #8
 800a9b4:	f000 f870 	bl	800aa98 <_svfiprintf_r>
 800a9b8:	9b02      	ldr	r3, [sp, #8]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	701a      	strb	r2, [r3, #0]
 800a9be:	b01c      	add	sp, #112	; 0x70
 800a9c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9c4:	b003      	add	sp, #12
 800a9c6:	4770      	bx	lr
 800a9c8:	20000040 	.word	0x20000040
 800a9cc:	ffff0208 	.word	0xffff0208

0800a9d0 <strcpy>:
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9d6:	f803 2b01 	strb.w	r2, [r3], #1
 800a9da:	2a00      	cmp	r2, #0
 800a9dc:	d1f9      	bne.n	800a9d2 <strcpy+0x2>
 800a9de:	4770      	bx	lr

0800a9e0 <__ssputs_r>:
 800a9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e4:	688e      	ldr	r6, [r1, #8]
 800a9e6:	429e      	cmp	r6, r3
 800a9e8:	4682      	mov	sl, r0
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	4690      	mov	r8, r2
 800a9ee:	461f      	mov	r7, r3
 800a9f0:	d838      	bhi.n	800aa64 <__ssputs_r+0x84>
 800a9f2:	898a      	ldrh	r2, [r1, #12]
 800a9f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9f8:	d032      	beq.n	800aa60 <__ssputs_r+0x80>
 800a9fa:	6825      	ldr	r5, [r4, #0]
 800a9fc:	6909      	ldr	r1, [r1, #16]
 800a9fe:	eba5 0901 	sub.w	r9, r5, r1
 800aa02:	6965      	ldr	r5, [r4, #20]
 800aa04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	444b      	add	r3, r9
 800aa10:	106d      	asrs	r5, r5, #1
 800aa12:	429d      	cmp	r5, r3
 800aa14:	bf38      	it	cc
 800aa16:	461d      	movcc	r5, r3
 800aa18:	0553      	lsls	r3, r2, #21
 800aa1a:	d531      	bpl.n	800aa80 <__ssputs_r+0xa0>
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	f000 fb1f 	bl	800b060 <_malloc_r>
 800aa22:	4606      	mov	r6, r0
 800aa24:	b950      	cbnz	r0, 800aa3c <__ssputs_r+0x5c>
 800aa26:	230c      	movs	r3, #12
 800aa28:	f8ca 3000 	str.w	r3, [sl]
 800aa2c:	89a3      	ldrh	r3, [r4, #12]
 800aa2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa32:	81a3      	strh	r3, [r4, #12]
 800aa34:	f04f 30ff 	mov.w	r0, #4294967295
 800aa38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa3c:	6921      	ldr	r1, [r4, #16]
 800aa3e:	464a      	mov	r2, r9
 800aa40:	f7ff ff76 	bl	800a930 <memcpy>
 800aa44:	89a3      	ldrh	r3, [r4, #12]
 800aa46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa4e:	81a3      	strh	r3, [r4, #12]
 800aa50:	6126      	str	r6, [r4, #16]
 800aa52:	6165      	str	r5, [r4, #20]
 800aa54:	444e      	add	r6, r9
 800aa56:	eba5 0509 	sub.w	r5, r5, r9
 800aa5a:	6026      	str	r6, [r4, #0]
 800aa5c:	60a5      	str	r5, [r4, #8]
 800aa5e:	463e      	mov	r6, r7
 800aa60:	42be      	cmp	r6, r7
 800aa62:	d900      	bls.n	800aa66 <__ssputs_r+0x86>
 800aa64:	463e      	mov	r6, r7
 800aa66:	4632      	mov	r2, r6
 800aa68:	6820      	ldr	r0, [r4, #0]
 800aa6a:	4641      	mov	r1, r8
 800aa6c:	f7ff ff6e 	bl	800a94c <memmove>
 800aa70:	68a3      	ldr	r3, [r4, #8]
 800aa72:	6822      	ldr	r2, [r4, #0]
 800aa74:	1b9b      	subs	r3, r3, r6
 800aa76:	4432      	add	r2, r6
 800aa78:	60a3      	str	r3, [r4, #8]
 800aa7a:	6022      	str	r2, [r4, #0]
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	e7db      	b.n	800aa38 <__ssputs_r+0x58>
 800aa80:	462a      	mov	r2, r5
 800aa82:	f000 fb47 	bl	800b114 <_realloc_r>
 800aa86:	4606      	mov	r6, r0
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d1e1      	bne.n	800aa50 <__ssputs_r+0x70>
 800aa8c:	6921      	ldr	r1, [r4, #16]
 800aa8e:	4650      	mov	r0, sl
 800aa90:	f000 fa96 	bl	800afc0 <_free_r>
 800aa94:	e7c7      	b.n	800aa26 <__ssputs_r+0x46>
	...

0800aa98 <_svfiprintf_r>:
 800aa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9c:	4698      	mov	r8, r3
 800aa9e:	898b      	ldrh	r3, [r1, #12]
 800aaa0:	061b      	lsls	r3, r3, #24
 800aaa2:	b09d      	sub	sp, #116	; 0x74
 800aaa4:	4607      	mov	r7, r0
 800aaa6:	460d      	mov	r5, r1
 800aaa8:	4614      	mov	r4, r2
 800aaaa:	d50e      	bpl.n	800aaca <_svfiprintf_r+0x32>
 800aaac:	690b      	ldr	r3, [r1, #16]
 800aaae:	b963      	cbnz	r3, 800aaca <_svfiprintf_r+0x32>
 800aab0:	2140      	movs	r1, #64	; 0x40
 800aab2:	f000 fad5 	bl	800b060 <_malloc_r>
 800aab6:	6028      	str	r0, [r5, #0]
 800aab8:	6128      	str	r0, [r5, #16]
 800aaba:	b920      	cbnz	r0, 800aac6 <_svfiprintf_r+0x2e>
 800aabc:	230c      	movs	r3, #12
 800aabe:	603b      	str	r3, [r7, #0]
 800aac0:	f04f 30ff 	mov.w	r0, #4294967295
 800aac4:	e0d1      	b.n	800ac6a <_svfiprintf_r+0x1d2>
 800aac6:	2340      	movs	r3, #64	; 0x40
 800aac8:	616b      	str	r3, [r5, #20]
 800aaca:	2300      	movs	r3, #0
 800aacc:	9309      	str	r3, [sp, #36]	; 0x24
 800aace:	2320      	movs	r3, #32
 800aad0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aad4:	f8cd 800c 	str.w	r8, [sp, #12]
 800aad8:	2330      	movs	r3, #48	; 0x30
 800aada:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ac84 <_svfiprintf_r+0x1ec>
 800aade:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aae2:	f04f 0901 	mov.w	r9, #1
 800aae6:	4623      	mov	r3, r4
 800aae8:	469a      	mov	sl, r3
 800aaea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaee:	b10a      	cbz	r2, 800aaf4 <_svfiprintf_r+0x5c>
 800aaf0:	2a25      	cmp	r2, #37	; 0x25
 800aaf2:	d1f9      	bne.n	800aae8 <_svfiprintf_r+0x50>
 800aaf4:	ebba 0b04 	subs.w	fp, sl, r4
 800aaf8:	d00b      	beq.n	800ab12 <_svfiprintf_r+0x7a>
 800aafa:	465b      	mov	r3, fp
 800aafc:	4622      	mov	r2, r4
 800aafe:	4629      	mov	r1, r5
 800ab00:	4638      	mov	r0, r7
 800ab02:	f7ff ff6d 	bl	800a9e0 <__ssputs_r>
 800ab06:	3001      	adds	r0, #1
 800ab08:	f000 80aa 	beq.w	800ac60 <_svfiprintf_r+0x1c8>
 800ab0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab0e:	445a      	add	r2, fp
 800ab10:	9209      	str	r2, [sp, #36]	; 0x24
 800ab12:	f89a 3000 	ldrb.w	r3, [sl]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f000 80a2 	beq.w	800ac60 <_svfiprintf_r+0x1c8>
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab26:	f10a 0a01 	add.w	sl, sl, #1
 800ab2a:	9304      	str	r3, [sp, #16]
 800ab2c:	9307      	str	r3, [sp, #28]
 800ab2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab32:	931a      	str	r3, [sp, #104]	; 0x68
 800ab34:	4654      	mov	r4, sl
 800ab36:	2205      	movs	r2, #5
 800ab38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab3c:	4851      	ldr	r0, [pc, #324]	; (800ac84 <_svfiprintf_r+0x1ec>)
 800ab3e:	f7f5 fb6f 	bl	8000220 <memchr>
 800ab42:	9a04      	ldr	r2, [sp, #16]
 800ab44:	b9d8      	cbnz	r0, 800ab7e <_svfiprintf_r+0xe6>
 800ab46:	06d0      	lsls	r0, r2, #27
 800ab48:	bf44      	itt	mi
 800ab4a:	2320      	movmi	r3, #32
 800ab4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab50:	0711      	lsls	r1, r2, #28
 800ab52:	bf44      	itt	mi
 800ab54:	232b      	movmi	r3, #43	; 0x2b
 800ab56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab5e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab60:	d015      	beq.n	800ab8e <_svfiprintf_r+0xf6>
 800ab62:	9a07      	ldr	r2, [sp, #28]
 800ab64:	4654      	mov	r4, sl
 800ab66:	2000      	movs	r0, #0
 800ab68:	f04f 0c0a 	mov.w	ip, #10
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab72:	3b30      	subs	r3, #48	; 0x30
 800ab74:	2b09      	cmp	r3, #9
 800ab76:	d94e      	bls.n	800ac16 <_svfiprintf_r+0x17e>
 800ab78:	b1b0      	cbz	r0, 800aba8 <_svfiprintf_r+0x110>
 800ab7a:	9207      	str	r2, [sp, #28]
 800ab7c:	e014      	b.n	800aba8 <_svfiprintf_r+0x110>
 800ab7e:	eba0 0308 	sub.w	r3, r0, r8
 800ab82:	fa09 f303 	lsl.w	r3, r9, r3
 800ab86:	4313      	orrs	r3, r2
 800ab88:	9304      	str	r3, [sp, #16]
 800ab8a:	46a2      	mov	sl, r4
 800ab8c:	e7d2      	b.n	800ab34 <_svfiprintf_r+0x9c>
 800ab8e:	9b03      	ldr	r3, [sp, #12]
 800ab90:	1d19      	adds	r1, r3, #4
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	9103      	str	r1, [sp, #12]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	bfbb      	ittet	lt
 800ab9a:	425b      	neglt	r3, r3
 800ab9c:	f042 0202 	orrlt.w	r2, r2, #2
 800aba0:	9307      	strge	r3, [sp, #28]
 800aba2:	9307      	strlt	r3, [sp, #28]
 800aba4:	bfb8      	it	lt
 800aba6:	9204      	strlt	r2, [sp, #16]
 800aba8:	7823      	ldrb	r3, [r4, #0]
 800abaa:	2b2e      	cmp	r3, #46	; 0x2e
 800abac:	d10c      	bne.n	800abc8 <_svfiprintf_r+0x130>
 800abae:	7863      	ldrb	r3, [r4, #1]
 800abb0:	2b2a      	cmp	r3, #42	; 0x2a
 800abb2:	d135      	bne.n	800ac20 <_svfiprintf_r+0x188>
 800abb4:	9b03      	ldr	r3, [sp, #12]
 800abb6:	1d1a      	adds	r2, r3, #4
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	9203      	str	r2, [sp, #12]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	bfb8      	it	lt
 800abc0:	f04f 33ff 	movlt.w	r3, #4294967295
 800abc4:	3402      	adds	r4, #2
 800abc6:	9305      	str	r3, [sp, #20]
 800abc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac94 <_svfiprintf_r+0x1fc>
 800abcc:	7821      	ldrb	r1, [r4, #0]
 800abce:	2203      	movs	r2, #3
 800abd0:	4650      	mov	r0, sl
 800abd2:	f7f5 fb25 	bl	8000220 <memchr>
 800abd6:	b140      	cbz	r0, 800abea <_svfiprintf_r+0x152>
 800abd8:	2340      	movs	r3, #64	; 0x40
 800abda:	eba0 000a 	sub.w	r0, r0, sl
 800abde:	fa03 f000 	lsl.w	r0, r3, r0
 800abe2:	9b04      	ldr	r3, [sp, #16]
 800abe4:	4303      	orrs	r3, r0
 800abe6:	3401      	adds	r4, #1
 800abe8:	9304      	str	r3, [sp, #16]
 800abea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abee:	4826      	ldr	r0, [pc, #152]	; (800ac88 <_svfiprintf_r+0x1f0>)
 800abf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abf4:	2206      	movs	r2, #6
 800abf6:	f7f5 fb13 	bl	8000220 <memchr>
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d038      	beq.n	800ac70 <_svfiprintf_r+0x1d8>
 800abfe:	4b23      	ldr	r3, [pc, #140]	; (800ac8c <_svfiprintf_r+0x1f4>)
 800ac00:	bb1b      	cbnz	r3, 800ac4a <_svfiprintf_r+0x1b2>
 800ac02:	9b03      	ldr	r3, [sp, #12]
 800ac04:	3307      	adds	r3, #7
 800ac06:	f023 0307 	bic.w	r3, r3, #7
 800ac0a:	3308      	adds	r3, #8
 800ac0c:	9303      	str	r3, [sp, #12]
 800ac0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac10:	4433      	add	r3, r6
 800ac12:	9309      	str	r3, [sp, #36]	; 0x24
 800ac14:	e767      	b.n	800aae6 <_svfiprintf_r+0x4e>
 800ac16:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	2001      	movs	r0, #1
 800ac1e:	e7a5      	b.n	800ab6c <_svfiprintf_r+0xd4>
 800ac20:	2300      	movs	r3, #0
 800ac22:	3401      	adds	r4, #1
 800ac24:	9305      	str	r3, [sp, #20]
 800ac26:	4619      	mov	r1, r3
 800ac28:	f04f 0c0a 	mov.w	ip, #10
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac32:	3a30      	subs	r2, #48	; 0x30
 800ac34:	2a09      	cmp	r2, #9
 800ac36:	d903      	bls.n	800ac40 <_svfiprintf_r+0x1a8>
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d0c5      	beq.n	800abc8 <_svfiprintf_r+0x130>
 800ac3c:	9105      	str	r1, [sp, #20]
 800ac3e:	e7c3      	b.n	800abc8 <_svfiprintf_r+0x130>
 800ac40:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac44:	4604      	mov	r4, r0
 800ac46:	2301      	movs	r3, #1
 800ac48:	e7f0      	b.n	800ac2c <_svfiprintf_r+0x194>
 800ac4a:	ab03      	add	r3, sp, #12
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	462a      	mov	r2, r5
 800ac50:	4b0f      	ldr	r3, [pc, #60]	; (800ac90 <_svfiprintf_r+0x1f8>)
 800ac52:	a904      	add	r1, sp, #16
 800ac54:	4638      	mov	r0, r7
 800ac56:	f3af 8000 	nop.w
 800ac5a:	1c42      	adds	r2, r0, #1
 800ac5c:	4606      	mov	r6, r0
 800ac5e:	d1d6      	bne.n	800ac0e <_svfiprintf_r+0x176>
 800ac60:	89ab      	ldrh	r3, [r5, #12]
 800ac62:	065b      	lsls	r3, r3, #25
 800ac64:	f53f af2c 	bmi.w	800aac0 <_svfiprintf_r+0x28>
 800ac68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac6a:	b01d      	add	sp, #116	; 0x74
 800ac6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac70:	ab03      	add	r3, sp, #12
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	462a      	mov	r2, r5
 800ac76:	4b06      	ldr	r3, [pc, #24]	; (800ac90 <_svfiprintf_r+0x1f8>)
 800ac78:	a904      	add	r1, sp, #16
 800ac7a:	4638      	mov	r0, r7
 800ac7c:	f000 f87a 	bl	800ad74 <_printf_i>
 800ac80:	e7eb      	b.n	800ac5a <_svfiprintf_r+0x1c2>
 800ac82:	bf00      	nop
 800ac84:	0800c7f8 	.word	0x0800c7f8
 800ac88:	0800c802 	.word	0x0800c802
 800ac8c:	00000000 	.word	0x00000000
 800ac90:	0800a9e1 	.word	0x0800a9e1
 800ac94:	0800c7fe 	.word	0x0800c7fe

0800ac98 <_printf_common>:
 800ac98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac9c:	4616      	mov	r6, r2
 800ac9e:	4699      	mov	r9, r3
 800aca0:	688a      	ldr	r2, [r1, #8]
 800aca2:	690b      	ldr	r3, [r1, #16]
 800aca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aca8:	4293      	cmp	r3, r2
 800acaa:	bfb8      	it	lt
 800acac:	4613      	movlt	r3, r2
 800acae:	6033      	str	r3, [r6, #0]
 800acb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800acb4:	4607      	mov	r7, r0
 800acb6:	460c      	mov	r4, r1
 800acb8:	b10a      	cbz	r2, 800acbe <_printf_common+0x26>
 800acba:	3301      	adds	r3, #1
 800acbc:	6033      	str	r3, [r6, #0]
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	0699      	lsls	r1, r3, #26
 800acc2:	bf42      	ittt	mi
 800acc4:	6833      	ldrmi	r3, [r6, #0]
 800acc6:	3302      	addmi	r3, #2
 800acc8:	6033      	strmi	r3, [r6, #0]
 800acca:	6825      	ldr	r5, [r4, #0]
 800accc:	f015 0506 	ands.w	r5, r5, #6
 800acd0:	d106      	bne.n	800ace0 <_printf_common+0x48>
 800acd2:	f104 0a19 	add.w	sl, r4, #25
 800acd6:	68e3      	ldr	r3, [r4, #12]
 800acd8:	6832      	ldr	r2, [r6, #0]
 800acda:	1a9b      	subs	r3, r3, r2
 800acdc:	42ab      	cmp	r3, r5
 800acde:	dc26      	bgt.n	800ad2e <_printf_common+0x96>
 800ace0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ace4:	1e13      	subs	r3, r2, #0
 800ace6:	6822      	ldr	r2, [r4, #0]
 800ace8:	bf18      	it	ne
 800acea:	2301      	movne	r3, #1
 800acec:	0692      	lsls	r2, r2, #26
 800acee:	d42b      	bmi.n	800ad48 <_printf_common+0xb0>
 800acf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acf4:	4649      	mov	r1, r9
 800acf6:	4638      	mov	r0, r7
 800acf8:	47c0      	blx	r8
 800acfa:	3001      	adds	r0, #1
 800acfc:	d01e      	beq.n	800ad3c <_printf_common+0xa4>
 800acfe:	6823      	ldr	r3, [r4, #0]
 800ad00:	68e5      	ldr	r5, [r4, #12]
 800ad02:	6832      	ldr	r2, [r6, #0]
 800ad04:	f003 0306 	and.w	r3, r3, #6
 800ad08:	2b04      	cmp	r3, #4
 800ad0a:	bf08      	it	eq
 800ad0c:	1aad      	subeq	r5, r5, r2
 800ad0e:	68a3      	ldr	r3, [r4, #8]
 800ad10:	6922      	ldr	r2, [r4, #16]
 800ad12:	bf0c      	ite	eq
 800ad14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad18:	2500      	movne	r5, #0
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	bfc4      	itt	gt
 800ad1e:	1a9b      	subgt	r3, r3, r2
 800ad20:	18ed      	addgt	r5, r5, r3
 800ad22:	2600      	movs	r6, #0
 800ad24:	341a      	adds	r4, #26
 800ad26:	42b5      	cmp	r5, r6
 800ad28:	d11a      	bne.n	800ad60 <_printf_common+0xc8>
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	e008      	b.n	800ad40 <_printf_common+0xa8>
 800ad2e:	2301      	movs	r3, #1
 800ad30:	4652      	mov	r2, sl
 800ad32:	4649      	mov	r1, r9
 800ad34:	4638      	mov	r0, r7
 800ad36:	47c0      	blx	r8
 800ad38:	3001      	adds	r0, #1
 800ad3a:	d103      	bne.n	800ad44 <_printf_common+0xac>
 800ad3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad44:	3501      	adds	r5, #1
 800ad46:	e7c6      	b.n	800acd6 <_printf_common+0x3e>
 800ad48:	18e1      	adds	r1, r4, r3
 800ad4a:	1c5a      	adds	r2, r3, #1
 800ad4c:	2030      	movs	r0, #48	; 0x30
 800ad4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad52:	4422      	add	r2, r4
 800ad54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad5c:	3302      	adds	r3, #2
 800ad5e:	e7c7      	b.n	800acf0 <_printf_common+0x58>
 800ad60:	2301      	movs	r3, #1
 800ad62:	4622      	mov	r2, r4
 800ad64:	4649      	mov	r1, r9
 800ad66:	4638      	mov	r0, r7
 800ad68:	47c0      	blx	r8
 800ad6a:	3001      	adds	r0, #1
 800ad6c:	d0e6      	beq.n	800ad3c <_printf_common+0xa4>
 800ad6e:	3601      	adds	r6, #1
 800ad70:	e7d9      	b.n	800ad26 <_printf_common+0x8e>
	...

0800ad74 <_printf_i>:
 800ad74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad78:	460c      	mov	r4, r1
 800ad7a:	4691      	mov	r9, r2
 800ad7c:	7e27      	ldrb	r7, [r4, #24]
 800ad7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ad80:	2f78      	cmp	r7, #120	; 0x78
 800ad82:	4680      	mov	r8, r0
 800ad84:	469a      	mov	sl, r3
 800ad86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad8a:	d807      	bhi.n	800ad9c <_printf_i+0x28>
 800ad8c:	2f62      	cmp	r7, #98	; 0x62
 800ad8e:	d80a      	bhi.n	800ada6 <_printf_i+0x32>
 800ad90:	2f00      	cmp	r7, #0
 800ad92:	f000 80d8 	beq.w	800af46 <_printf_i+0x1d2>
 800ad96:	2f58      	cmp	r7, #88	; 0x58
 800ad98:	f000 80a3 	beq.w	800aee2 <_printf_i+0x16e>
 800ad9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ada0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ada4:	e03a      	b.n	800ae1c <_printf_i+0xa8>
 800ada6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800adaa:	2b15      	cmp	r3, #21
 800adac:	d8f6      	bhi.n	800ad9c <_printf_i+0x28>
 800adae:	a001      	add	r0, pc, #4	; (adr r0, 800adb4 <_printf_i+0x40>)
 800adb0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800adb4:	0800ae0d 	.word	0x0800ae0d
 800adb8:	0800ae21 	.word	0x0800ae21
 800adbc:	0800ad9d 	.word	0x0800ad9d
 800adc0:	0800ad9d 	.word	0x0800ad9d
 800adc4:	0800ad9d 	.word	0x0800ad9d
 800adc8:	0800ad9d 	.word	0x0800ad9d
 800adcc:	0800ae21 	.word	0x0800ae21
 800add0:	0800ad9d 	.word	0x0800ad9d
 800add4:	0800ad9d 	.word	0x0800ad9d
 800add8:	0800ad9d 	.word	0x0800ad9d
 800addc:	0800ad9d 	.word	0x0800ad9d
 800ade0:	0800af2d 	.word	0x0800af2d
 800ade4:	0800ae51 	.word	0x0800ae51
 800ade8:	0800af0f 	.word	0x0800af0f
 800adec:	0800ad9d 	.word	0x0800ad9d
 800adf0:	0800ad9d 	.word	0x0800ad9d
 800adf4:	0800af4f 	.word	0x0800af4f
 800adf8:	0800ad9d 	.word	0x0800ad9d
 800adfc:	0800ae51 	.word	0x0800ae51
 800ae00:	0800ad9d 	.word	0x0800ad9d
 800ae04:	0800ad9d 	.word	0x0800ad9d
 800ae08:	0800af17 	.word	0x0800af17
 800ae0c:	680b      	ldr	r3, [r1, #0]
 800ae0e:	1d1a      	adds	r2, r3, #4
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	600a      	str	r2, [r1, #0]
 800ae14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ae18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e0a3      	b.n	800af68 <_printf_i+0x1f4>
 800ae20:	6825      	ldr	r5, [r4, #0]
 800ae22:	6808      	ldr	r0, [r1, #0]
 800ae24:	062e      	lsls	r6, r5, #24
 800ae26:	f100 0304 	add.w	r3, r0, #4
 800ae2a:	d50a      	bpl.n	800ae42 <_printf_i+0xce>
 800ae2c:	6805      	ldr	r5, [r0, #0]
 800ae2e:	600b      	str	r3, [r1, #0]
 800ae30:	2d00      	cmp	r5, #0
 800ae32:	da03      	bge.n	800ae3c <_printf_i+0xc8>
 800ae34:	232d      	movs	r3, #45	; 0x2d
 800ae36:	426d      	negs	r5, r5
 800ae38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae3c:	485e      	ldr	r0, [pc, #376]	; (800afb8 <_printf_i+0x244>)
 800ae3e:	230a      	movs	r3, #10
 800ae40:	e019      	b.n	800ae76 <_printf_i+0x102>
 800ae42:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ae46:	6805      	ldr	r5, [r0, #0]
 800ae48:	600b      	str	r3, [r1, #0]
 800ae4a:	bf18      	it	ne
 800ae4c:	b22d      	sxthne	r5, r5
 800ae4e:	e7ef      	b.n	800ae30 <_printf_i+0xbc>
 800ae50:	680b      	ldr	r3, [r1, #0]
 800ae52:	6825      	ldr	r5, [r4, #0]
 800ae54:	1d18      	adds	r0, r3, #4
 800ae56:	6008      	str	r0, [r1, #0]
 800ae58:	0628      	lsls	r0, r5, #24
 800ae5a:	d501      	bpl.n	800ae60 <_printf_i+0xec>
 800ae5c:	681d      	ldr	r5, [r3, #0]
 800ae5e:	e002      	b.n	800ae66 <_printf_i+0xf2>
 800ae60:	0669      	lsls	r1, r5, #25
 800ae62:	d5fb      	bpl.n	800ae5c <_printf_i+0xe8>
 800ae64:	881d      	ldrh	r5, [r3, #0]
 800ae66:	4854      	ldr	r0, [pc, #336]	; (800afb8 <_printf_i+0x244>)
 800ae68:	2f6f      	cmp	r7, #111	; 0x6f
 800ae6a:	bf0c      	ite	eq
 800ae6c:	2308      	moveq	r3, #8
 800ae6e:	230a      	movne	r3, #10
 800ae70:	2100      	movs	r1, #0
 800ae72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae76:	6866      	ldr	r6, [r4, #4]
 800ae78:	60a6      	str	r6, [r4, #8]
 800ae7a:	2e00      	cmp	r6, #0
 800ae7c:	bfa2      	ittt	ge
 800ae7e:	6821      	ldrge	r1, [r4, #0]
 800ae80:	f021 0104 	bicge.w	r1, r1, #4
 800ae84:	6021      	strge	r1, [r4, #0]
 800ae86:	b90d      	cbnz	r5, 800ae8c <_printf_i+0x118>
 800ae88:	2e00      	cmp	r6, #0
 800ae8a:	d04d      	beq.n	800af28 <_printf_i+0x1b4>
 800ae8c:	4616      	mov	r6, r2
 800ae8e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae92:	fb03 5711 	mls	r7, r3, r1, r5
 800ae96:	5dc7      	ldrb	r7, [r0, r7]
 800ae98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae9c:	462f      	mov	r7, r5
 800ae9e:	42bb      	cmp	r3, r7
 800aea0:	460d      	mov	r5, r1
 800aea2:	d9f4      	bls.n	800ae8e <_printf_i+0x11a>
 800aea4:	2b08      	cmp	r3, #8
 800aea6:	d10b      	bne.n	800aec0 <_printf_i+0x14c>
 800aea8:	6823      	ldr	r3, [r4, #0]
 800aeaa:	07df      	lsls	r7, r3, #31
 800aeac:	d508      	bpl.n	800aec0 <_printf_i+0x14c>
 800aeae:	6923      	ldr	r3, [r4, #16]
 800aeb0:	6861      	ldr	r1, [r4, #4]
 800aeb2:	4299      	cmp	r1, r3
 800aeb4:	bfde      	ittt	le
 800aeb6:	2330      	movle	r3, #48	; 0x30
 800aeb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aebc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aec0:	1b92      	subs	r2, r2, r6
 800aec2:	6122      	str	r2, [r4, #16]
 800aec4:	f8cd a000 	str.w	sl, [sp]
 800aec8:	464b      	mov	r3, r9
 800aeca:	aa03      	add	r2, sp, #12
 800aecc:	4621      	mov	r1, r4
 800aece:	4640      	mov	r0, r8
 800aed0:	f7ff fee2 	bl	800ac98 <_printf_common>
 800aed4:	3001      	adds	r0, #1
 800aed6:	d14c      	bne.n	800af72 <_printf_i+0x1fe>
 800aed8:	f04f 30ff 	mov.w	r0, #4294967295
 800aedc:	b004      	add	sp, #16
 800aede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aee2:	4835      	ldr	r0, [pc, #212]	; (800afb8 <_printf_i+0x244>)
 800aee4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aee8:	6823      	ldr	r3, [r4, #0]
 800aeea:	680e      	ldr	r6, [r1, #0]
 800aeec:	061f      	lsls	r7, r3, #24
 800aeee:	f856 5b04 	ldr.w	r5, [r6], #4
 800aef2:	600e      	str	r6, [r1, #0]
 800aef4:	d514      	bpl.n	800af20 <_printf_i+0x1ac>
 800aef6:	07d9      	lsls	r1, r3, #31
 800aef8:	bf44      	itt	mi
 800aefa:	f043 0320 	orrmi.w	r3, r3, #32
 800aefe:	6023      	strmi	r3, [r4, #0]
 800af00:	b91d      	cbnz	r5, 800af0a <_printf_i+0x196>
 800af02:	6823      	ldr	r3, [r4, #0]
 800af04:	f023 0320 	bic.w	r3, r3, #32
 800af08:	6023      	str	r3, [r4, #0]
 800af0a:	2310      	movs	r3, #16
 800af0c:	e7b0      	b.n	800ae70 <_printf_i+0xfc>
 800af0e:	6823      	ldr	r3, [r4, #0]
 800af10:	f043 0320 	orr.w	r3, r3, #32
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	2378      	movs	r3, #120	; 0x78
 800af18:	4828      	ldr	r0, [pc, #160]	; (800afbc <_printf_i+0x248>)
 800af1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af1e:	e7e3      	b.n	800aee8 <_printf_i+0x174>
 800af20:	065e      	lsls	r6, r3, #25
 800af22:	bf48      	it	mi
 800af24:	b2ad      	uxthmi	r5, r5
 800af26:	e7e6      	b.n	800aef6 <_printf_i+0x182>
 800af28:	4616      	mov	r6, r2
 800af2a:	e7bb      	b.n	800aea4 <_printf_i+0x130>
 800af2c:	680b      	ldr	r3, [r1, #0]
 800af2e:	6826      	ldr	r6, [r4, #0]
 800af30:	6960      	ldr	r0, [r4, #20]
 800af32:	1d1d      	adds	r5, r3, #4
 800af34:	600d      	str	r5, [r1, #0]
 800af36:	0635      	lsls	r5, r6, #24
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	d501      	bpl.n	800af40 <_printf_i+0x1cc>
 800af3c:	6018      	str	r0, [r3, #0]
 800af3e:	e002      	b.n	800af46 <_printf_i+0x1d2>
 800af40:	0671      	lsls	r1, r6, #25
 800af42:	d5fb      	bpl.n	800af3c <_printf_i+0x1c8>
 800af44:	8018      	strh	r0, [r3, #0]
 800af46:	2300      	movs	r3, #0
 800af48:	6123      	str	r3, [r4, #16]
 800af4a:	4616      	mov	r6, r2
 800af4c:	e7ba      	b.n	800aec4 <_printf_i+0x150>
 800af4e:	680b      	ldr	r3, [r1, #0]
 800af50:	1d1a      	adds	r2, r3, #4
 800af52:	600a      	str	r2, [r1, #0]
 800af54:	681e      	ldr	r6, [r3, #0]
 800af56:	6862      	ldr	r2, [r4, #4]
 800af58:	2100      	movs	r1, #0
 800af5a:	4630      	mov	r0, r6
 800af5c:	f7f5 f960 	bl	8000220 <memchr>
 800af60:	b108      	cbz	r0, 800af66 <_printf_i+0x1f2>
 800af62:	1b80      	subs	r0, r0, r6
 800af64:	6060      	str	r0, [r4, #4]
 800af66:	6863      	ldr	r3, [r4, #4]
 800af68:	6123      	str	r3, [r4, #16]
 800af6a:	2300      	movs	r3, #0
 800af6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af70:	e7a8      	b.n	800aec4 <_printf_i+0x150>
 800af72:	6923      	ldr	r3, [r4, #16]
 800af74:	4632      	mov	r2, r6
 800af76:	4649      	mov	r1, r9
 800af78:	4640      	mov	r0, r8
 800af7a:	47d0      	blx	sl
 800af7c:	3001      	adds	r0, #1
 800af7e:	d0ab      	beq.n	800aed8 <_printf_i+0x164>
 800af80:	6823      	ldr	r3, [r4, #0]
 800af82:	079b      	lsls	r3, r3, #30
 800af84:	d413      	bmi.n	800afae <_printf_i+0x23a>
 800af86:	68e0      	ldr	r0, [r4, #12]
 800af88:	9b03      	ldr	r3, [sp, #12]
 800af8a:	4298      	cmp	r0, r3
 800af8c:	bfb8      	it	lt
 800af8e:	4618      	movlt	r0, r3
 800af90:	e7a4      	b.n	800aedc <_printf_i+0x168>
 800af92:	2301      	movs	r3, #1
 800af94:	4632      	mov	r2, r6
 800af96:	4649      	mov	r1, r9
 800af98:	4640      	mov	r0, r8
 800af9a:	47d0      	blx	sl
 800af9c:	3001      	adds	r0, #1
 800af9e:	d09b      	beq.n	800aed8 <_printf_i+0x164>
 800afa0:	3501      	adds	r5, #1
 800afa2:	68e3      	ldr	r3, [r4, #12]
 800afa4:	9903      	ldr	r1, [sp, #12]
 800afa6:	1a5b      	subs	r3, r3, r1
 800afa8:	42ab      	cmp	r3, r5
 800afaa:	dcf2      	bgt.n	800af92 <_printf_i+0x21e>
 800afac:	e7eb      	b.n	800af86 <_printf_i+0x212>
 800afae:	2500      	movs	r5, #0
 800afb0:	f104 0619 	add.w	r6, r4, #25
 800afb4:	e7f5      	b.n	800afa2 <_printf_i+0x22e>
 800afb6:	bf00      	nop
 800afb8:	0800c809 	.word	0x0800c809
 800afbc:	0800c81a 	.word	0x0800c81a

0800afc0 <_free_r>:
 800afc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800afc2:	2900      	cmp	r1, #0
 800afc4:	d048      	beq.n	800b058 <_free_r+0x98>
 800afc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afca:	9001      	str	r0, [sp, #4]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f1a1 0404 	sub.w	r4, r1, #4
 800afd2:	bfb8      	it	lt
 800afd4:	18e4      	addlt	r4, r4, r3
 800afd6:	f000 f8d3 	bl	800b180 <__malloc_lock>
 800afda:	4a20      	ldr	r2, [pc, #128]	; (800b05c <_free_r+0x9c>)
 800afdc:	9801      	ldr	r0, [sp, #4]
 800afde:	6813      	ldr	r3, [r2, #0]
 800afe0:	4615      	mov	r5, r2
 800afe2:	b933      	cbnz	r3, 800aff2 <_free_r+0x32>
 800afe4:	6063      	str	r3, [r4, #4]
 800afe6:	6014      	str	r4, [r2, #0]
 800afe8:	b003      	add	sp, #12
 800afea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afee:	f000 b8cd 	b.w	800b18c <__malloc_unlock>
 800aff2:	42a3      	cmp	r3, r4
 800aff4:	d90b      	bls.n	800b00e <_free_r+0x4e>
 800aff6:	6821      	ldr	r1, [r4, #0]
 800aff8:	1862      	adds	r2, r4, r1
 800affa:	4293      	cmp	r3, r2
 800affc:	bf04      	itt	eq
 800affe:	681a      	ldreq	r2, [r3, #0]
 800b000:	685b      	ldreq	r3, [r3, #4]
 800b002:	6063      	str	r3, [r4, #4]
 800b004:	bf04      	itt	eq
 800b006:	1852      	addeq	r2, r2, r1
 800b008:	6022      	streq	r2, [r4, #0]
 800b00a:	602c      	str	r4, [r5, #0]
 800b00c:	e7ec      	b.n	800afe8 <_free_r+0x28>
 800b00e:	461a      	mov	r2, r3
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	b10b      	cbz	r3, 800b018 <_free_r+0x58>
 800b014:	42a3      	cmp	r3, r4
 800b016:	d9fa      	bls.n	800b00e <_free_r+0x4e>
 800b018:	6811      	ldr	r1, [r2, #0]
 800b01a:	1855      	adds	r5, r2, r1
 800b01c:	42a5      	cmp	r5, r4
 800b01e:	d10b      	bne.n	800b038 <_free_r+0x78>
 800b020:	6824      	ldr	r4, [r4, #0]
 800b022:	4421      	add	r1, r4
 800b024:	1854      	adds	r4, r2, r1
 800b026:	42a3      	cmp	r3, r4
 800b028:	6011      	str	r1, [r2, #0]
 800b02a:	d1dd      	bne.n	800afe8 <_free_r+0x28>
 800b02c:	681c      	ldr	r4, [r3, #0]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	6053      	str	r3, [r2, #4]
 800b032:	4421      	add	r1, r4
 800b034:	6011      	str	r1, [r2, #0]
 800b036:	e7d7      	b.n	800afe8 <_free_r+0x28>
 800b038:	d902      	bls.n	800b040 <_free_r+0x80>
 800b03a:	230c      	movs	r3, #12
 800b03c:	6003      	str	r3, [r0, #0]
 800b03e:	e7d3      	b.n	800afe8 <_free_r+0x28>
 800b040:	6825      	ldr	r5, [r4, #0]
 800b042:	1961      	adds	r1, r4, r5
 800b044:	428b      	cmp	r3, r1
 800b046:	bf04      	itt	eq
 800b048:	6819      	ldreq	r1, [r3, #0]
 800b04a:	685b      	ldreq	r3, [r3, #4]
 800b04c:	6063      	str	r3, [r4, #4]
 800b04e:	bf04      	itt	eq
 800b050:	1949      	addeq	r1, r1, r5
 800b052:	6021      	streq	r1, [r4, #0]
 800b054:	6054      	str	r4, [r2, #4]
 800b056:	e7c7      	b.n	800afe8 <_free_r+0x28>
 800b058:	b003      	add	sp, #12
 800b05a:	bd30      	pop	{r4, r5, pc}
 800b05c:	20001eb0 	.word	0x20001eb0

0800b060 <_malloc_r>:
 800b060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b062:	1ccd      	adds	r5, r1, #3
 800b064:	f025 0503 	bic.w	r5, r5, #3
 800b068:	3508      	adds	r5, #8
 800b06a:	2d0c      	cmp	r5, #12
 800b06c:	bf38      	it	cc
 800b06e:	250c      	movcc	r5, #12
 800b070:	2d00      	cmp	r5, #0
 800b072:	4606      	mov	r6, r0
 800b074:	db01      	blt.n	800b07a <_malloc_r+0x1a>
 800b076:	42a9      	cmp	r1, r5
 800b078:	d903      	bls.n	800b082 <_malloc_r+0x22>
 800b07a:	230c      	movs	r3, #12
 800b07c:	6033      	str	r3, [r6, #0]
 800b07e:	2000      	movs	r0, #0
 800b080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b082:	f000 f87d 	bl	800b180 <__malloc_lock>
 800b086:	4921      	ldr	r1, [pc, #132]	; (800b10c <_malloc_r+0xac>)
 800b088:	680a      	ldr	r2, [r1, #0]
 800b08a:	4614      	mov	r4, r2
 800b08c:	b99c      	cbnz	r4, 800b0b6 <_malloc_r+0x56>
 800b08e:	4f20      	ldr	r7, [pc, #128]	; (800b110 <_malloc_r+0xb0>)
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	b923      	cbnz	r3, 800b09e <_malloc_r+0x3e>
 800b094:	4621      	mov	r1, r4
 800b096:	4630      	mov	r0, r6
 800b098:	f000 f862 	bl	800b160 <_sbrk_r>
 800b09c:	6038      	str	r0, [r7, #0]
 800b09e:	4629      	mov	r1, r5
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	f000 f85d 	bl	800b160 <_sbrk_r>
 800b0a6:	1c43      	adds	r3, r0, #1
 800b0a8:	d123      	bne.n	800b0f2 <_malloc_r+0x92>
 800b0aa:	230c      	movs	r3, #12
 800b0ac:	6033      	str	r3, [r6, #0]
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	f000 f86c 	bl	800b18c <__malloc_unlock>
 800b0b4:	e7e3      	b.n	800b07e <_malloc_r+0x1e>
 800b0b6:	6823      	ldr	r3, [r4, #0]
 800b0b8:	1b5b      	subs	r3, r3, r5
 800b0ba:	d417      	bmi.n	800b0ec <_malloc_r+0x8c>
 800b0bc:	2b0b      	cmp	r3, #11
 800b0be:	d903      	bls.n	800b0c8 <_malloc_r+0x68>
 800b0c0:	6023      	str	r3, [r4, #0]
 800b0c2:	441c      	add	r4, r3
 800b0c4:	6025      	str	r5, [r4, #0]
 800b0c6:	e004      	b.n	800b0d2 <_malloc_r+0x72>
 800b0c8:	6863      	ldr	r3, [r4, #4]
 800b0ca:	42a2      	cmp	r2, r4
 800b0cc:	bf0c      	ite	eq
 800b0ce:	600b      	streq	r3, [r1, #0]
 800b0d0:	6053      	strne	r3, [r2, #4]
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	f000 f85a 	bl	800b18c <__malloc_unlock>
 800b0d8:	f104 000b 	add.w	r0, r4, #11
 800b0dc:	1d23      	adds	r3, r4, #4
 800b0de:	f020 0007 	bic.w	r0, r0, #7
 800b0e2:	1ac2      	subs	r2, r0, r3
 800b0e4:	d0cc      	beq.n	800b080 <_malloc_r+0x20>
 800b0e6:	1a1b      	subs	r3, r3, r0
 800b0e8:	50a3      	str	r3, [r4, r2]
 800b0ea:	e7c9      	b.n	800b080 <_malloc_r+0x20>
 800b0ec:	4622      	mov	r2, r4
 800b0ee:	6864      	ldr	r4, [r4, #4]
 800b0f0:	e7cc      	b.n	800b08c <_malloc_r+0x2c>
 800b0f2:	1cc4      	adds	r4, r0, #3
 800b0f4:	f024 0403 	bic.w	r4, r4, #3
 800b0f8:	42a0      	cmp	r0, r4
 800b0fa:	d0e3      	beq.n	800b0c4 <_malloc_r+0x64>
 800b0fc:	1a21      	subs	r1, r4, r0
 800b0fe:	4630      	mov	r0, r6
 800b100:	f000 f82e 	bl	800b160 <_sbrk_r>
 800b104:	3001      	adds	r0, #1
 800b106:	d1dd      	bne.n	800b0c4 <_malloc_r+0x64>
 800b108:	e7cf      	b.n	800b0aa <_malloc_r+0x4a>
 800b10a:	bf00      	nop
 800b10c:	20001eb0 	.word	0x20001eb0
 800b110:	20001eb4 	.word	0x20001eb4

0800b114 <_realloc_r>:
 800b114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b116:	4607      	mov	r7, r0
 800b118:	4614      	mov	r4, r2
 800b11a:	460e      	mov	r6, r1
 800b11c:	b921      	cbnz	r1, 800b128 <_realloc_r+0x14>
 800b11e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b122:	4611      	mov	r1, r2
 800b124:	f7ff bf9c 	b.w	800b060 <_malloc_r>
 800b128:	b922      	cbnz	r2, 800b134 <_realloc_r+0x20>
 800b12a:	f7ff ff49 	bl	800afc0 <_free_r>
 800b12e:	4625      	mov	r5, r4
 800b130:	4628      	mov	r0, r5
 800b132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b134:	f000 f830 	bl	800b198 <_malloc_usable_size_r>
 800b138:	42a0      	cmp	r0, r4
 800b13a:	d20f      	bcs.n	800b15c <_realloc_r+0x48>
 800b13c:	4621      	mov	r1, r4
 800b13e:	4638      	mov	r0, r7
 800b140:	f7ff ff8e 	bl	800b060 <_malloc_r>
 800b144:	4605      	mov	r5, r0
 800b146:	2800      	cmp	r0, #0
 800b148:	d0f2      	beq.n	800b130 <_realloc_r+0x1c>
 800b14a:	4631      	mov	r1, r6
 800b14c:	4622      	mov	r2, r4
 800b14e:	f7ff fbef 	bl	800a930 <memcpy>
 800b152:	4631      	mov	r1, r6
 800b154:	4638      	mov	r0, r7
 800b156:	f7ff ff33 	bl	800afc0 <_free_r>
 800b15a:	e7e9      	b.n	800b130 <_realloc_r+0x1c>
 800b15c:	4635      	mov	r5, r6
 800b15e:	e7e7      	b.n	800b130 <_realloc_r+0x1c>

0800b160 <_sbrk_r>:
 800b160:	b538      	push	{r3, r4, r5, lr}
 800b162:	4d06      	ldr	r5, [pc, #24]	; (800b17c <_sbrk_r+0x1c>)
 800b164:	2300      	movs	r3, #0
 800b166:	4604      	mov	r4, r0
 800b168:	4608      	mov	r0, r1
 800b16a:	602b      	str	r3, [r5, #0]
 800b16c:	f7f6 f896 	bl	800129c <_sbrk>
 800b170:	1c43      	adds	r3, r0, #1
 800b172:	d102      	bne.n	800b17a <_sbrk_r+0x1a>
 800b174:	682b      	ldr	r3, [r5, #0]
 800b176:	b103      	cbz	r3, 800b17a <_sbrk_r+0x1a>
 800b178:	6023      	str	r3, [r4, #0]
 800b17a:	bd38      	pop	{r3, r4, r5, pc}
 800b17c:	200021c8 	.word	0x200021c8

0800b180 <__malloc_lock>:
 800b180:	4801      	ldr	r0, [pc, #4]	; (800b188 <__malloc_lock+0x8>)
 800b182:	f000 b811 	b.w	800b1a8 <__retarget_lock_acquire_recursive>
 800b186:	bf00      	nop
 800b188:	200021d0 	.word	0x200021d0

0800b18c <__malloc_unlock>:
 800b18c:	4801      	ldr	r0, [pc, #4]	; (800b194 <__malloc_unlock+0x8>)
 800b18e:	f000 b80c 	b.w	800b1aa <__retarget_lock_release_recursive>
 800b192:	bf00      	nop
 800b194:	200021d0 	.word	0x200021d0

0800b198 <_malloc_usable_size_r>:
 800b198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b19c:	1f18      	subs	r0, r3, #4
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	bfbc      	itt	lt
 800b1a2:	580b      	ldrlt	r3, [r1, r0]
 800b1a4:	18c0      	addlt	r0, r0, r3
 800b1a6:	4770      	bx	lr

0800b1a8 <__retarget_lock_acquire_recursive>:
 800b1a8:	4770      	bx	lr

0800b1aa <__retarget_lock_release_recursive>:
 800b1aa:	4770      	bx	lr

0800b1ac <_init>:
 800b1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ae:	bf00      	nop
 800b1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1b2:	bc08      	pop	{r3}
 800b1b4:	469e      	mov	lr, r3
 800b1b6:	4770      	bx	lr

0800b1b8 <_fini>:
 800b1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ba:	bf00      	nop
 800b1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1be:	bc08      	pop	{r3}
 800b1c0:	469e      	mov	lr, r3
 800b1c2:	4770      	bx	lr
